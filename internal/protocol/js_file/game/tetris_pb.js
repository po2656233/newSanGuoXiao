/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pb.TetrisBlock', null, global);
goog.exportSymbol('proto.pb.TetrisShape', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.TetrisShape = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.TetrisShape.repeatedFields_, null);
};
goog.inherits(proto.pb.TetrisShape, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.TetrisShape.displayName = 'proto.pb.TetrisShape';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.TetrisBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.TetrisBlock.repeatedFields_, null);
};
goog.inherits(proto.pb.TetrisBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.TetrisBlock.displayName = 'proto.pb.TetrisBlock';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.TetrisShape.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.TetrisShape.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.TetrisShape.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.TetrisShape} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TetrisShape.toObject = function(includeInstance, msg) {
  var obj = {
    edgesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.TetrisShape}
 */
proto.pb.TetrisShape.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.TetrisShape;
  return proto.pb.TetrisShape.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.TetrisShape} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.TetrisShape}
 */
proto.pb.TetrisShape.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setEdgesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.TetrisShape.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.TetrisShape.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.TetrisShape} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TetrisShape.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEdgesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 edges = 1;
 * @return {!Array<number>}
 */
proto.pb.TetrisShape.prototype.getEdgesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.pb.TetrisShape.prototype.setEdgesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.TetrisShape.prototype.addEdges = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.TetrisShape.prototype.clearEdgesList = function() {
  this.setEdgesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.TetrisBlock.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.TetrisBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.TetrisBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.TetrisBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TetrisBlock.toObject = function(includeInstance, msg) {
  var obj = {
    left: jspb.Message.getFieldWithDefault(msg, 1, 0),
    right: jspb.Message.getFieldWithDefault(msg, 2, 0),
    down: jspb.Message.getFieldWithDefault(msg, 3, 0),
    up: jspb.Message.getFieldWithDefault(msg, 4, 0),
    bottom: jspb.Message.getFieldWithDefault(msg, 5, 0),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.pb.TetrisShape.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.TetrisBlock}
 */
proto.pb.TetrisBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.TetrisBlock;
  return proto.pb.TetrisBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.TetrisBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.TetrisBlock}
 */
proto.pb.TetrisBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLeft(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDown(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBottom(value);
      break;
    case 6:
      var value = new proto.pb.TetrisShape;
      reader.readMessage(value,proto.pb.TetrisShape.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.TetrisBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.TetrisBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.TetrisBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TetrisBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeft();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDown();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getUp();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getBottom();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.pb.TetrisShape.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 left = 1;
 * @return {number}
 */
proto.pb.TetrisBlock.prototype.getLeft = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.TetrisBlock.prototype.setLeft = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 right = 2;
 * @return {number}
 */
proto.pb.TetrisBlock.prototype.getRight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.TetrisBlock.prototype.setRight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 down = 3;
 * @return {number}
 */
proto.pb.TetrisBlock.prototype.getDown = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.TetrisBlock.prototype.setDown = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 up = 4;
 * @return {number}
 */
proto.pb.TetrisBlock.prototype.getUp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.TetrisBlock.prototype.setUp = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 bottom = 5;
 * @return {number}
 */
proto.pb.TetrisBlock.prototype.getBottom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb.TetrisBlock.prototype.setBottom = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated TetrisShape values = 6;
 * @return {!Array<!proto.pb.TetrisShape>}
 */
proto.pb.TetrisBlock.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.pb.TetrisShape>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.TetrisShape, 6));
};


/** @param {!Array<!proto.pb.TetrisShape>} value */
proto.pb.TetrisBlock.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.pb.TetrisShape=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.TetrisShape}
 */
proto.pb.TetrisBlock.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.pb.TetrisShape, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.TetrisBlock.prototype.clearValuesList = function() {
  this.setValuesList([]);
};


goog.object.extend(exports, proto.pb);
