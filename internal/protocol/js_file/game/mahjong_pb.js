/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_baseinfo_pb = require('../common/baseinfo_pb.js');
goog.object.extend(proto, common_baseinfo_pb);
goog.exportSymbol('proto.pb.EnterGameMJResp', null, global);
goog.exportSymbol('proto.pb.Fan_t', null, global);
goog.exportSymbol('proto.pb.MahjongDealResp', null, global);
goog.exportSymbol('proto.pb.MahjongHint', null, global);
goog.exportSymbol('proto.pb.MahjongHintResp', null, global);
goog.exportSymbol('proto.pb.MahjongKeZi', null, global);
goog.exportSymbol('proto.pb.MahjongOperateReq', null, global);
goog.exportSymbol('proto.pb.MahjongOperateResp', null, global);
goog.exportSymbol('proto.pb.MahjongOutCardReq', null, global);
goog.exportSymbol('proto.pb.MahjongOutCardResp', null, global);
goog.exportSymbol('proto.pb.MahjongPlayer', null, global);
goog.exportSymbol('proto.pb.MahjongReadyReq', null, global);
goog.exportSymbol('proto.pb.MahjongReadyResp', null, global);
goog.exportSymbol('proto.pb.MahjongRollReq', null, global);
goog.exportSymbol('proto.pb.MahjongRollResp', null, global);
goog.exportSymbol('proto.pb.MahjongSceneResp', null, global);
goog.exportSymbol('proto.pb.MahjongStateDecideResp', null, global);
goog.exportSymbol('proto.pb.MahjongStateDirectResp', null, global);
goog.exportSymbol('proto.pb.MahjongStateFreeResp', null, global);
goog.exportSymbol('proto.pb.MahjongStateOpenResp', null, global);
goog.exportSymbol('proto.pb.MahjongStateOverResp', null, global);
goog.exportSymbol('proto.pb.MahjongStatePlayingResp', null, global);
goog.exportSymbol('proto.pb.MahjongStateRollDiceResp', null, global);
goog.exportSymbol('proto.pb.MahjongStateStartResp', null, global);
goog.exportSymbol('proto.pb.MahjongStateWaitOperateResp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongKeZi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.MahjongKeZi.repeatedFields_, null);
};
goog.inherits(proto.pb.MahjongKeZi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongKeZi.displayName = 'proto.pb.MahjongKeZi';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongHint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.MahjongHint.repeatedFields_, null);
};
goog.inherits(proto.pb.MahjongHint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongHint.displayName = 'proto.pb.MahjongHint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.MahjongPlayer.repeatedFields_, null);
};
goog.inherits(proto.pb.MahjongPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongPlayer.displayName = 'proto.pb.MahjongPlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.EnterGameMJResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.EnterGameMJResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.EnterGameMJResp.displayName = 'proto.pb.EnterGameMJResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongSceneResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.MahjongSceneResp.repeatedFields_, null);
};
goog.inherits(proto.pb.MahjongSceneResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongSceneResp.displayName = 'proto.pb.MahjongSceneResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongStateFreeResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.MahjongStateFreeResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongStateFreeResp.displayName = 'proto.pb.MahjongStateFreeResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongStateDirectResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.MahjongStateDirectResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongStateDirectResp.displayName = 'proto.pb.MahjongStateDirectResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongStateDecideResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.MahjongStateDecideResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongStateDecideResp.displayName = 'proto.pb.MahjongStateDecideResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongStateRollDiceResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.MahjongStateRollDiceResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongStateRollDiceResp.displayName = 'proto.pb.MahjongStateRollDiceResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongStateStartResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.MahjongStateStartResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongStateStartResp.displayName = 'proto.pb.MahjongStateStartResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongStatePlayingResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.MahjongStatePlayingResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongStatePlayingResp.displayName = 'proto.pb.MahjongStatePlayingResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongStateWaitOperateResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.MahjongStateWaitOperateResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongStateWaitOperateResp.displayName = 'proto.pb.MahjongStateWaitOperateResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongStateOpenResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.MahjongStateOpenResp.repeatedFields_, null);
};
goog.inherits(proto.pb.MahjongStateOpenResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongStateOpenResp.displayName = 'proto.pb.MahjongStateOpenResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongStateOverResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.MahjongStateOverResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongStateOverResp.displayName = 'proto.pb.MahjongStateOverResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongReadyReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.MahjongReadyReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongReadyReq.displayName = 'proto.pb.MahjongReadyReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongReadyResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.MahjongReadyResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongReadyResp.displayName = 'proto.pb.MahjongReadyResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongRollReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.MahjongRollReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongRollReq.displayName = 'proto.pb.MahjongRollReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongRollResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.MahjongRollResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongRollResp.displayName = 'proto.pb.MahjongRollResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongOutCardReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.MahjongOutCardReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongOutCardReq.displayName = 'proto.pb.MahjongOutCardReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongOutCardResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.MahjongOutCardResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongOutCardResp.displayName = 'proto.pb.MahjongOutCardResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongOperateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.MahjongOperateReq.repeatedFields_, null);
};
goog.inherits(proto.pb.MahjongOperateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongOperateReq.displayName = 'proto.pb.MahjongOperateReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongOperateResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.MahjongOperateResp.repeatedFields_, null);
};
goog.inherits(proto.pb.MahjongOperateResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongOperateResp.displayName = 'proto.pb.MahjongOperateResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongDealResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.MahjongDealResp.repeatedFields_, null);
};
goog.inherits(proto.pb.MahjongDealResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongDealResp.displayName = 'proto.pb.MahjongDealResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MahjongHintResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.MahjongHintResp.repeatedFields_, null);
};
goog.inherits(proto.pb.MahjongHintResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MahjongHintResp.displayName = 'proto.pb.MahjongHintResp';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.MahjongKeZi.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongKeZi.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongKeZi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongKeZi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongKeZi.toObject = function(includeInstance, msg) {
  var obj = {
    cardsList: jspb.Message.getRepeatedField(msg, 1),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    byuid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongKeZi}
 */
proto.pb.MahjongKeZi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongKeZi;
  return proto.pb.MahjongKeZi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongKeZi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongKeZi}
 */
proto.pb.MahjongKeZi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setCardsList(value);
      break;
    case 2:
      var value = /** @type {!proto.pb.MJOperate} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setByuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongKeZi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongKeZi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongKeZi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongKeZi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getByuid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * repeated int32 cards = 1;
 * @return {!Array<number>}
 */
proto.pb.MahjongKeZi.prototype.getCardsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.pb.MahjongKeZi.prototype.setCardsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.MahjongKeZi.prototype.addCards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.MahjongKeZi.prototype.clearCardsList = function() {
  this.setCardsList([]);
};


/**
 * optional MJOperate code = 2;
 * @return {!proto.pb.MJOperate}
 */
proto.pb.MahjongKeZi.prototype.getCode = function() {
  return /** @type {!proto.pb.MJOperate} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.pb.MJOperate} value */
proto.pb.MahjongKeZi.prototype.setCode = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 byUid = 3;
 * @return {number}
 */
proto.pb.MahjongKeZi.prototype.getByuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.MahjongKeZi.prototype.setByuid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.MahjongHint.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongHint.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongHint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongHint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongHint.toObject = function(includeInstance, msg) {
  var obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cardsList: jspb.Message.getRepeatedField(msg, 2),
    byuid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongHint}
 */
proto.pb.MahjongHint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongHint;
  return proto.pb.MahjongHint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongHint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongHint}
 */
proto.pb.MahjongHint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.MJOperate} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setCardsList(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setByuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongHint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongHint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongHint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongHint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getByuid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional MJOperate code = 1;
 * @return {!proto.pb.MJOperate}
 */
proto.pb.MahjongHint.prototype.getCode = function() {
  return /** @type {!proto.pb.MJOperate} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.pb.MJOperate} value */
proto.pb.MahjongHint.prototype.setCode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated int32 cards = 2;
 * @return {!Array<number>}
 */
proto.pb.MahjongHint.prototype.getCardsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.pb.MahjongHint.prototype.setCardsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.MahjongHint.prototype.addCards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.MahjongHint.prototype.clearCardsList = function() {
  this.setCardsList([]);
};


/**
 * optional int64 byUid = 3;
 * @return {number}
 */
proto.pb.MahjongHint.prototype.getByuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.MahjongHint.prototype.setByuid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.MahjongPlayer.repeatedFields_ = [2,3,4,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongPlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongPlayer.toObject = function(includeInstance, msg) {
  var obj = {
    myinfo: (f = msg.getMyinfo()) && common_baseinfo_pb.PlayerInfo.toObject(includeInstance, f),
    handcardsList: jspb.Message.getRepeatedField(msg, 2),
    kezicardsList: jspb.Message.toObjectList(msg.getKezicardsList(),
    proto.pb.MahjongKeZi.toObject, includeInstance),
    tablecardsList: jspb.Message.getRepeatedField(msg, 4),
    isting: jspb.Message.getFieldWithDefault(msg, 5, false),
    gainscore: jspb.Message.getFieldWithDefault(msg, 6, 0),
    totalscore: jspb.Message.getFieldWithDefault(msg, 7, 0),
    menfeng: jspb.Message.getFieldWithDefault(msg, 8, 0),
    sitdirect: jspb.Message.getFieldWithDefault(msg, 9, 0),
    ophintsList: jspb.Message.toObjectList(msg.getOphintsList(),
    proto.pb.MahjongHint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongPlayer}
 */
proto.pb.MahjongPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongPlayer;
  return proto.pb.MahjongPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongPlayer}
 */
proto.pb.MahjongPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_baseinfo_pb.PlayerInfo;
      reader.readMessage(value,common_baseinfo_pb.PlayerInfo.deserializeBinaryFromReader);
      msg.setMyinfo(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setHandcardsList(value);
      break;
    case 3:
      var value = new proto.pb.MahjongKeZi;
      reader.readMessage(value,proto.pb.MahjongKeZi.deserializeBinaryFromReader);
      msg.addKezicards(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setTablecardsList(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsting(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGainscore(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalscore(value);
      break;
    case 8:
      var value = /** @type {!proto.pb.Direct} */ (reader.readEnum());
      msg.setMenfeng(value);
      break;
    case 9:
      var value = /** @type {!proto.pb.Direct} */ (reader.readEnum());
      msg.setSitdirect(value);
      break;
    case 10:
      var value = new proto.pb.MahjongHint;
      reader.readMessage(value,proto.pb.MahjongHint.deserializeBinaryFromReader);
      msg.addOphints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongPlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongPlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_baseinfo_pb.PlayerInfo.serializeBinaryToWriter
    );
  }
  f = message.getHandcardsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getKezicardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.pb.MahjongKeZi.serializeBinaryToWriter
    );
  }
  f = message.getTablecardsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      4,
      f
    );
  }
  f = message.getIsting();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getGainscore();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getTotalscore();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getMenfeng();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getSitdirect();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getOphintsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.pb.MahjongHint.serializeBinaryToWriter
    );
  }
};


/**
 * optional PlayerInfo myInfo = 1;
 * @return {?proto.pb.PlayerInfo}
 */
proto.pb.MahjongPlayer.prototype.getMyinfo = function() {
  return /** @type{?proto.pb.PlayerInfo} */ (
    jspb.Message.getWrapperField(this, common_baseinfo_pb.PlayerInfo, 1));
};


/** @param {?proto.pb.PlayerInfo|undefined} value */
proto.pb.MahjongPlayer.prototype.setMyinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.MahjongPlayer.prototype.clearMyinfo = function() {
  this.setMyinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.MahjongPlayer.prototype.hasMyinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 handCards = 2;
 * @return {!Array<number>}
 */
proto.pb.MahjongPlayer.prototype.getHandcardsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.pb.MahjongPlayer.prototype.setHandcardsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.MahjongPlayer.prototype.addHandcards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.MahjongPlayer.prototype.clearHandcardsList = function() {
  this.setHandcardsList([]);
};


/**
 * repeated MahjongKeZi keZiCards = 3;
 * @return {!Array<!proto.pb.MahjongKeZi>}
 */
proto.pb.MahjongPlayer.prototype.getKezicardsList = function() {
  return /** @type{!Array<!proto.pb.MahjongKeZi>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.MahjongKeZi, 3));
};


/** @param {!Array<!proto.pb.MahjongKeZi>} value */
proto.pb.MahjongPlayer.prototype.setKezicardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pb.MahjongKeZi=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.MahjongKeZi}
 */
proto.pb.MahjongPlayer.prototype.addKezicards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pb.MahjongKeZi, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.MahjongPlayer.prototype.clearKezicardsList = function() {
  this.setKezicardsList([]);
};


/**
 * repeated int32 tableCards = 4;
 * @return {!Array<number>}
 */
proto.pb.MahjongPlayer.prototype.getTablecardsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<number>} value */
proto.pb.MahjongPlayer.prototype.setTablecardsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.MahjongPlayer.prototype.addTablecards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.MahjongPlayer.prototype.clearTablecardsList = function() {
  this.setTablecardsList([]);
};


/**
 * optional bool isTing = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.MahjongPlayer.prototype.getIsting = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.pb.MahjongPlayer.prototype.setIsting = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional int64 gainScore = 6;
 * @return {number}
 */
proto.pb.MahjongPlayer.prototype.getGainscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.pb.MahjongPlayer.prototype.setGainscore = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 totalScore = 7;
 * @return {number}
 */
proto.pb.MahjongPlayer.prototype.getTotalscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.pb.MahjongPlayer.prototype.setTotalscore = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional Direct menFeng = 8;
 * @return {!proto.pb.Direct}
 */
proto.pb.MahjongPlayer.prototype.getMenfeng = function() {
  return /** @type {!proto.pb.Direct} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.pb.Direct} value */
proto.pb.MahjongPlayer.prototype.setMenfeng = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional Direct sitDirect = 9;
 * @return {!proto.pb.Direct}
 */
proto.pb.MahjongPlayer.prototype.getSitdirect = function() {
  return /** @type {!proto.pb.Direct} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.pb.Direct} value */
proto.pb.MahjongPlayer.prototype.setSitdirect = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * repeated MahjongHint opHints = 10;
 * @return {!Array<!proto.pb.MahjongHint>}
 */
proto.pb.MahjongPlayer.prototype.getOphintsList = function() {
  return /** @type{!Array<!proto.pb.MahjongHint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.MahjongHint, 10));
};


/** @param {!Array<!proto.pb.MahjongHint>} value */
proto.pb.MahjongPlayer.prototype.setOphintsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.pb.MahjongHint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.MahjongHint}
 */
proto.pb.MahjongPlayer.prototype.addOphints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.pb.MahjongHint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.MahjongPlayer.prototype.clearOphintsList = function() {
  this.setOphintsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.EnterGameMJResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.EnterGameMJResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.EnterGameMJResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.EnterGameMJResp.toObject = function(includeInstance, msg) {
  var obj = {
    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chairnum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    player: (f = msg.getPlayer()) && proto.pb.MahjongPlayer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.EnterGameMJResp}
 */
proto.pb.EnterGameMJResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.EnterGameMJResp;
  return proto.pb.EnterGameMJResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.EnterGameMJResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.EnterGameMJResp}
 */
proto.pb.EnterGameMJResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChairnum(value);
      break;
    case 3:
      var value = new proto.pb.MahjongPlayer;
      reader.readMessage(value,proto.pb.MahjongPlayer.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.EnterGameMJResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.EnterGameMJResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.EnterGameMJResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.EnterGameMJResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getChairnum();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.MahjongPlayer.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 gameID = 1;
 * @return {number}
 */
proto.pb.EnterGameMJResp.prototype.getGameid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.EnterGameMJResp.prototype.setGameid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 chairNum = 2;
 * @return {number}
 */
proto.pb.EnterGameMJResp.prototype.getChairnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.EnterGameMJResp.prototype.setChairnum = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional MahjongPlayer player = 3;
 * @return {?proto.pb.MahjongPlayer}
 */
proto.pb.EnterGameMJResp.prototype.getPlayer = function() {
  return /** @type{?proto.pb.MahjongPlayer} */ (
    jspb.Message.getWrapperField(this, proto.pb.MahjongPlayer, 3));
};


/** @param {?proto.pb.MahjongPlayer|undefined} value */
proto.pb.EnterGameMJResp.prototype.setPlayer = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.EnterGameMJResp.prototype.clearPlayer = function() {
  this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.EnterGameMJResp.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.MahjongSceneResp.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongSceneResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongSceneResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongSceneResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongSceneResp.toObject = function(includeInstance, msg) {
  var obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    runcount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    remaincount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    bankerid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    currentid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    inning: jspb.Message.getFieldWithDefault(msg, 6, ""),
    hucard: jspb.Message.getFieldWithDefault(msg, 7, 0),
    quanfeng: jspb.Message.getFieldWithDefault(msg, 8, 0),
    startpos: jspb.Message.getFieldWithDefault(msg, 9, 0),
    allplayersList: jspb.Message.toObjectList(msg.getAllplayersList(),
    proto.pb.MahjongPlayer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongSceneResp}
 */
proto.pb.MahjongSceneResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongSceneResp;
  return proto.pb.MahjongSceneResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongSceneResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongSceneResp}
 */
proto.pb.MahjongSceneResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRuncount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRemaincount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBankerid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setInning(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHucard(value);
      break;
    case 8:
      var value = /** @type {!proto.pb.Direct} */ (reader.readEnum());
      msg.setQuanfeng(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartpos(value);
      break;
    case 10:
      var value = new proto.pb.MahjongPlayer;
      reader.readMessage(value,proto.pb.MahjongPlayer.deserializeBinaryFromReader);
      msg.addAllplayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongSceneResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongSceneResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongSceneResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongSceneResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRuncount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRemaincount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getBankerid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCurrentid();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getInning();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getHucard();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getQuanfeng();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getStartpos();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getAllplayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.pb.MahjongPlayer.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 timeStamp = 1;
 * @return {number}
 */
proto.pb.MahjongSceneResp.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.MahjongSceneResp.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 runCount = 2;
 * @return {number}
 */
proto.pb.MahjongSceneResp.prototype.getRuncount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.MahjongSceneResp.prototype.setRuncount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 remainCount = 3;
 * @return {number}
 */
proto.pb.MahjongSceneResp.prototype.getRemaincount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.MahjongSceneResp.prototype.setRemaincount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 bankerID = 4;
 * @return {number}
 */
proto.pb.MahjongSceneResp.prototype.getBankerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.MahjongSceneResp.prototype.setBankerid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 currentID = 5;
 * @return {number}
 */
proto.pb.MahjongSceneResp.prototype.getCurrentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb.MahjongSceneResp.prototype.setCurrentid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string inning = 6;
 * @return {string}
 */
proto.pb.MahjongSceneResp.prototype.getInning = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.pb.MahjongSceneResp.prototype.setInning = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 huCard = 7;
 * @return {number}
 */
proto.pb.MahjongSceneResp.prototype.getHucard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.pb.MahjongSceneResp.prototype.setHucard = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional Direct quanFeng = 8;
 * @return {!proto.pb.Direct}
 */
proto.pb.MahjongSceneResp.prototype.getQuanfeng = function() {
  return /** @type {!proto.pb.Direct} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.pb.Direct} value */
proto.pb.MahjongSceneResp.prototype.setQuanfeng = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional int32 startPos = 9;
 * @return {number}
 */
proto.pb.MahjongSceneResp.prototype.getStartpos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.pb.MahjongSceneResp.prototype.setStartpos = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * repeated MahjongPlayer allPlayers = 10;
 * @return {!Array<!proto.pb.MahjongPlayer>}
 */
proto.pb.MahjongSceneResp.prototype.getAllplayersList = function() {
  return /** @type{!Array<!proto.pb.MahjongPlayer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.MahjongPlayer, 10));
};


/** @param {!Array<!proto.pb.MahjongPlayer>} value */
proto.pb.MahjongSceneResp.prototype.setAllplayersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.pb.MahjongPlayer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.MahjongPlayer}
 */
proto.pb.MahjongSceneResp.prototype.addAllplayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.pb.MahjongPlayer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.MahjongSceneResp.prototype.clearAllplayersList = function() {
  this.setAllplayersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongStateFreeResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongStateFreeResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongStateFreeResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStateFreeResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && common_baseinfo_pb.TimeInfo.toObject(includeInstance, f),
    inning: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongStateFreeResp}
 */
proto.pb.MahjongStateFreeResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongStateFreeResp;
  return proto.pb.MahjongStateFreeResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongStateFreeResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongStateFreeResp}
 */
proto.pb.MahjongStateFreeResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_baseinfo_pb.TimeInfo;
      reader.readMessage(value,common_baseinfo_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInning(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongStateFreeResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongStateFreeResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongStateFreeResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStateFreeResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_baseinfo_pb.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getInning();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.MahjongStateFreeResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, common_baseinfo_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.MahjongStateFreeResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.MahjongStateFreeResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.MahjongStateFreeResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string inning = 2;
 * @return {string}
 */
proto.pb.MahjongStateFreeResp.prototype.getInning = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.MahjongStateFreeResp.prototype.setInning = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongStateDirectResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongStateDirectResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongStateDirectResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStateDirectResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && common_baseinfo_pb.TimeInfo.toObject(includeInstance, f),
    mydirect: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongStateDirectResp}
 */
proto.pb.MahjongStateDirectResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongStateDirectResp;
  return proto.pb.MahjongStateDirectResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongStateDirectResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongStateDirectResp}
 */
proto.pb.MahjongStateDirectResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_baseinfo_pb.TimeInfo;
      reader.readMessage(value,common_baseinfo_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    case 2:
      var value = /** @type {!proto.pb.Direct} */ (reader.readEnum());
      msg.setMydirect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongStateDirectResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongStateDirectResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongStateDirectResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStateDirectResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_baseinfo_pb.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getMydirect();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.MahjongStateDirectResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, common_baseinfo_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.MahjongStateDirectResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.MahjongStateDirectResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.MahjongStateDirectResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Direct myDirect = 2;
 * @return {!proto.pb.Direct}
 */
proto.pb.MahjongStateDirectResp.prototype.getMydirect = function() {
  return /** @type {!proto.pb.Direct} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.pb.Direct} value */
proto.pb.MahjongStateDirectResp.prototype.setMydirect = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongStateDecideResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongStateDecideResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongStateDecideResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStateDecideResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && common_baseinfo_pb.TimeInfo.toObject(includeInstance, f),
    bankerid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    quanfeng: jspb.Message.getFieldWithDefault(msg, 3, 0),
    menfeng: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongStateDecideResp}
 */
proto.pb.MahjongStateDecideResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongStateDecideResp;
  return proto.pb.MahjongStateDecideResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongStateDecideResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongStateDecideResp}
 */
proto.pb.MahjongStateDecideResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_baseinfo_pb.TimeInfo;
      reader.readMessage(value,common_baseinfo_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBankerid(value);
      break;
    case 3:
      var value = /** @type {!proto.pb.Direct} */ (reader.readEnum());
      msg.setQuanfeng(value);
      break;
    case 4:
      var value = /** @type {!proto.pb.Direct} */ (reader.readEnum());
      msg.setMenfeng(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongStateDecideResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongStateDecideResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongStateDecideResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStateDecideResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_baseinfo_pb.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getBankerid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getQuanfeng();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMenfeng();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.MahjongStateDecideResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, common_baseinfo_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.MahjongStateDecideResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.MahjongStateDecideResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.MahjongStateDecideResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 bankerID = 2;
 * @return {number}
 */
proto.pb.MahjongStateDecideResp.prototype.getBankerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.MahjongStateDecideResp.prototype.setBankerid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Direct quanFeng = 3;
 * @return {!proto.pb.Direct}
 */
proto.pb.MahjongStateDecideResp.prototype.getQuanfeng = function() {
  return /** @type {!proto.pb.Direct} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.pb.Direct} value */
proto.pb.MahjongStateDecideResp.prototype.setQuanfeng = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Direct menFeng = 4;
 * @return {!proto.pb.Direct}
 */
proto.pb.MahjongStateDecideResp.prototype.getMenfeng = function() {
  return /** @type {!proto.pb.Direct} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.pb.Direct} value */
proto.pb.MahjongStateDecideResp.prototype.setMenfeng = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongStateRollDiceResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongStateRollDiceResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongStateRollDiceResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStateRollDiceResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && common_baseinfo_pb.TimeInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongStateRollDiceResp}
 */
proto.pb.MahjongStateRollDiceResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongStateRollDiceResp;
  return proto.pb.MahjongStateRollDiceResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongStateRollDiceResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongStateRollDiceResp}
 */
proto.pb.MahjongStateRollDiceResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_baseinfo_pb.TimeInfo;
      reader.readMessage(value,common_baseinfo_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongStateRollDiceResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongStateRollDiceResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongStateRollDiceResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStateRollDiceResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_baseinfo_pb.TimeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.MahjongStateRollDiceResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, common_baseinfo_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.MahjongStateRollDiceResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.MahjongStateRollDiceResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.MahjongStateRollDiceResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongStateStartResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongStateStartResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongStateStartResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStateStartResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && common_baseinfo_pb.TimeInfo.toObject(includeInstance, f),
    startpos: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongStateStartResp}
 */
proto.pb.MahjongStateStartResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongStateStartResp;
  return proto.pb.MahjongStateStartResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongStateStartResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongStateStartResp}
 */
proto.pb.MahjongStateStartResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_baseinfo_pb.TimeInfo;
      reader.readMessage(value,common_baseinfo_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartpos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongStateStartResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongStateStartResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongStateStartResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStateStartResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_baseinfo_pb.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getStartpos();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.MahjongStateStartResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, common_baseinfo_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.MahjongStateStartResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.MahjongStateStartResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.MahjongStateStartResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 startPos = 2;
 * @return {number}
 */
proto.pb.MahjongStateStartResp.prototype.getStartpos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.MahjongStateStartResp.prototype.setStartpos = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongStatePlayingResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongStatePlayingResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongStatePlayingResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStatePlayingResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && common_baseinfo_pb.TimeInfo.toObject(includeInstance, f),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    card: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongStatePlayingResp}
 */
proto.pb.MahjongStatePlayingResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongStatePlayingResp;
  return proto.pb.MahjongStatePlayingResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongStatePlayingResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongStatePlayingResp}
 */
proto.pb.MahjongStatePlayingResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_baseinfo_pb.TimeInfo;
      reader.readMessage(value,common_baseinfo_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongStatePlayingResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongStatePlayingResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongStatePlayingResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStatePlayingResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_baseinfo_pb.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCard();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.MahjongStatePlayingResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, common_baseinfo_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.MahjongStatePlayingResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.MahjongStatePlayingResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.MahjongStatePlayingResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 userID = 2;
 * @return {number}
 */
proto.pb.MahjongStatePlayingResp.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.MahjongStatePlayingResp.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 card = 3;
 * @return {number}
 */
proto.pb.MahjongStatePlayingResp.prototype.getCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.MahjongStatePlayingResp.prototype.setCard = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongStateWaitOperateResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongStateWaitOperateResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongStateWaitOperateResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStateWaitOperateResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && common_baseinfo_pb.TimeInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongStateWaitOperateResp}
 */
proto.pb.MahjongStateWaitOperateResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongStateWaitOperateResp;
  return proto.pb.MahjongStateWaitOperateResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongStateWaitOperateResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongStateWaitOperateResp}
 */
proto.pb.MahjongStateWaitOperateResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_baseinfo_pb.TimeInfo;
      reader.readMessage(value,common_baseinfo_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongStateWaitOperateResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongStateWaitOperateResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongStateWaitOperateResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStateWaitOperateResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_baseinfo_pb.TimeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.MahjongStateWaitOperateResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, common_baseinfo_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.MahjongStateWaitOperateResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.MahjongStateWaitOperateResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.MahjongStateWaitOperateResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.MahjongStateOpenResp.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongStateOpenResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongStateOpenResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongStateOpenResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStateOpenResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && common_baseinfo_pb.TimeInfo.toObject(includeInstance, f),
    isflow: jspb.Message.getFieldWithDefault(msg, 2, false),
    hucard: jspb.Message.getFieldWithDefault(msg, 3, 0),
    winnerid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fans: msg.getFans_asB64(),
    fancount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    allplayersList: jspb.Message.toObjectList(msg.getAllplayersList(),
    proto.pb.MahjongPlayer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongStateOpenResp}
 */
proto.pb.MahjongStateOpenResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongStateOpenResp;
  return proto.pb.MahjongStateOpenResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongStateOpenResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongStateOpenResp}
 */
proto.pb.MahjongStateOpenResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_baseinfo_pb.TimeInfo;
      reader.readMessage(value,common_baseinfo_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsflow(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHucard(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWinnerid(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFans(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFancount(value);
      break;
    case 7:
      var value = new proto.pb.MahjongPlayer;
      reader.readMessage(value,proto.pb.MahjongPlayer.deserializeBinaryFromReader);
      msg.addAllplayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongStateOpenResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongStateOpenResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongStateOpenResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStateOpenResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_baseinfo_pb.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getIsflow();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getHucard();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getWinnerid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getFans_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getFancount();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getAllplayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.pb.MahjongPlayer.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.MahjongStateOpenResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, common_baseinfo_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.MahjongStateOpenResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.MahjongStateOpenResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.MahjongStateOpenResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool isFlow = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.MahjongStateOpenResp.prototype.getIsflow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.pb.MahjongStateOpenResp.prototype.setIsflow = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 huCard = 3;
 * @return {number}
 */
proto.pb.MahjongStateOpenResp.prototype.getHucard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.MahjongStateOpenResp.prototype.setHucard = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 winnerID = 4;
 * @return {number}
 */
proto.pb.MahjongStateOpenResp.prototype.getWinnerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.MahjongStateOpenResp.prototype.setWinnerid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes fans = 5;
 * @return {!(string|Uint8Array)}
 */
proto.pb.MahjongStateOpenResp.prototype.getFans = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes fans = 5;
 * This is a type-conversion wrapper around `getFans()`
 * @return {string}
 */
proto.pb.MahjongStateOpenResp.prototype.getFans_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFans()));
};


/**
 * optional bytes fans = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFans()`
 * @return {!Uint8Array}
 */
proto.pb.MahjongStateOpenResp.prototype.getFans_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFans()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.MahjongStateOpenResp.prototype.setFans = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional int32 fanCount = 6;
 * @return {number}
 */
proto.pb.MahjongStateOpenResp.prototype.getFancount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.pb.MahjongStateOpenResp.prototype.setFancount = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated MahjongPlayer allPlayers = 7;
 * @return {!Array<!proto.pb.MahjongPlayer>}
 */
proto.pb.MahjongStateOpenResp.prototype.getAllplayersList = function() {
  return /** @type{!Array<!proto.pb.MahjongPlayer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.MahjongPlayer, 7));
};


/** @param {!Array<!proto.pb.MahjongPlayer>} value */
proto.pb.MahjongStateOpenResp.prototype.setAllplayersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.pb.MahjongPlayer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.MahjongPlayer}
 */
proto.pb.MahjongStateOpenResp.prototype.addAllplayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.pb.MahjongPlayer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.MahjongStateOpenResp.prototype.clearAllplayersList = function() {
  this.setAllplayersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongStateOverResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongStateOverResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongStateOverResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStateOverResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && common_baseinfo_pb.TimeInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongStateOverResp}
 */
proto.pb.MahjongStateOverResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongStateOverResp;
  return proto.pb.MahjongStateOverResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongStateOverResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongStateOverResp}
 */
proto.pb.MahjongStateOverResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_baseinfo_pb.TimeInfo;
      reader.readMessage(value,common_baseinfo_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongStateOverResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongStateOverResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongStateOverResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongStateOverResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_baseinfo_pb.TimeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.MahjongStateOverResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, common_baseinfo_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.MahjongStateOverResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.MahjongStateOverResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.MahjongStateOverResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongReadyReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongReadyReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongReadyReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongReadyReq.toObject = function(includeInstance, msg) {
  var obj = {
    isready: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongReadyReq}
 */
proto.pb.MahjongReadyReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongReadyReq;
  return proto.pb.MahjongReadyReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongReadyReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongReadyReq}
 */
proto.pb.MahjongReadyReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsready(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongReadyReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongReadyReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongReadyReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongReadyReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsready();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool isReady = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.MahjongReadyReq.prototype.getIsready = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.pb.MahjongReadyReq.prototype.setIsready = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongReadyResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongReadyResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongReadyResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongReadyResp.toObject = function(includeInstance, msg) {
  var obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isready: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongReadyResp}
 */
proto.pb.MahjongReadyResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongReadyResp;
  return proto.pb.MahjongReadyResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongReadyResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongReadyResp}
 */
proto.pb.MahjongReadyResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsready(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongReadyResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongReadyResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongReadyResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongReadyResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getIsready();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.pb.MahjongReadyResp.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.MahjongReadyResp.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool isReady = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.MahjongReadyResp.prototype.getIsready = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.pb.MahjongReadyResp.prototype.setIsready = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongRollReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongRollReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongRollReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongRollReq.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongRollReq}
 */
proto.pb.MahjongRollReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongRollReq;
  return proto.pb.MahjongRollReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongRollReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongRollReq}
 */
proto.pb.MahjongRollReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongRollReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongRollReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongRollReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongRollReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongRollResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongRollResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongRollResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongRollResp.toObject = function(includeInstance, msg) {
  var obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dice: msg.getDice_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongRollResp}
 */
proto.pb.MahjongRollResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongRollResp;
  return proto.pb.MahjongRollResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongRollResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongRollResp}
 */
proto.pb.MahjongRollResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongRollResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongRollResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongRollResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongRollResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDice_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.pb.MahjongRollResp.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.MahjongRollResp.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes dice = 2;
 * @return {!(string|Uint8Array)}
 */
proto.pb.MahjongRollResp.prototype.getDice = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes dice = 2;
 * This is a type-conversion wrapper around `getDice()`
 * @return {string}
 */
proto.pb.MahjongRollResp.prototype.getDice_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDice()));
};


/**
 * optional bytes dice = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDice()`
 * @return {!Uint8Array}
 */
proto.pb.MahjongRollResp.prototype.getDice_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDice()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.MahjongRollResp.prototype.setDice = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongOutCardReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongOutCardReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongOutCardReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongOutCardReq.toObject = function(includeInstance, msg) {
  var obj = {
    card: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongOutCardReq}
 */
proto.pb.MahjongOutCardReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongOutCardReq;
  return proto.pb.MahjongOutCardReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongOutCardReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongOutCardReq}
 */
proto.pb.MahjongOutCardReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongOutCardReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongOutCardReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongOutCardReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongOutCardReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCard();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 card = 1;
 * @return {number}
 */
proto.pb.MahjongOutCardReq.prototype.getCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.MahjongOutCardReq.prototype.setCard = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongOutCardResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongOutCardResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongOutCardResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongOutCardResp.toObject = function(includeInstance, msg) {
  var obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    card: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongOutCardResp}
 */
proto.pb.MahjongOutCardResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongOutCardResp;
  return proto.pb.MahjongOutCardResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongOutCardResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongOutCardResp}
 */
proto.pb.MahjongOutCardResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongOutCardResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongOutCardResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongOutCardResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongOutCardResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCard();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.pb.MahjongOutCardResp.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.MahjongOutCardResp.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 card = 2;
 * @return {number}
 */
proto.pb.MahjongOutCardResp.prototype.getCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.MahjongOutCardResp.prototype.setCard = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.MahjongOperateReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongOperateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongOperateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongOperateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongOperateReq.toObject = function(includeInstance, msg) {
  var obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cardsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongOperateReq}
 */
proto.pb.MahjongOperateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongOperateReq;
  return proto.pb.MahjongOperateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongOperateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongOperateReq}
 */
proto.pb.MahjongOperateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.MJOperate} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setCardsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongOperateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongOperateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongOperateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongOperateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional MJOperate code = 1;
 * @return {!proto.pb.MJOperate}
 */
proto.pb.MahjongOperateReq.prototype.getCode = function() {
  return /** @type {!proto.pb.MJOperate} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.pb.MJOperate} value */
proto.pb.MahjongOperateReq.prototype.setCode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated int32 cards = 2;
 * @return {!Array<number>}
 */
proto.pb.MahjongOperateReq.prototype.getCardsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.pb.MahjongOperateReq.prototype.setCardsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.MahjongOperateReq.prototype.addCards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.MahjongOperateReq.prototype.clearCardsList = function() {
  this.setCardsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.MahjongOperateResp.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongOperateResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongOperateResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongOperateResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongOperateResp.toObject = function(includeInstance, msg) {
  var obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cardsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongOperateResp}
 */
proto.pb.MahjongOperateResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongOperateResp;
  return proto.pb.MahjongOperateResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongOperateResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongOperateResp}
 */
proto.pb.MahjongOperateResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {!proto.pb.MJOperate} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setCardsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongOperateResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongOperateResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongOperateResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongOperateResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.pb.MahjongOperateResp.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.MahjongOperateResp.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional MJOperate code = 2;
 * @return {!proto.pb.MJOperate}
 */
proto.pb.MahjongOperateResp.prototype.getCode = function() {
  return /** @type {!proto.pb.MJOperate} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.pb.MJOperate} value */
proto.pb.MahjongOperateResp.prototype.setCode = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated int32 cards = 3;
 * @return {!Array<number>}
 */
proto.pb.MahjongOperateResp.prototype.getCardsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.pb.MahjongOperateResp.prototype.setCardsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.MahjongOperateResp.prototype.addCards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.MahjongOperateResp.prototype.clearCardsList = function() {
  this.setCardsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.MahjongDealResp.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongDealResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongDealResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongDealResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongDealResp.toObject = function(includeInstance, msg) {
  var obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    curpos: jspb.Message.getFieldWithDefault(msg, 2, 0),
    handcardsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongDealResp}
 */
proto.pb.MahjongDealResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongDealResp;
  return proto.pb.MahjongDealResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongDealResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongDealResp}
 */
proto.pb.MahjongDealResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurpos(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setHandcardsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongDealResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongDealResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongDealResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongDealResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCurpos();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHandcardsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.pb.MahjongDealResp.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.MahjongDealResp.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 curPos = 2;
 * @return {number}
 */
proto.pb.MahjongDealResp.prototype.getCurpos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.MahjongDealResp.prototype.setCurpos = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated int32 handCards = 3;
 * @return {!Array<number>}
 */
proto.pb.MahjongDealResp.prototype.getHandcardsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.pb.MahjongDealResp.prototype.setHandcardsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.MahjongDealResp.prototype.addHandcards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.MahjongDealResp.prototype.clearHandcardsList = function() {
  this.setHandcardsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.MahjongHintResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MahjongHintResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MahjongHintResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MahjongHintResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongHintResp.toObject = function(includeInstance, msg) {
  var obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hintsList: jspb.Message.toObjectList(msg.getHintsList(),
    proto.pb.MahjongHint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MahjongHintResp}
 */
proto.pb.MahjongHintResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MahjongHintResp;
  return proto.pb.MahjongHintResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MahjongHintResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MahjongHintResp}
 */
proto.pb.MahjongHintResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = new proto.pb.MahjongHint;
      reader.readMessage(value,proto.pb.MahjongHint.deserializeBinaryFromReader);
      msg.addHints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MahjongHintResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MahjongHintResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MahjongHintResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MahjongHintResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getHintsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pb.MahjongHint.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.pb.MahjongHintResp.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.MahjongHintResp.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MahjongHint hints = 2;
 * @return {!Array<!proto.pb.MahjongHint>}
 */
proto.pb.MahjongHintResp.prototype.getHintsList = function() {
  return /** @type{!Array<!proto.pb.MahjongHint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.MahjongHint, 2));
};


/** @param {!Array<!proto.pb.MahjongHint>} value */
proto.pb.MahjongHintResp.prototype.setHintsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pb.MahjongHint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.MahjongHint}
 */
proto.pb.MahjongHintResp.prototype.addHints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pb.MahjongHint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.MahjongHintResp.prototype.clearHintsList = function() {
  this.setHintsList([]);
};


/**
 * @enum {number}
 */
proto.pb.Fan_t = {
  FANINVALID: 0,
  FANDASIXI: 1,
  FANDASANYUAN: 2,
  FANLVYISE: 3,
  FANJIULIANBAODENG: 4,
  FANSIGANG: 5,
  FANLIANQIDUI: 6,
  FANSHISANYAO: 7,
  FANQINGYAOJIU: 8,
  FANXIAOSIXI: 9,
  FANXIAOSANYUAN: 10,
  FANZIYISE: 11,
  FANSIANKE: 12,
  FANYISESHUANGLONGHUI: 13,
  FANYISESITONGSHUN: 14,
  FANYISESIJIEGAO: 15,
  FANYISESIBUGAO: 16,
  FANSANGANG: 17,
  FANHUNYAOJIU: 18,
  FANQIDUI: 19,
  FANQIXINGBUKAO: 20,
  FANQUANSHUANGKE: 21,
  FANQINGYISE: 22,
  FANYISESANTONGSHUN: 23,
  FANYISESANJIEGAO: 24,
  FANQUANDA: 25,
  FANQUANZHONG: 26,
  FANQUANXIAO: 27,
  FANQINGLONG: 28,
  FANSANSESHUANGLONGHUI: 29,
  FANYISESANBUGAO: 30,
  FANQUANDAIWU: 31,
  FANSANTONGKE: 32,
  FANSANANKE: 33,
  FANQUANBUKAO: 34,
  FANZUHELONG: 35,
  FANDAYUWU: 36,
  FANXIAOYUWU: 37,
  FANSANFENGKE: 38,
  FANHUALONG: 39,
  FANTUIBUDAO: 40,
  FANSANSESANTONGSHUN: 41,
  FANSANSESANJIEGAO: 42,
  FANWUFANHU: 43,
  FANMIAOSHOUHUICHUN: 44,
  FANHAIDILAOYUE: 45,
  FANGANGSHANGKAIHUA: 46,
  FANQIANGGANGHU: 47,
  FANPENGPENGHU: 48,
  FANHUNYISE: 49,
  FANSANSESANBUGAO: 50,
  FANWUMENQI: 51,
  FANQUANQIUREN: 52,
  FANSHUANGANGANG: 53,
  FANSHUANGJIANKE: 54,
  FANQUANDAIYAO: 55,
  FANBUQIUREN: 56,
  FANSHUANGMINGGANG: 57,
  FANHUJUEZHANG: 58,
  FANJIANKE: 59,
  FANQUANFENGKE: 60,
  FANMENFENGKE: 61,
  FANMENQIANQING: 62,
  FANPINGHU: 63,
  FANSIGUIYI: 64,
  FANSHUANGTONGKE: 65,
  FANSHUANGANKE: 66,
  FANANGANG: 67,
  FANDUANYAO: 68,
  FANYIBANGAO: 69,
  FANXIXIANGFENG: 70,
  FANLIANLIU: 71,
  FANLAOSHAOFU: 72,
  FANYAOJIUKE: 73,
  FANMINGGANG: 74,
  FANQUEYIMEN: 75,
  FANWUZI: 76,
  FANBIANZHANG: 77,
  FANKANZHANG: 78,
  FANDANDIAOJIANG: 79,
  FANZIMO: 80,
  FANHUAPAI: 81,
  FANMINGANGANG: 82
};

goog.object.extend(exports, proto.pb);
