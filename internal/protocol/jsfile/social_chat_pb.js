/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var baseinfo_pb = require('./baseinfo_pb.js');
goog.object.extend(proto, baseinfo_pb);
goog.exportSymbol('proto.pb.ChatHisReq', null, global);
goog.exportSymbol('proto.pb.ChatHisResp', null, global);
goog.exportSymbol('proto.pb.ChatSgxInviteReq', null, global);
goog.exportSymbol('proto.pb.ChatSgxInviteResp', null, global);
goog.exportSymbol('proto.pb.ChatTextReq', null, global);
goog.exportSymbol('proto.pb.ChatTextResp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChatTextReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ChatTextReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChatTextReq.displayName = 'proto.pb.ChatTextReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChatTextResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ChatTextResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChatTextResp.displayName = 'proto.pb.ChatTextResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChatSgxInviteReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ChatSgxInviteReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChatSgxInviteReq.displayName = 'proto.pb.ChatSgxInviteReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChatSgxInviteResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ChatSgxInviteResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChatSgxInviteResp.displayName = 'proto.pb.ChatSgxInviteResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChatHisReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ChatHisReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChatHisReq.displayName = 'proto.pb.ChatHisReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChatHisResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.ChatHisResp.repeatedFields_, null);
};
goog.inherits(proto.pb.ChatHisResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChatHisResp.displayName = 'proto.pb.ChatHisResp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChatTextReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChatTextReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChatTextReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChatTextReq.toObject = function(includeInstance, msg) {
  var obj = {
    channel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    targetuid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    clubid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cont: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChatTextReq}
 */
proto.pb.ChatTextReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChatTextReq;
  return proto.pb.ChatTextReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChatTextReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChatTextReq}
 */
proto.pb.ChatTextReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTargetuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClubid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCont(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChatTextReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChatTextReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChatTextReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChatTextReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTargetuid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getClubid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCont();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 channel = 1;
 * @return {number}
 */
proto.pb.ChatTextReq.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.ChatTextReq.prototype.setChannel = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 targetUid = 2;
 * @return {number}
 */
proto.pb.ChatTextReq.prototype.getTargetuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.ChatTextReq.prototype.setTargetuid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 clubId = 3;
 * @return {number}
 */
proto.pb.ChatTextReq.prototype.getClubid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.ChatTextReq.prototype.setClubid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string cont = 4;
 * @return {string}
 */
proto.pb.ChatTextReq.prototype.getCont = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.pb.ChatTextReq.prototype.setCont = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChatTextResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChatTextResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChatTextResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChatTextResp.toObject = function(includeInstance, msg) {
  var obj = {
    channel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    senderuid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    targetuid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    clubid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    cont: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChatTextResp}
 */
proto.pb.ChatTextResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChatTextResp;
  return proto.pb.ChatTextResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChatTextResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChatTextResp}
 */
proto.pb.ChatTextResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTargetuid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClubid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCont(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChatTextResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChatTextResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChatTextResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChatTextResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSenderuid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTargetuid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getClubid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCont();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 channel = 1;
 * @return {number}
 */
proto.pb.ChatTextResp.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.ChatTextResp.prototype.setChannel = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 senderUid = 2;
 * @return {number}
 */
proto.pb.ChatTextResp.prototype.getSenderuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.ChatTextResp.prototype.setSenderuid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 targetUid = 3;
 * @return {number}
 */
proto.pb.ChatTextResp.prototype.getTargetuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.ChatTextResp.prototype.setTargetuid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 clubId = 4;
 * @return {number}
 */
proto.pb.ChatTextResp.prototype.getClubid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.ChatTextResp.prototype.setClubid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 timeStamp = 5;
 * @return {number}
 */
proto.pb.ChatTextResp.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb.ChatTextResp.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string cont = 6;
 * @return {string}
 */
proto.pb.ChatTextResp.prototype.getCont = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.pb.ChatTextResp.prototype.setCont = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChatSgxInviteReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChatSgxInviteReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChatSgxInviteReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChatSgxInviteReq.toObject = function(includeInstance, msg) {
  var obj = {
    senderuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    targetuid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gameeid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cont: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChatSgxInviteReq}
 */
proto.pb.ChatSgxInviteReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChatSgxInviteReq;
  return proto.pb.ChatSgxInviteReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChatSgxInviteReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChatSgxInviteReq}
 */
proto.pb.ChatSgxInviteReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTargetuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameeid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCont(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChatSgxInviteReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChatSgxInviteReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChatSgxInviteReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChatSgxInviteReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderuid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTargetuid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getGameeid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCont();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 senderUid = 1;
 * @return {number}
 */
proto.pb.ChatSgxInviteReq.prototype.getSenderuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.ChatSgxInviteReq.prototype.setSenderuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 targetUid = 2;
 * @return {number}
 */
proto.pb.ChatSgxInviteReq.prototype.getTargetuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.ChatSgxInviteReq.prototype.setTargetuid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 gameEid = 3;
 * @return {number}
 */
proto.pb.ChatSgxInviteReq.prototype.getGameeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.ChatSgxInviteReq.prototype.setGameeid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string cont = 4;
 * @return {string}
 */
proto.pb.ChatSgxInviteReq.prototype.getCont = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.pb.ChatSgxInviteReq.prototype.setCont = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChatSgxInviteResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChatSgxInviteResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChatSgxInviteResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChatSgxInviteResp.toObject = function(includeInstance, msg) {
  var obj = {
    senderuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    targetuid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gameeid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cont: jspb.Message.getFieldWithDefault(msg, 4, ""),
    senderdata: (f = msg.getSenderdata()) && baseinfo_pb.UserBaseInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChatSgxInviteResp}
 */
proto.pb.ChatSgxInviteResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChatSgxInviteResp;
  return proto.pb.ChatSgxInviteResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChatSgxInviteResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChatSgxInviteResp}
 */
proto.pb.ChatSgxInviteResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTargetuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameeid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCont(value);
      break;
    case 5:
      var value = new baseinfo_pb.UserBaseInfo;
      reader.readMessage(value,baseinfo_pb.UserBaseInfo.deserializeBinaryFromReader);
      msg.setSenderdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChatSgxInviteResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChatSgxInviteResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChatSgxInviteResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChatSgxInviteResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderuid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTargetuid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getGameeid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCont();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSenderdata();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      baseinfo_pb.UserBaseInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 senderUid = 1;
 * @return {number}
 */
proto.pb.ChatSgxInviteResp.prototype.getSenderuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.ChatSgxInviteResp.prototype.setSenderuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 targetUid = 2;
 * @return {number}
 */
proto.pb.ChatSgxInviteResp.prototype.getTargetuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.ChatSgxInviteResp.prototype.setTargetuid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 gameEid = 3;
 * @return {number}
 */
proto.pb.ChatSgxInviteResp.prototype.getGameeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.ChatSgxInviteResp.prototype.setGameeid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string cont = 4;
 * @return {string}
 */
proto.pb.ChatSgxInviteResp.prototype.getCont = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.pb.ChatSgxInviteResp.prototype.setCont = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional UserBaseInfo senderData = 5;
 * @return {?proto.pb.UserBaseInfo}
 */
proto.pb.ChatSgxInviteResp.prototype.getSenderdata = function() {
  return /** @type{?proto.pb.UserBaseInfo} */ (
    jspb.Message.getWrapperField(this, baseinfo_pb.UserBaseInfo, 5));
};


/** @param {?proto.pb.UserBaseInfo|undefined} value */
proto.pb.ChatSgxInviteResp.prototype.setSenderdata = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChatSgxInviteResp.prototype.clearSenderdata = function() {
  this.setSenderdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChatSgxInviteResp.prototype.hasSenderdata = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChatHisReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChatHisReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChatHisReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChatHisReq.toObject = function(includeInstance, msg) {
  var obj = {
    channel: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChatHisReq}
 */
proto.pb.ChatHisReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChatHisReq;
  return proto.pb.ChatHisReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChatHisReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChatHisReq}
 */
proto.pb.ChatHisReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChatHisReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChatHisReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChatHisReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChatHisReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 channel = 1;
 * @return {number}
 */
proto.pb.ChatHisReq.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.ChatHisReq.prototype.setChannel = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.ChatHisResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChatHisResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChatHisResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChatHisResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChatHisResp.toObject = function(includeInstance, msg) {
  var obj = {
    channel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    datasList: jspb.Message.toObjectList(msg.getDatasList(),
    proto.pb.ChatTextResp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChatHisResp}
 */
proto.pb.ChatHisResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChatHisResp;
  return proto.pb.ChatHisResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChatHisResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChatHisResp}
 */
proto.pb.ChatHisResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannel(value);
      break;
    case 2:
      var value = new proto.pb.ChatTextResp;
      reader.readMessage(value,proto.pb.ChatTextResp.deserializeBinaryFromReader);
      msg.addDatas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChatHisResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChatHisResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChatHisResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChatHisResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDatasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pb.ChatTextResp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 channel = 1;
 * @return {number}
 */
proto.pb.ChatHisResp.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.ChatHisResp.prototype.setChannel = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated ChatTextResp datas = 2;
 * @return {!Array<!proto.pb.ChatTextResp>}
 */
proto.pb.ChatHisResp.prototype.getDatasList = function() {
  return /** @type{!Array<!proto.pb.ChatTextResp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.ChatTextResp, 2));
};


/** @param {!Array<!proto.pb.ChatTextResp>} value */
proto.pb.ChatHisResp.prototype.setDatasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pb.ChatTextResp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.ChatTextResp}
 */
proto.pb.ChatHisResp.prototype.addDatas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pb.ChatTextResp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.ChatHisResp.prototype.clearDatasList = function() {
  this.setDatasList([]);
};


goog.object.extend(exports, proto.pb);
