/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var game_pb = require('./game_pb.js');
goog.object.extend(proto, game_pb);
var player_pb = require('./player_pb.js');
goog.object.extend(proto, player_pb);
goog.exportSymbol('proto.pb.BoardInfo', null, global);
goog.exportSymbol('proto.pb.Grid', null, global);
goog.exportSymbol('proto.pb.Piece', null, global);
goog.exportSymbol('proto.pb.SanguoxiaoChooseReq', null, global);
goog.exportSymbol('proto.pb.SanguoxiaoChooseResp', null, global);
goog.exportSymbol('proto.pb.SanguoxiaoPlayer', null, global);
goog.exportSymbol('proto.pb.SanguoxiaoSceneResp', null, global);
goog.exportSymbol('proto.pb.SanguoxiaoStateChooseResp', null, global);
goog.exportSymbol('proto.pb.SanguoxiaoStateEraseResp', null, global);
goog.exportSymbol('proto.pb.SanguoxiaoStateOverResp', null, global);
goog.exportSymbol('proto.pb.SanguoxiaoStatePlayingResp', null, global);
goog.exportSymbol('proto.pb.SanguoxiaoSwapReq', null, global);
goog.exportSymbol('proto.pb.SanguoxiaoSwapResp', null, global);
goog.exportSymbol('proto.pb.WujiangInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.WujiangInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.WujiangInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.WujiangInfo.displayName = 'proto.pb.WujiangInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Grid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Grid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Grid.displayName = 'proto.pb.Grid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.BoardInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.BoardInfo.repeatedFields_, null);
};
goog.inherits(proto.pb.BoardInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.BoardInfo.displayName = 'proto.pb.BoardInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.SanguoxiaoPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.SanguoxiaoPlayer.repeatedFields_, null);
};
goog.inherits(proto.pb.SanguoxiaoPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.SanguoxiaoPlayer.displayName = 'proto.pb.SanguoxiaoPlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.SanguoxiaoSceneResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.SanguoxiaoSceneResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.SanguoxiaoSceneResp.displayName = 'proto.pb.SanguoxiaoSceneResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.SanguoxiaoStateChooseResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.SanguoxiaoStateChooseResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.SanguoxiaoStateChooseResp.displayName = 'proto.pb.SanguoxiaoStateChooseResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.SanguoxiaoStatePlayingResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.SanguoxiaoStatePlayingResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.SanguoxiaoStatePlayingResp.displayName = 'proto.pb.SanguoxiaoStatePlayingResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.SanguoxiaoStateEraseResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.SanguoxiaoStateEraseResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.SanguoxiaoStateEraseResp.displayName = 'proto.pb.SanguoxiaoStateEraseResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.SanguoxiaoStateOverResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.SanguoxiaoStateOverResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.SanguoxiaoStateOverResp.displayName = 'proto.pb.SanguoxiaoStateOverResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.SanguoxiaoChooseReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.SanguoxiaoChooseReq.repeatedFields_, null);
};
goog.inherits(proto.pb.SanguoxiaoChooseReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.SanguoxiaoChooseReq.displayName = 'proto.pb.SanguoxiaoChooseReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.SanguoxiaoChooseResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.SanguoxiaoChooseResp.repeatedFields_, null);
};
goog.inherits(proto.pb.SanguoxiaoChooseResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.SanguoxiaoChooseResp.displayName = 'proto.pb.SanguoxiaoChooseResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.SanguoxiaoSwapReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.SanguoxiaoSwapReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.SanguoxiaoSwapReq.displayName = 'proto.pb.SanguoxiaoSwapReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.SanguoxiaoSwapResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.SanguoxiaoSwapResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.SanguoxiaoSwapResp.displayName = 'proto.pb.SanguoxiaoSwapResp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.WujiangInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.WujiangInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.WujiangInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.WujiangInfo.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    healthpoint: jspb.Message.getFieldWithDefault(msg, 2, 0),
    healthpointlimit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    damagepoint: jspb.Message.getFieldWithDefault(msg, 4, 0),
    armorpoint: jspb.Message.getFieldWithDefault(msg, 5, 0),
    name: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.WujiangInfo}
 */
proto.pb.WujiangInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.WujiangInfo;
  return proto.pb.WujiangInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.WujiangInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.WujiangInfo}
 */
proto.pb.WujiangInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHealthpoint(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHealthpointlimit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDamagepoint(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setArmorpoint(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.WujiangInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.WujiangInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.WujiangInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.WujiangInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHealthpoint();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getHealthpointlimit();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDamagepoint();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getArmorpoint();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 iD = 1;
 * @return {number}
 */
proto.pb.WujiangInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.WujiangInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 healthPoint = 2;
 * @return {number}
 */
proto.pb.WujiangInfo.prototype.getHealthpoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.WujiangInfo.prototype.setHealthpoint = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 healthPointLimit = 3;
 * @return {number}
 */
proto.pb.WujiangInfo.prototype.getHealthpointlimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.WujiangInfo.prototype.setHealthpointlimit = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 damagePoint = 4;
 * @return {number}
 */
proto.pb.WujiangInfo.prototype.getDamagepoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.WujiangInfo.prototype.setDamagepoint = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 armorPoint = 5;
 * @return {number}
 */
proto.pb.WujiangInfo.prototype.getArmorpoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb.WujiangInfo.prototype.setArmorpoint = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.pb.WujiangInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.pb.WujiangInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Grid.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Grid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Grid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Grid.toObject = function(includeInstance, msg) {
  var obj = {
    row: jspb.Message.getFieldWithDefault(msg, 1, 0),
    col: jspb.Message.getFieldWithDefault(msg, 2, 0),
    core: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Grid}
 */
proto.pb.Grid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Grid;
  return proto.pb.Grid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Grid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Grid}
 */
proto.pb.Grid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCol(value);
      break;
    case 3:
      var value = /** @type {!proto.pb.Piece} */ (reader.readEnum());
      msg.setCore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Grid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Grid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Grid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Grid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRow();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCol();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCore();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 row = 1;
 * @return {number}
 */
proto.pb.Grid.prototype.getRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.Grid.prototype.setRow = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 col = 2;
 * @return {number}
 */
proto.pb.Grid.prototype.getCol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.Grid.prototype.setCol = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Piece core = 3;
 * @return {!proto.pb.Piece}
 */
proto.pb.Grid.prototype.getCore = function() {
  return /** @type {!proto.pb.Piece} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.pb.Piece} value */
proto.pb.Grid.prototype.setCore = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.BoardInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.BoardInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.BoardInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.BoardInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BoardInfo.toObject = function(includeInstance, msg) {
  var obj = {
    cellsList: jspb.Message.toObjectList(msg.getCellsList(),
    proto.pb.Grid.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.BoardInfo}
 */
proto.pb.BoardInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.BoardInfo;
  return proto.pb.BoardInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.BoardInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.BoardInfo}
 */
proto.pb.BoardInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Grid;
      reader.readMessage(value,proto.pb.Grid.deserializeBinaryFromReader);
      msg.addCells(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.BoardInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.BoardInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.BoardInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BoardInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCellsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.Grid.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Grid cells = 1;
 * @return {!Array<!proto.pb.Grid>}
 */
proto.pb.BoardInfo.prototype.getCellsList = function() {
  return /** @type{!Array<!proto.pb.Grid>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Grid, 1));
};


/** @param {!Array<!proto.pb.Grid>} value */
proto.pb.BoardInfo.prototype.setCellsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.Grid=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Grid}
 */
proto.pb.BoardInfo.prototype.addCells = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.Grid, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.BoardInfo.prototype.clearCellsList = function() {
  this.setCellsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.SanguoxiaoPlayer.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.SanguoxiaoPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.SanguoxiaoPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.SanguoxiaoPlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoPlayer.toObject = function(includeInstance, msg) {
  var obj = {
    myinfo: (f = msg.getMyinfo()) && player_pb.PlayerInfo.toObject(includeInstance, f),
    allList: jspb.Message.toObjectList(msg.getAllList(),
    proto.pb.WujiangInfo.toObject, includeInstance),
    teamList: jspb.Message.toObjectList(msg.getTeamList(),
    proto.pb.WujiangInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.SanguoxiaoPlayer}
 */
proto.pb.SanguoxiaoPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.SanguoxiaoPlayer;
  return proto.pb.SanguoxiaoPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.SanguoxiaoPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.SanguoxiaoPlayer}
 */
proto.pb.SanguoxiaoPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new player_pb.PlayerInfo;
      reader.readMessage(value,player_pb.PlayerInfo.deserializeBinaryFromReader);
      msg.setMyinfo(value);
      break;
    case 2:
      var value = new proto.pb.WujiangInfo;
      reader.readMessage(value,proto.pb.WujiangInfo.deserializeBinaryFromReader);
      msg.addAll(value);
      break;
    case 3:
      var value = new proto.pb.WujiangInfo;
      reader.readMessage(value,proto.pb.WujiangInfo.deserializeBinaryFromReader);
      msg.addTeam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.SanguoxiaoPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.SanguoxiaoPlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.SanguoxiaoPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoPlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      player_pb.PlayerInfo.serializeBinaryToWriter
    );
  }
  f = message.getAllList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pb.WujiangInfo.serializeBinaryToWriter
    );
  }
  f = message.getTeamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.pb.WujiangInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional PlayerInfo myInfo = 1;
 * @return {?proto.pb.PlayerInfo}
 */
proto.pb.SanguoxiaoPlayer.prototype.getMyinfo = function() {
  return /** @type{?proto.pb.PlayerInfo} */ (
    jspb.Message.getWrapperField(this, player_pb.PlayerInfo, 1));
};


/** @param {?proto.pb.PlayerInfo|undefined} value */
proto.pb.SanguoxiaoPlayer.prototype.setMyinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.SanguoxiaoPlayer.prototype.clearMyinfo = function() {
  this.setMyinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.SanguoxiaoPlayer.prototype.hasMyinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated WujiangInfo all = 2;
 * @return {!Array<!proto.pb.WujiangInfo>}
 */
proto.pb.SanguoxiaoPlayer.prototype.getAllList = function() {
  return /** @type{!Array<!proto.pb.WujiangInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.WujiangInfo, 2));
};


/** @param {!Array<!proto.pb.WujiangInfo>} value */
proto.pb.SanguoxiaoPlayer.prototype.setAllList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pb.WujiangInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.WujiangInfo}
 */
proto.pb.SanguoxiaoPlayer.prototype.addAll = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pb.WujiangInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.SanguoxiaoPlayer.prototype.clearAllList = function() {
  this.setAllList([]);
};


/**
 * repeated WujiangInfo team = 3;
 * @return {!Array<!proto.pb.WujiangInfo>}
 */
proto.pb.SanguoxiaoPlayer.prototype.getTeamList = function() {
  return /** @type{!Array<!proto.pb.WujiangInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.WujiangInfo, 3));
};


/** @param {!Array<!proto.pb.WujiangInfo>} value */
proto.pb.SanguoxiaoPlayer.prototype.setTeamList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pb.WujiangInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.WujiangInfo}
 */
proto.pb.SanguoxiaoPlayer.prototype.addTeam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pb.WujiangInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.SanguoxiaoPlayer.prototype.clearTeamList = function() {
  this.setTeamList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.SanguoxiaoSceneResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.SanguoxiaoSceneResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.SanguoxiaoSceneResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoSceneResp.toObject = function(includeInstance, msg) {
  var obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    inning: jspb.Message.getFieldWithDefault(msg, 2, ""),
    board: (f = msg.getBoard()) && proto.pb.BoardInfo.toObject(includeInstance, f),
    allplayers: (f = msg.getAllplayers()) && proto.pb.SanguoxiaoPlayer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.SanguoxiaoSceneResp}
 */
proto.pb.SanguoxiaoSceneResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.SanguoxiaoSceneResp;
  return proto.pb.SanguoxiaoSceneResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.SanguoxiaoSceneResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.SanguoxiaoSceneResp}
 */
proto.pb.SanguoxiaoSceneResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInning(value);
      break;
    case 3:
      var value = new proto.pb.BoardInfo;
      reader.readMessage(value,proto.pb.BoardInfo.deserializeBinaryFromReader);
      msg.setBoard(value);
      break;
    case 4:
      var value = new proto.pb.SanguoxiaoPlayer;
      reader.readMessage(value,proto.pb.SanguoxiaoPlayer.deserializeBinaryFromReader);
      msg.setAllplayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.SanguoxiaoSceneResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.SanguoxiaoSceneResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.SanguoxiaoSceneResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoSceneResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getInning();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBoard();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.BoardInfo.serializeBinaryToWriter
    );
  }
  f = message.getAllplayers();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pb.SanguoxiaoPlayer.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 timeStamp = 1;
 * @return {number}
 */
proto.pb.SanguoxiaoSceneResp.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.SanguoxiaoSceneResp.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string inning = 2;
 * @return {string}
 */
proto.pb.SanguoxiaoSceneResp.prototype.getInning = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.SanguoxiaoSceneResp.prototype.setInning = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional BoardInfo board = 3;
 * @return {?proto.pb.BoardInfo}
 */
proto.pb.SanguoxiaoSceneResp.prototype.getBoard = function() {
  return /** @type{?proto.pb.BoardInfo} */ (
    jspb.Message.getWrapperField(this, proto.pb.BoardInfo, 3));
};


/** @param {?proto.pb.BoardInfo|undefined} value */
proto.pb.SanguoxiaoSceneResp.prototype.setBoard = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.SanguoxiaoSceneResp.prototype.clearBoard = function() {
  this.setBoard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.SanguoxiaoSceneResp.prototype.hasBoard = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SanguoxiaoPlayer allPlayers = 4;
 * @return {?proto.pb.SanguoxiaoPlayer}
 */
proto.pb.SanguoxiaoSceneResp.prototype.getAllplayers = function() {
  return /** @type{?proto.pb.SanguoxiaoPlayer} */ (
    jspb.Message.getWrapperField(this, proto.pb.SanguoxiaoPlayer, 4));
};


/** @param {?proto.pb.SanguoxiaoPlayer|undefined} value */
proto.pb.SanguoxiaoSceneResp.prototype.setAllplayers = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.SanguoxiaoSceneResp.prototype.clearAllplayers = function() {
  this.setAllplayers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.SanguoxiaoSceneResp.prototype.hasAllplayers = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.SanguoxiaoStateChooseResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.SanguoxiaoStateChooseResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.SanguoxiaoStateChooseResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoStateChooseResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && game_pb.TimeInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.SanguoxiaoStateChooseResp}
 */
proto.pb.SanguoxiaoStateChooseResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.SanguoxiaoStateChooseResp;
  return proto.pb.SanguoxiaoStateChooseResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.SanguoxiaoStateChooseResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.SanguoxiaoStateChooseResp}
 */
proto.pb.SanguoxiaoStateChooseResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new game_pb.TimeInfo;
      reader.readMessage(value,game_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.SanguoxiaoStateChooseResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.SanguoxiaoStateChooseResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.SanguoxiaoStateChooseResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoStateChooseResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      game_pb.TimeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.SanguoxiaoStateChooseResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, game_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.SanguoxiaoStateChooseResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.SanguoxiaoStateChooseResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.SanguoxiaoStateChooseResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.SanguoxiaoStatePlayingResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.SanguoxiaoStatePlayingResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.SanguoxiaoStatePlayingResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoStatePlayingResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && game_pb.TimeInfo.toObject(includeInstance, f),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.SanguoxiaoStatePlayingResp}
 */
proto.pb.SanguoxiaoStatePlayingResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.SanguoxiaoStatePlayingResp;
  return proto.pb.SanguoxiaoStatePlayingResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.SanguoxiaoStatePlayingResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.SanguoxiaoStatePlayingResp}
 */
proto.pb.SanguoxiaoStatePlayingResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new game_pb.TimeInfo;
      reader.readMessage(value,game_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.SanguoxiaoStatePlayingResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.SanguoxiaoStatePlayingResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.SanguoxiaoStatePlayingResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoStatePlayingResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      game_pb.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.SanguoxiaoStatePlayingResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, game_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.SanguoxiaoStatePlayingResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.SanguoxiaoStatePlayingResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.SanguoxiaoStatePlayingResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 userID = 2;
 * @return {number}
 */
proto.pb.SanguoxiaoStatePlayingResp.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.SanguoxiaoStatePlayingResp.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.SanguoxiaoStateEraseResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.SanguoxiaoStateEraseResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.SanguoxiaoStateEraseResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoStateEraseResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && game_pb.TimeInfo.toObject(includeInstance, f),
    nowboard: (f = msg.getNowboard()) && proto.pb.BoardInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.SanguoxiaoStateEraseResp}
 */
proto.pb.SanguoxiaoStateEraseResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.SanguoxiaoStateEraseResp;
  return proto.pb.SanguoxiaoStateEraseResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.SanguoxiaoStateEraseResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.SanguoxiaoStateEraseResp}
 */
proto.pb.SanguoxiaoStateEraseResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new game_pb.TimeInfo;
      reader.readMessage(value,game_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    case 2:
      var value = new proto.pb.BoardInfo;
      reader.readMessage(value,proto.pb.BoardInfo.deserializeBinaryFromReader);
      msg.setNowboard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.SanguoxiaoStateEraseResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.SanguoxiaoStateEraseResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.SanguoxiaoStateEraseResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoStateEraseResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      game_pb.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getNowboard();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.BoardInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.SanguoxiaoStateEraseResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, game_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.SanguoxiaoStateEraseResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.SanguoxiaoStateEraseResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.SanguoxiaoStateEraseResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BoardInfo nowBoard = 2;
 * @return {?proto.pb.BoardInfo}
 */
proto.pb.SanguoxiaoStateEraseResp.prototype.getNowboard = function() {
  return /** @type{?proto.pb.BoardInfo} */ (
    jspb.Message.getWrapperField(this, proto.pb.BoardInfo, 2));
};


/** @param {?proto.pb.BoardInfo|undefined} value */
proto.pb.SanguoxiaoStateEraseResp.prototype.setNowboard = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.SanguoxiaoStateEraseResp.prototype.clearNowboard = function() {
  this.setNowboard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.SanguoxiaoStateEraseResp.prototype.hasNowboard = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.SanguoxiaoStateOverResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.SanguoxiaoStateOverResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.SanguoxiaoStateOverResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoStateOverResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && game_pb.TimeInfo.toObject(includeInstance, f),
    winid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    loseid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    awardid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.SanguoxiaoStateOverResp}
 */
proto.pb.SanguoxiaoStateOverResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.SanguoxiaoStateOverResp;
  return proto.pb.SanguoxiaoStateOverResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.SanguoxiaoStateOverResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.SanguoxiaoStateOverResp}
 */
proto.pb.SanguoxiaoStateOverResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new game_pb.TimeInfo;
      reader.readMessage(value,game_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWinid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLoseid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAwardid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.SanguoxiaoStateOverResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.SanguoxiaoStateOverResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.SanguoxiaoStateOverResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoStateOverResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      game_pb.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getWinid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getLoseid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAwardid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.SanguoxiaoStateOverResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, game_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.SanguoxiaoStateOverResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.SanguoxiaoStateOverResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.SanguoxiaoStateOverResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 winID = 2;
 * @return {number}
 */
proto.pb.SanguoxiaoStateOverResp.prototype.getWinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.SanguoxiaoStateOverResp.prototype.setWinid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 loseID = 3;
 * @return {number}
 */
proto.pb.SanguoxiaoStateOverResp.prototype.getLoseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.SanguoxiaoStateOverResp.prototype.setLoseid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 awardId = 4;
 * @return {number}
 */
proto.pb.SanguoxiaoStateOverResp.prototype.getAwardid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.SanguoxiaoStateOverResp.prototype.setAwardid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.SanguoxiaoChooseReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.SanguoxiaoChooseReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.SanguoxiaoChooseReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.SanguoxiaoChooseReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoChooseReq.toObject = function(includeInstance, msg) {
  var obj = {
    teamList: jspb.Message.toObjectList(msg.getTeamList(),
    proto.pb.WujiangInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.SanguoxiaoChooseReq}
 */
proto.pb.SanguoxiaoChooseReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.SanguoxiaoChooseReq;
  return proto.pb.SanguoxiaoChooseReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.SanguoxiaoChooseReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.SanguoxiaoChooseReq}
 */
proto.pb.SanguoxiaoChooseReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.WujiangInfo;
      reader.readMessage(value,proto.pb.WujiangInfo.deserializeBinaryFromReader);
      msg.addTeam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.SanguoxiaoChooseReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.SanguoxiaoChooseReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.SanguoxiaoChooseReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoChooseReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.WujiangInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated WujiangInfo team = 1;
 * @return {!Array<!proto.pb.WujiangInfo>}
 */
proto.pb.SanguoxiaoChooseReq.prototype.getTeamList = function() {
  return /** @type{!Array<!proto.pb.WujiangInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.WujiangInfo, 1));
};


/** @param {!Array<!proto.pb.WujiangInfo>} value */
proto.pb.SanguoxiaoChooseReq.prototype.setTeamList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.WujiangInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.WujiangInfo}
 */
proto.pb.SanguoxiaoChooseReq.prototype.addTeam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.WujiangInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.SanguoxiaoChooseReq.prototype.clearTeamList = function() {
  this.setTeamList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.SanguoxiaoChooseResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.SanguoxiaoChooseResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.SanguoxiaoChooseResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.SanguoxiaoChooseResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoChooseResp.toObject = function(includeInstance, msg) {
  var obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    teamList: jspb.Message.toObjectList(msg.getTeamList(),
    proto.pb.WujiangInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.SanguoxiaoChooseResp}
 */
proto.pb.SanguoxiaoChooseResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.SanguoxiaoChooseResp;
  return proto.pb.SanguoxiaoChooseResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.SanguoxiaoChooseResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.SanguoxiaoChooseResp}
 */
proto.pb.SanguoxiaoChooseResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = new proto.pb.WujiangInfo;
      reader.readMessage(value,proto.pb.WujiangInfo.deserializeBinaryFromReader);
      msg.addTeam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.SanguoxiaoChooseResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.SanguoxiaoChooseResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.SanguoxiaoChooseResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoChooseResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTeamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pb.WujiangInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.pb.SanguoxiaoChooseResp.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.SanguoxiaoChooseResp.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated WujiangInfo team = 2;
 * @return {!Array<!proto.pb.WujiangInfo>}
 */
proto.pb.SanguoxiaoChooseResp.prototype.getTeamList = function() {
  return /** @type{!Array<!proto.pb.WujiangInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.WujiangInfo, 2));
};


/** @param {!Array<!proto.pb.WujiangInfo>} value */
proto.pb.SanguoxiaoChooseResp.prototype.setTeamList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pb.WujiangInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.WujiangInfo}
 */
proto.pb.SanguoxiaoChooseResp.prototype.addTeam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pb.WujiangInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.SanguoxiaoChooseResp.prototype.clearTeamList = function() {
  this.setTeamList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.SanguoxiaoSwapReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.SanguoxiaoSwapReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.SanguoxiaoSwapReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoSwapReq.toObject = function(includeInstance, msg) {
  var obj = {
    origin: (f = msg.getOrigin()) && proto.pb.Grid.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.pb.Grid.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.SanguoxiaoSwapReq}
 */
proto.pb.SanguoxiaoSwapReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.SanguoxiaoSwapReq;
  return proto.pb.SanguoxiaoSwapReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.SanguoxiaoSwapReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.SanguoxiaoSwapReq}
 */
proto.pb.SanguoxiaoSwapReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Grid;
      reader.readMessage(value,proto.pb.Grid.deserializeBinaryFromReader);
      msg.setOrigin(value);
      break;
    case 2:
      var value = new proto.pb.Grid;
      reader.readMessage(value,proto.pb.Grid.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.SanguoxiaoSwapReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.SanguoxiaoSwapReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.SanguoxiaoSwapReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoSwapReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrigin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.Grid.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.Grid.serializeBinaryToWriter
    );
  }
};


/**
 * optional Grid origin = 1;
 * @return {?proto.pb.Grid}
 */
proto.pb.SanguoxiaoSwapReq.prototype.getOrigin = function() {
  return /** @type{?proto.pb.Grid} */ (
    jspb.Message.getWrapperField(this, proto.pb.Grid, 1));
};


/** @param {?proto.pb.Grid|undefined} value */
proto.pb.SanguoxiaoSwapReq.prototype.setOrigin = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.SanguoxiaoSwapReq.prototype.clearOrigin = function() {
  this.setOrigin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.SanguoxiaoSwapReq.prototype.hasOrigin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Grid target = 2;
 * @return {?proto.pb.Grid}
 */
proto.pb.SanguoxiaoSwapReq.prototype.getTarget = function() {
  return /** @type{?proto.pb.Grid} */ (
    jspb.Message.getWrapperField(this, proto.pb.Grid, 2));
};


/** @param {?proto.pb.Grid|undefined} value */
proto.pb.SanguoxiaoSwapReq.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.SanguoxiaoSwapReq.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.SanguoxiaoSwapReq.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.SanguoxiaoSwapResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.SanguoxiaoSwapResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.SanguoxiaoSwapResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoSwapResp.toObject = function(includeInstance, msg) {
  var obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    origin: (f = msg.getOrigin()) && proto.pb.Grid.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.pb.Grid.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.SanguoxiaoSwapResp}
 */
proto.pb.SanguoxiaoSwapResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.SanguoxiaoSwapResp;
  return proto.pb.SanguoxiaoSwapResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.SanguoxiaoSwapResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.SanguoxiaoSwapResp}
 */
proto.pb.SanguoxiaoSwapResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = new proto.pb.Grid;
      reader.readMessage(value,proto.pb.Grid.deserializeBinaryFromReader);
      msg.setOrigin(value);
      break;
    case 3:
      var value = new proto.pb.Grid;
      reader.readMessage(value,proto.pb.Grid.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.SanguoxiaoSwapResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.SanguoxiaoSwapResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.SanguoxiaoSwapResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SanguoxiaoSwapResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getOrigin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.Grid.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.Grid.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.pb.SanguoxiaoSwapResp.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.SanguoxiaoSwapResp.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Grid origin = 2;
 * @return {?proto.pb.Grid}
 */
proto.pb.SanguoxiaoSwapResp.prototype.getOrigin = function() {
  return /** @type{?proto.pb.Grid} */ (
    jspb.Message.getWrapperField(this, proto.pb.Grid, 2));
};


/** @param {?proto.pb.Grid|undefined} value */
proto.pb.SanguoxiaoSwapResp.prototype.setOrigin = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.SanguoxiaoSwapResp.prototype.clearOrigin = function() {
  this.setOrigin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.SanguoxiaoSwapResp.prototype.hasOrigin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Grid target = 3;
 * @return {?proto.pb.Grid}
 */
proto.pb.SanguoxiaoSwapResp.prototype.getTarget = function() {
  return /** @type{?proto.pb.Grid} */ (
    jspb.Message.getWrapperField(this, proto.pb.Grid, 3));
};


/** @param {?proto.pb.Grid|undefined} value */
proto.pb.SanguoxiaoSwapResp.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.SanguoxiaoSwapResp.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.SanguoxiaoSwapResp.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.pb.Piece = {
  NOPIECE: 0,
  JIN: 1,
  MU: 2,
  SHUI: 3,
  HUO: 4,
  TU: 5,
  YAO: 6
};

goog.object.extend(exports, proto.pb);
