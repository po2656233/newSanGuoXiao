/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pb.CardInfo', null, global);
goog.exportSymbol('proto.pb.CultivateInfo', null, global);
goog.exportSymbol('proto.pb.DailyZeroPush', null, global);
goog.exportSymbol('proto.pb.EquipInfo', null, global);
goog.exportSymbol('proto.pb.ErrorResp', null, global);
goog.exportSymbol('proto.pb.FightTeam', null, global);
goog.exportSymbol('proto.pb.ItemInfo', null, global);
goog.exportSymbol('proto.pb.ItemInfoPush', null, global);
goog.exportSymbol('proto.pb.ModInfo', null, global);
goog.exportSymbol('proto.pb.ModListReq', null, global);
goog.exportSymbol('proto.pb.ModListResp', null, global);
goog.exportSymbol('proto.pb.MokOpenRewardReq', null, global);
goog.exportSymbol('proto.pb.MokOpenRewardResp', null, global);
goog.exportSymbol('proto.pb.PriceInfo', null, global);
goog.exportSymbol('proto.pb.PropInfo', null, global);
goog.exportSymbol('proto.pb.ServerInfo', null, global);
goog.exportSymbol('proto.pb.TimeInfo', null, global);
goog.exportSymbol('proto.pb.UserBaseInfo', null, global);
goog.exportSymbol('proto.pb.UserInfo', null, global);
goog.exportSymbol('proto.pb.WalletInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ErrorResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ErrorResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ErrorResp.displayName = 'proto.pb.ErrorResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ServerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ServerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ServerInfo.displayName = 'proto.pb.ServerInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.TimeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.TimeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.TimeInfo.displayName = 'proto.pb.TimeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.PropInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.PropInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.PropInfo.displayName = 'proto.pb.PropInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.UserBaseInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.UserBaseInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.UserBaseInfo.displayName = 'proto.pb.UserBaseInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.WalletInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.WalletInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.WalletInfo.displayName = 'proto.pb.WalletInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.UserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.UserInfo.repeatedFields_, null);
};
goog.inherits(proto.pb.UserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.UserInfo.displayName = 'proto.pb.UserInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ModInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ModInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ModInfo.displayName = 'proto.pb.ModInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ItemInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ItemInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ItemInfo.displayName = 'proto.pb.ItemInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.EquipInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.EquipInfo.repeatedFields_, null);
};
goog.inherits(proto.pb.EquipInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.EquipInfo.displayName = 'proto.pb.EquipInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.PriceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.PriceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.PriceInfo.displayName = 'proto.pb.PriceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.CardInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.CardInfo.repeatedFields_, null);
};
goog.inherits(proto.pb.CardInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.CardInfo.displayName = 'proto.pb.CardInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.CultivateInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.CultivateInfo.repeatedFields_, null);
};
goog.inherits(proto.pb.CultivateInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.CultivateInfo.displayName = 'proto.pb.CultivateInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.FightTeam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.FightTeam.repeatedFields_, null);
};
goog.inherits(proto.pb.FightTeam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FightTeam.displayName = 'proto.pb.FightTeam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ItemInfoPush = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ItemInfoPush, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ItemInfoPush.displayName = 'proto.pb.ItemInfoPush';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.DailyZeroPush = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.DailyZeroPush, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.DailyZeroPush.displayName = 'proto.pb.DailyZeroPush';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ModListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ModListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ModListReq.displayName = 'proto.pb.ModListReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ModListResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.ModListResp.repeatedFields_, null);
};
goog.inherits(proto.pb.ModListResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ModListResp.displayName = 'proto.pb.ModListResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MokOpenRewardReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.MokOpenRewardReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MokOpenRewardReq.displayName = 'proto.pb.MokOpenRewardReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MokOpenRewardResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.MokOpenRewardResp.repeatedFields_, null);
};
goog.inherits(proto.pb.MokOpenRewardResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MokOpenRewardResp.displayName = 'proto.pb.MokOpenRewardResp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ErrorResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ErrorResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ErrorResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ErrorResp.toObject = function(includeInstance, msg) {
  var obj = {
    errorcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errorstr: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ErrorResp}
 */
proto.pb.ErrorResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ErrorResp;
  return proto.pb.ErrorResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ErrorResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ErrorResp}
 */
proto.pb.ErrorResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorstr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ErrorResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ErrorResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ErrorResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ErrorResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorcode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrorstr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 errorCode = 1;
 * @return {number}
 */
proto.pb.ErrorResp.prototype.getErrorcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.ErrorResp.prototype.setErrorcode = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string errorStr = 2;
 * @return {string}
 */
proto.pb.ErrorResp.prototype.getErrorstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.ErrorResp.prototype.setErrorstr = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ServerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ServerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ServerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ServerInfo.toObject = function(includeInstance, msg) {
  var obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serverurl: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ServerInfo}
 */
proto.pb.ServerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ServerInfo;
  return proto.pb.ServerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ServerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ServerInfo}
 */
proto.pb.ServerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ServerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ServerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ServerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ServerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getServerurl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string iP = 1;
 * @return {string}
 */
proto.pb.ServerInfo.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pb.ServerInfo.prototype.setIp = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.pb.ServerInfo.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.ServerInfo.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string serverUrl = 3;
 * @return {string}
 */
proto.pb.ServerInfo.prototype.getServerurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.ServerInfo.prototype.setServerurl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.TimeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.TimeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.TimeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TimeInfo.toObject = function(includeInstance, msg) {
  var obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalms: jspb.Message.getFieldWithDefault(msg, 2, 0),
    remainms: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.TimeInfo}
 */
proto.pb.TimeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.TimeInfo;
  return proto.pb.TimeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.TimeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.TimeInfo}
 */
proto.pb.TimeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalms(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRemainms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.TimeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.TimeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.TimeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TimeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTotalms();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getRemainms();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.pb.TimeInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.TimeInfo.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 totalMS = 2;
 * @return {number}
 */
proto.pb.TimeInfo.prototype.getTotalms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.TimeInfo.prototype.setTotalms = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 remainMS = 3;
 * @return {number}
 */
proto.pb.TimeInfo.prototype.getRemainms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.TimeInfo.prototype.setRemainms = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.PropInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.PropInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.PropInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PropInfo.toObject = function(includeInstance, msg) {
  var obj = {
    propid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    propvalue: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ispercent: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.PropInfo}
 */
proto.pb.PropInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.PropInfo;
  return proto.pb.PropInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.PropInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.PropInfo}
 */
proto.pb.PropInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPropid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPropvalue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIspercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.PropInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.PropInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.PropInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PropInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPropvalue();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getIspercent();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int64 propId = 1;
 * @return {number}
 */
proto.pb.PropInfo.prototype.getPropid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.PropInfo.prototype.setPropid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 propValue = 2;
 * @return {number}
 */
proto.pb.PropInfo.prototype.getPropvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.PropInfo.prototype.setPropvalue = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 isPercent = 3;
 * @return {number}
 */
proto.pb.PropInfo.prototype.getIspercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.PropInfo.prototype.setIspercent = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.UserBaseInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.UserBaseInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.UserBaseInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.UserBaseInfo.toObject = function(includeInstance, msg) {
  var obj = {
    gender: jspb.Message.getFieldWithDefault(msg, 1, 0),
    headid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    headframe: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nick: jspb.Message.getFieldWithDefault(msg, 4, ""),
    headurl: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.UserBaseInfo}
 */
proto.pb.UserBaseInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.UserBaseInfo;
  return proto.pb.UserBaseInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.UserBaseInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.UserBaseInfo}
 */
proto.pb.UserBaseInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGender(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeadid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeadframe(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNick(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.UserBaseInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.UserBaseInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.UserBaseInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.UserBaseInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGender();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHeadid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHeadframe();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getNick();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHeadurl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 gender = 1;
 * @return {number}
 */
proto.pb.UserBaseInfo.prototype.getGender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.UserBaseInfo.prototype.setGender = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 headId = 2;
 * @return {number}
 */
proto.pb.UserBaseInfo.prototype.getHeadid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.UserBaseInfo.prototype.setHeadid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 headFrame = 3;
 * @return {number}
 */
proto.pb.UserBaseInfo.prototype.getHeadframe = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.UserBaseInfo.prototype.setHeadframe = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string nick = 4;
 * @return {string}
 */
proto.pb.UserBaseInfo.prototype.getNick = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.pb.UserBaseInfo.prototype.setNick = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string headUrl = 5;
 * @return {string}
 */
proto.pb.UserBaseInfo.prototype.getHeadurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.pb.UserBaseInfo.prototype.setHeadurl = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.WalletInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.WalletInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.WalletInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.WalletInfo.toObject = function(includeInstance, msg) {
  var obj = {
    diamond: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gold: jspb.Message.getFieldWithDefault(msg, 2, 0),
    coin: jspb.Message.getFieldWithDefault(msg, 3, 0),
    roomcard: jspb.Message.getFieldWithDefault(msg, 4, 0),
    exp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    grade: jspb.Message.getFieldWithDefault(msg, 6, 0),
    avatarid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    safebox: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.WalletInfo}
 */
proto.pb.WalletInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.WalletInfo;
  return proto.pb.WalletInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.WalletInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.WalletInfo}
 */
proto.pb.WalletInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDiamond(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGold(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCoin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRoomcard(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGrade(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAvatarid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSafebox(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.WalletInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.WalletInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.WalletInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.WalletInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiamond();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getGold();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCoin();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getRoomcard();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getExp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getGrade();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getAvatarid();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getSafebox();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
};


/**
 * optional int64 diamond = 1;
 * @return {number}
 */
proto.pb.WalletInfo.prototype.getDiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.WalletInfo.prototype.setDiamond = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 gold = 2;
 * @return {number}
 */
proto.pb.WalletInfo.prototype.getGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.WalletInfo.prototype.setGold = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 coin = 3;
 * @return {number}
 */
proto.pb.WalletInfo.prototype.getCoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.WalletInfo.prototype.setCoin = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 roomcard = 4;
 * @return {number}
 */
proto.pb.WalletInfo.prototype.getRoomcard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.WalletInfo.prototype.setRoomcard = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 exp = 5;
 * @return {number}
 */
proto.pb.WalletInfo.prototype.getExp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb.WalletInfo.prototype.setExp = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 grade = 6;
 * @return {number}
 */
proto.pb.WalletInfo.prototype.getGrade = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.pb.WalletInfo.prototype.setGrade = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 avatarId = 7;
 * @return {number}
 */
proto.pb.WalletInfo.prototype.getAvatarid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.pb.WalletInfo.prototype.setAvatarid = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 safeBox = 8;
 * @return {number}
 */
proto.pb.WalletInfo.prototype.getSafebox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.pb.WalletInfo.prototype.setSafebox = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.UserInfo.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.UserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.UserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.UserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.UserInfo.toObject = function(includeInstance, msg) {
  var obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    basedata: (f = msg.getBasedata()) && proto.pb.UserBaseInfo.toObject(includeInstance, f),
    walletdata: (f = msg.getWalletdata()) && proto.pb.WalletInfo.toObject(includeInstance, f),
    proplistList: jspb.Message.toObjectList(msg.getProplistList(),
    proto.pb.PropInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.UserInfo}
 */
proto.pb.UserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.UserInfo;
  return proto.pb.UserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.UserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.UserInfo}
 */
proto.pb.UserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = new proto.pb.UserBaseInfo;
      reader.readMessage(value,proto.pb.UserBaseInfo.deserializeBinaryFromReader);
      msg.setBasedata(value);
      break;
    case 3:
      var value = new proto.pb.WalletInfo;
      reader.readMessage(value,proto.pb.WalletInfo.deserializeBinaryFromReader);
      msg.setWalletdata(value);
      break;
    case 4:
      var value = new proto.pb.PropInfo;
      reader.readMessage(value,proto.pb.PropInfo.deserializeBinaryFromReader);
      msg.addProplist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.UserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.UserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.UserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.UserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBasedata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.UserBaseInfo.serializeBinaryToWriter
    );
  }
  f = message.getWalletdata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.WalletInfo.serializeBinaryToWriter
    );
  }
  f = message.getProplistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.pb.PropInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 userId = 1;
 * @return {number}
 */
proto.pb.UserInfo.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.UserInfo.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional UserBaseInfo baseData = 2;
 * @return {?proto.pb.UserBaseInfo}
 */
proto.pb.UserInfo.prototype.getBasedata = function() {
  return /** @type{?proto.pb.UserBaseInfo} */ (
    jspb.Message.getWrapperField(this, proto.pb.UserBaseInfo, 2));
};


/** @param {?proto.pb.UserBaseInfo|undefined} value */
proto.pb.UserInfo.prototype.setBasedata = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.UserInfo.prototype.clearBasedata = function() {
  this.setBasedata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.UserInfo.prototype.hasBasedata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WalletInfo walletData = 3;
 * @return {?proto.pb.WalletInfo}
 */
proto.pb.UserInfo.prototype.getWalletdata = function() {
  return /** @type{?proto.pb.WalletInfo} */ (
    jspb.Message.getWrapperField(this, proto.pb.WalletInfo, 3));
};


/** @param {?proto.pb.WalletInfo|undefined} value */
proto.pb.UserInfo.prototype.setWalletdata = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.UserInfo.prototype.clearWalletdata = function() {
  this.setWalletdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.UserInfo.prototype.hasWalletdata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated PropInfo propList = 4;
 * @return {!Array<!proto.pb.PropInfo>}
 */
proto.pb.UserInfo.prototype.getProplistList = function() {
  return /** @type{!Array<!proto.pb.PropInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.PropInfo, 4));
};


/** @param {!Array<!proto.pb.PropInfo>} value */
proto.pb.UserInfo.prototype.setProplistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.pb.PropInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.PropInfo}
 */
proto.pb.UserInfo.prototype.addProplist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.pb.PropInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.UserInfo.prototype.clearProplistList = function() {
  this.setProplistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ModInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ModInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ModInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ModInfo.toObject = function(includeInstance, msg) {
  var obj = {
    modid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ModInfo}
 */
proto.pb.ModInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ModInfo;
  return proto.pb.ModInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ModInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ModInfo}
 */
proto.pb.ModInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setModid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ModInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ModInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ModInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ModInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 modId = 1;
 * @return {number}
 */
proto.pb.ModInfo.prototype.getModid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.ModInfo.prototype.setModid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 state = 2;
 * @return {number}
 */
proto.pb.ModInfo.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.ModInfo.prototype.setState = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ItemInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ItemInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ItemInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ItemInfo.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    itemtype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    count: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ItemInfo}
 */
proto.pb.ItemInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ItemInfo;
  return proto.pb.ItemInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ItemInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ItemInfo}
 */
proto.pb.ItemInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setItemtype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ItemInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ItemInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ItemInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ItemInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getItemtype();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.pb.ItemInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.ItemInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 uid = 2;
 * @return {number}
 */
proto.pb.ItemInfo.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.ItemInfo.prototype.setUid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 itemType = 3;
 * @return {number}
 */
proto.pb.ItemInfo.prototype.getItemtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.ItemInfo.prototype.setItemtype = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 count = 4;
 * @return {number}
 */
proto.pb.ItemInfo.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.ItemInfo.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.EquipInfo.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.EquipInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.EquipInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.EquipInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.EquipInfo.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cfgid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    grade: jspb.Message.getFieldWithDefault(msg, 3, 0),
    slotid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    proplistList: jspb.Message.toObjectList(msg.getProplistList(),
    proto.pb.PropInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.EquipInfo}
 */
proto.pb.EquipInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.EquipInfo;
  return proto.pb.EquipInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.EquipInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.EquipInfo}
 */
proto.pb.EquipInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCfgid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGrade(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSlotid(value);
      break;
    case 5:
      var value = new proto.pb.PropInfo;
      reader.readMessage(value,proto.pb.PropInfo.deserializeBinaryFromReader);
      msg.addProplist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.EquipInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.EquipInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.EquipInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.EquipInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCfgid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getGrade();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSlotid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getProplistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.pb.PropInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.pb.EquipInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.EquipInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 cfgId = 2;
 * @return {number}
 */
proto.pb.EquipInfo.prototype.getCfgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.EquipInfo.prototype.setCfgid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 grade = 3;
 * @return {number}
 */
proto.pb.EquipInfo.prototype.getGrade = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.EquipInfo.prototype.setGrade = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 slotId = 4;
 * @return {number}
 */
proto.pb.EquipInfo.prototype.getSlotid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.EquipInfo.prototype.setSlotid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated PropInfo propList = 5;
 * @return {!Array<!proto.pb.PropInfo>}
 */
proto.pb.EquipInfo.prototype.getProplistList = function() {
  return /** @type{!Array<!proto.pb.PropInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.PropInfo, 5));
};


/** @param {!Array<!proto.pb.PropInfo>} value */
proto.pb.EquipInfo.prototype.setProplistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.pb.PropInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.PropInfo}
 */
proto.pb.EquipInfo.prototype.addProplist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.pb.PropInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.EquipInfo.prototype.clearProplistList = function() {
  this.setProplistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.PriceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.PriceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.PriceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PriceInfo.toObject = function(includeInstance, msg) {
  var obj = {
    pricetype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pricevalue: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.PriceInfo}
 */
proto.pb.PriceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.PriceInfo;
  return proto.pb.PriceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.PriceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.PriceInfo}
 */
proto.pb.PriceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPricetype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPricevalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.PriceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.PriceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.PriceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PriceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPricetype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPricevalue();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int32 priceType = 1;
 * @return {number}
 */
proto.pb.PriceInfo.prototype.getPricetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.PriceInfo.prototype.setPricetype = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 priceValue = 2;
 * @return {number}
 */
proto.pb.PriceInfo.prototype.getPricevalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.PriceInfo.prototype.setPricevalue = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.CardInfo.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.CardInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.CardInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.CardInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CardInfo.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cardid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tbtype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    star: jspb.Message.getFieldWithDefault(msg, 5, 0),
    quality: jspb.Message.getFieldWithDefault(msg, 6, 0),
    level: jspb.Message.getFieldWithDefault(msg, 7, 0),
    grade: jspb.Message.getFieldWithDefault(msg, 8, 0),
    lineup: jspb.Message.getFieldWithDefault(msg, 9, 0),
    npos: jspb.Message.getFieldWithDefault(msg, 10, 0),
    proplistList: jspb.Message.toObjectList(msg.getProplistList(),
    proto.pb.PropInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.CardInfo}
 */
proto.pb.CardInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.CardInfo;
  return proto.pb.CardInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.CardInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.CardInfo}
 */
proto.pb.CardInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCardid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTbtype(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStar(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuality(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGrade(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLineup(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNpos(value);
      break;
    case 11:
      var value = new proto.pb.PropInfo;
      reader.readMessage(value,proto.pb.PropInfo.deserializeBinaryFromReader);
      msg.addProplist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.CardInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.CardInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.CardInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CardInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCardid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTbtype();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getStar();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getQuality();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getGrade();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getLineup();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getNpos();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getProplistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.pb.PropInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.pb.CardInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.CardInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 uid = 2;
 * @return {number}
 */
proto.pb.CardInfo.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.CardInfo.prototype.setUid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 cardId = 3;
 * @return {number}
 */
proto.pb.CardInfo.prototype.getCardid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.CardInfo.prototype.setCardid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 tbType = 4;
 * @return {number}
 */
proto.pb.CardInfo.prototype.getTbtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.CardInfo.prototype.setTbtype = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 star = 5;
 * @return {number}
 */
proto.pb.CardInfo.prototype.getStar = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb.CardInfo.prototype.setStar = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 quality = 6;
 * @return {number}
 */
proto.pb.CardInfo.prototype.getQuality = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.pb.CardInfo.prototype.setQuality = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 level = 7;
 * @return {number}
 */
proto.pb.CardInfo.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.pb.CardInfo.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 grade = 8;
 * @return {number}
 */
proto.pb.CardInfo.prototype.getGrade = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.pb.CardInfo.prototype.setGrade = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 lineup = 9;
 * @return {number}
 */
proto.pb.CardInfo.prototype.getLineup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.pb.CardInfo.prototype.setLineup = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 npos = 10;
 * @return {number}
 */
proto.pb.CardInfo.prototype.getNpos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.pb.CardInfo.prototype.setNpos = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * repeated PropInfo propList = 11;
 * @return {!Array<!proto.pb.PropInfo>}
 */
proto.pb.CardInfo.prototype.getProplistList = function() {
  return /** @type{!Array<!proto.pb.PropInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.PropInfo, 11));
};


/** @param {!Array<!proto.pb.PropInfo>} value */
proto.pb.CardInfo.prototype.setProplistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.pb.PropInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.PropInfo}
 */
proto.pb.CardInfo.prototype.addProplist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.pb.PropInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.CardInfo.prototype.clearProplistList = function() {
  this.setProplistList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.CultivateInfo.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.CultivateInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.CultivateInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.CultivateInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CultivateInfo.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tbtype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    npos: jspb.Message.getFieldWithDefault(msg, 4, 0),
    star: jspb.Message.getFieldWithDefault(msg, 5, 0),
    quality: jspb.Message.getFieldWithDefault(msg, 6, 0),
    level: jspb.Message.getFieldWithDefault(msg, 7, 0),
    grade: jspb.Message.getFieldWithDefault(msg, 8, 0),
    heroid: jspb.Message.getFieldWithDefault(msg, 9, 0),
    proplistList: jspb.Message.toObjectList(msg.getProplistList(),
    proto.pb.PropInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.CultivateInfo}
 */
proto.pb.CultivateInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.CultivateInfo;
  return proto.pb.CultivateInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.CultivateInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.CultivateInfo}
 */
proto.pb.CultivateInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTbtype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNpos(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStar(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuality(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGrade(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeroid(value);
      break;
    case 10:
      var value = new proto.pb.PropInfo;
      reader.readMessage(value,proto.pb.PropInfo.deserializeBinaryFromReader);
      msg.addProplist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.CultivateInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.CultivateInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.CultivateInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CultivateInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTbtype();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getNpos();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getStar();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getQuality();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getGrade();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getHeroid();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getProplistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.pb.PropInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.pb.CultivateInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.CultivateInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 uid = 2;
 * @return {number}
 */
proto.pb.CultivateInfo.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.CultivateInfo.prototype.setUid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 tbType = 3;
 * @return {number}
 */
proto.pb.CultivateInfo.prototype.getTbtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.CultivateInfo.prototype.setTbtype = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 npos = 4;
 * @return {number}
 */
proto.pb.CultivateInfo.prototype.getNpos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.CultivateInfo.prototype.setNpos = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 star = 5;
 * @return {number}
 */
proto.pb.CultivateInfo.prototype.getStar = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb.CultivateInfo.prototype.setStar = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 quality = 6;
 * @return {number}
 */
proto.pb.CultivateInfo.prototype.getQuality = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.pb.CultivateInfo.prototype.setQuality = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 level = 7;
 * @return {number}
 */
proto.pb.CultivateInfo.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.pb.CultivateInfo.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 grade = 8;
 * @return {number}
 */
proto.pb.CultivateInfo.prototype.getGrade = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.pb.CultivateInfo.prototype.setGrade = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 heroId = 9;
 * @return {number}
 */
proto.pb.CultivateInfo.prototype.getHeroid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.pb.CultivateInfo.prototype.setHeroid = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * repeated PropInfo propList = 10;
 * @return {!Array<!proto.pb.PropInfo>}
 */
proto.pb.CultivateInfo.prototype.getProplistList = function() {
  return /** @type{!Array<!proto.pb.PropInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.PropInfo, 10));
};


/** @param {!Array<!proto.pb.PropInfo>} value */
proto.pb.CultivateInfo.prototype.setProplistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.pb.PropInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.PropInfo}
 */
proto.pb.CultivateInfo.prototype.addProplist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.pb.PropInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.CultivateInfo.prototype.clearProplistList = function() {
  this.setProplistList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.FightTeam.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.FightTeam.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.FightTeam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.FightTeam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FightTeam.toObject = function(includeInstance, msg) {
  var obj = {
    teamid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fighterlistList: jspb.Message.toObjectList(msg.getFighterlistList(),
    proto.pb.CardInfo.toObject, includeInstance),
    petlistList: jspb.Message.toObjectList(msg.getPetlistList(),
    proto.pb.CardInfo.toObject, includeInstance),
    jingguailistList: jspb.Message.toObjectList(msg.getJingguailistList(),
    proto.pb.CardInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FightTeam}
 */
proto.pb.FightTeam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FightTeam;
  return proto.pb.FightTeam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FightTeam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FightTeam}
 */
proto.pb.FightTeam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 3:
      var value = new proto.pb.CardInfo;
      reader.readMessage(value,proto.pb.CardInfo.deserializeBinaryFromReader);
      msg.addFighterlist(value);
      break;
    case 4:
      var value = new proto.pb.CardInfo;
      reader.readMessage(value,proto.pb.CardInfo.deserializeBinaryFromReader);
      msg.addPetlist(value);
      break;
    case 5:
      var value = new proto.pb.CardInfo;
      reader.readMessage(value,proto.pb.CardInfo.deserializeBinaryFromReader);
      msg.addJingguailist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.FightTeam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.FightTeam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FightTeam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FightTeam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFighterlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.pb.CardInfo.serializeBinaryToWriter
    );
  }
  f = message.getPetlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.pb.CardInfo.serializeBinaryToWriter
    );
  }
  f = message.getJingguailistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.pb.CardInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 teamId = 1;
 * @return {number}
 */
proto.pb.FightTeam.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.FightTeam.prototype.setTeamid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 uid = 2;
 * @return {number}
 */
proto.pb.FightTeam.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.FightTeam.prototype.setUid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated CardInfo fighterList = 3;
 * @return {!Array<!proto.pb.CardInfo>}
 */
proto.pb.FightTeam.prototype.getFighterlistList = function() {
  return /** @type{!Array<!proto.pb.CardInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.CardInfo, 3));
};


/** @param {!Array<!proto.pb.CardInfo>} value */
proto.pb.FightTeam.prototype.setFighterlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pb.CardInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.CardInfo}
 */
proto.pb.FightTeam.prototype.addFighterlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pb.CardInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.FightTeam.prototype.clearFighterlistList = function() {
  this.setFighterlistList([]);
};


/**
 * repeated CardInfo petList = 4;
 * @return {!Array<!proto.pb.CardInfo>}
 */
proto.pb.FightTeam.prototype.getPetlistList = function() {
  return /** @type{!Array<!proto.pb.CardInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.CardInfo, 4));
};


/** @param {!Array<!proto.pb.CardInfo>} value */
proto.pb.FightTeam.prototype.setPetlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.pb.CardInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.CardInfo}
 */
proto.pb.FightTeam.prototype.addPetlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.pb.CardInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.FightTeam.prototype.clearPetlistList = function() {
  this.setPetlistList([]);
};


/**
 * repeated CardInfo jingGuaiList = 5;
 * @return {!Array<!proto.pb.CardInfo>}
 */
proto.pb.FightTeam.prototype.getJingguailistList = function() {
  return /** @type{!Array<!proto.pb.CardInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.CardInfo, 5));
};


/** @param {!Array<!proto.pb.CardInfo>} value */
proto.pb.FightTeam.prototype.setJingguailistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.pb.CardInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.CardInfo}
 */
proto.pb.FightTeam.prototype.addJingguailist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.pb.CardInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.FightTeam.prototype.clearJingguailistList = function() {
  this.setJingguailistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ItemInfoPush.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ItemInfoPush.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ItemInfoPush} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ItemInfoPush.toObject = function(includeInstance, msg) {
  var obj = {
    data: (f = msg.getData()) && proto.pb.ItemInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ItemInfoPush}
 */
proto.pb.ItemInfoPush.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ItemInfoPush;
  return proto.pb.ItemInfoPush.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ItemInfoPush} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ItemInfoPush}
 */
proto.pb.ItemInfoPush.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.ItemInfo;
      reader.readMessage(value,proto.pb.ItemInfo.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ItemInfoPush.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ItemInfoPush.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ItemInfoPush} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ItemInfoPush.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.ItemInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional ItemInfo data = 1;
 * @return {?proto.pb.ItemInfo}
 */
proto.pb.ItemInfoPush.prototype.getData = function() {
  return /** @type{?proto.pb.ItemInfo} */ (
    jspb.Message.getWrapperField(this, proto.pb.ItemInfo, 1));
};


/** @param {?proto.pb.ItemInfo|undefined} value */
proto.pb.ItemInfoPush.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ItemInfoPush.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ItemInfoPush.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.DailyZeroPush.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.DailyZeroPush.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.DailyZeroPush} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.DailyZeroPush.toObject = function(includeInstance, msg) {
  var obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.DailyZeroPush}
 */
proto.pb.DailyZeroPush.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.DailyZeroPush;
  return proto.pb.DailyZeroPush.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.DailyZeroPush} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.DailyZeroPush}
 */
proto.pb.DailyZeroPush.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.DailyZeroPush.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.DailyZeroPush.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.DailyZeroPush} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.DailyZeroPush.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.pb.DailyZeroPush.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.DailyZeroPush.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ModListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ModListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ModListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ModListReq.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ModListReq}
 */
proto.pb.ModListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ModListReq;
  return proto.pb.ModListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ModListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ModListReq}
 */
proto.pb.ModListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ModListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ModListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ModListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ModListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.ModListResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ModListResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ModListResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ModListResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ModListResp.toObject = function(includeInstance, msg) {
  var obj = {
    modlistList: jspb.Message.toObjectList(msg.getModlistList(),
    proto.pb.ModInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ModListResp}
 */
proto.pb.ModListResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ModListResp;
  return proto.pb.ModListResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ModListResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ModListResp}
 */
proto.pb.ModListResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.ModInfo;
      reader.readMessage(value,proto.pb.ModInfo.deserializeBinaryFromReader);
      msg.addModlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ModListResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ModListResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ModListResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ModListResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.ModInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ModInfo modList = 1;
 * @return {!Array<!proto.pb.ModInfo>}
 */
proto.pb.ModListResp.prototype.getModlistList = function() {
  return /** @type{!Array<!proto.pb.ModInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.ModInfo, 1));
};


/** @param {!Array<!proto.pb.ModInfo>} value */
proto.pb.ModListResp.prototype.setModlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.ModInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.ModInfo}
 */
proto.pb.ModListResp.prototype.addModlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.ModInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.ModListResp.prototype.clearModlistList = function() {
  this.setModlistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MokOpenRewardReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MokOpenRewardReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MokOpenRewardReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MokOpenRewardReq.toObject = function(includeInstance, msg) {
  var obj = {
    modid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MokOpenRewardReq}
 */
proto.pb.MokOpenRewardReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MokOpenRewardReq;
  return proto.pb.MokOpenRewardReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MokOpenRewardReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MokOpenRewardReq}
 */
proto.pb.MokOpenRewardReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setModid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MokOpenRewardReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MokOpenRewardReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MokOpenRewardReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MokOpenRewardReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 modId = 1;
 * @return {number}
 */
proto.pb.MokOpenRewardReq.prototype.getModid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.MokOpenRewardReq.prototype.setModid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.MokOpenRewardResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MokOpenRewardResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MokOpenRewardResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MokOpenRewardResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MokOpenRewardResp.toObject = function(includeInstance, msg) {
  var obj = {
    modid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rewardsList: jspb.Message.toObjectList(msg.getRewardsList(),
    proto.pb.ItemInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MokOpenRewardResp}
 */
proto.pb.MokOpenRewardResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MokOpenRewardResp;
  return proto.pb.MokOpenRewardResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MokOpenRewardResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MokOpenRewardResp}
 */
proto.pb.MokOpenRewardResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setModid(value);
      break;
    case 2:
      var value = new proto.pb.ItemInfo;
      reader.readMessage(value,proto.pb.ItemInfo.deserializeBinaryFromReader);
      msg.addRewards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MokOpenRewardResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MokOpenRewardResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MokOpenRewardResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MokOpenRewardResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRewardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pb.ItemInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 modId = 1;
 * @return {number}
 */
proto.pb.MokOpenRewardResp.prototype.getModid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.MokOpenRewardResp.prototype.setModid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated ItemInfo rewards = 2;
 * @return {!Array<!proto.pb.ItemInfo>}
 */
proto.pb.MokOpenRewardResp.prototype.getRewardsList = function() {
  return /** @type{!Array<!proto.pb.ItemInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.ItemInfo, 2));
};


/** @param {!Array<!proto.pb.ItemInfo>} value */
proto.pb.MokOpenRewardResp.prototype.setRewardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pb.ItemInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.ItemInfo}
 */
proto.pb.MokOpenRewardResp.prototype.addRewards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pb.ItemInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.MokOpenRewardResp.prototype.clearRewardsList = function() {
  this.setRewardsList([]);
};


goog.object.extend(exports, proto.pb);
