/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var baseinfo_pb = require('./baseinfo_pb.js');
goog.object.extend(proto, baseinfo_pb);
goog.exportSymbol('proto.pb.ChineseChessAgreeTimeReq', null, global);
goog.exportSymbol('proto.pb.ChineseChessAgreeTimeResp', null, global);
goog.exportSymbol('proto.pb.ChineseChessMoveReq', null, global);
goog.exportSymbol('proto.pb.ChineseChessMoveResp', null, global);
goog.exportSymbol('proto.pb.ChineseChessResult', null, global);
goog.exportSymbol('proto.pb.ChineseChessSceneResp', null, global);
goog.exportSymbol('proto.pb.ChineseChessSetTimeReq', null, global);
goog.exportSymbol('proto.pb.ChineseChessSetTimeResp', null, global);
goog.exportSymbol('proto.pb.ChineseChessStateFreeResp', null, global);
goog.exportSymbol('proto.pb.ChineseChessStateOpenResp', null, global);
goog.exportSymbol('proto.pb.ChineseChessStateOverResp', null, global);
goog.exportSymbol('proto.pb.ChineseChessStatePlayingResp', null, global);
goog.exportSymbol('proto.pb.ChineseChessStateStartResp', null, global);
goog.exportSymbol('proto.pb.XQBoardInfo', null, global);
goog.exportSymbol('proto.pb.XQGrid', null, global);
goog.exportSymbol('proto.pb.XQPiece', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.XQGrid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.XQGrid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.XQGrid.displayName = 'proto.pb.XQGrid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.XQBoardInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.XQBoardInfo.repeatedFields_, null);
};
goog.inherits(proto.pb.XQBoardInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.XQBoardInfo.displayName = 'proto.pb.XQBoardInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChineseChessResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ChineseChessResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChineseChessResult.displayName = 'proto.pb.ChineseChessResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChineseChessSceneResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ChineseChessSceneResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChineseChessSceneResp.displayName = 'proto.pb.ChineseChessSceneResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChineseChessStateFreeResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ChineseChessStateFreeResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChineseChessStateFreeResp.displayName = 'proto.pb.ChineseChessStateFreeResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChineseChessStateStartResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ChineseChessStateStartResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChineseChessStateStartResp.displayName = 'proto.pb.ChineseChessStateStartResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChineseChessStatePlayingResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ChineseChessStatePlayingResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChineseChessStatePlayingResp.displayName = 'proto.pb.ChineseChessStatePlayingResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChineseChessStateOpenResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ChineseChessStateOpenResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChineseChessStateOpenResp.displayName = 'proto.pb.ChineseChessStateOpenResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChineseChessStateOverResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ChineseChessStateOverResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChineseChessStateOverResp.displayName = 'proto.pb.ChineseChessStateOverResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChineseChessSetTimeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.ChineseChessSetTimeReq.repeatedFields_, null);
};
goog.inherits(proto.pb.ChineseChessSetTimeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChineseChessSetTimeReq.displayName = 'proto.pb.ChineseChessSetTimeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChineseChessSetTimeResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.ChineseChessSetTimeResp.repeatedFields_, null);
};
goog.inherits(proto.pb.ChineseChessSetTimeResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChineseChessSetTimeResp.displayName = 'proto.pb.ChineseChessSetTimeResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChineseChessAgreeTimeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ChineseChessAgreeTimeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChineseChessAgreeTimeReq.displayName = 'proto.pb.ChineseChessAgreeTimeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChineseChessAgreeTimeResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ChineseChessAgreeTimeResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChineseChessAgreeTimeResp.displayName = 'proto.pb.ChineseChessAgreeTimeResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChineseChessMoveReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ChineseChessMoveReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChineseChessMoveReq.displayName = 'proto.pb.ChineseChessMoveReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ChineseChessMoveResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ChineseChessMoveResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ChineseChessMoveResp.displayName = 'proto.pb.ChineseChessMoveResp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.XQGrid.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.XQGrid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.XQGrid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.XQGrid.toObject = function(includeInstance, msg) {
  var obj = {
    row: jspb.Message.getFieldWithDefault(msg, 1, 0),
    col: jspb.Message.getFieldWithDefault(msg, 2, 0),
    core: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.XQGrid}
 */
proto.pb.XQGrid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.XQGrid;
  return proto.pb.XQGrid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.XQGrid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.XQGrid}
 */
proto.pb.XQGrid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCol(value);
      break;
    case 3:
      var value = /** @type {!proto.pb.XQPiece} */ (reader.readEnum());
      msg.setCore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.XQGrid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.XQGrid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.XQGrid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.XQGrid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRow();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCol();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCore();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 row = 1;
 * @return {number}
 */
proto.pb.XQGrid.prototype.getRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.XQGrid.prototype.setRow = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 col = 2;
 * @return {number}
 */
proto.pb.XQGrid.prototype.getCol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.XQGrid.prototype.setCol = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional XQPiece core = 3;
 * @return {!proto.pb.XQPiece}
 */
proto.pb.XQGrid.prototype.getCore = function() {
  return /** @type {!proto.pb.XQPiece} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.pb.XQPiece} value */
proto.pb.XQGrid.prototype.setCore = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.XQBoardInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.XQBoardInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.XQBoardInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.XQBoardInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.XQBoardInfo.toObject = function(includeInstance, msg) {
  var obj = {
    cellsList: jspb.Message.toObjectList(msg.getCellsList(),
    proto.pb.XQGrid.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.XQBoardInfo}
 */
proto.pb.XQBoardInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.XQBoardInfo;
  return proto.pb.XQBoardInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.XQBoardInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.XQBoardInfo}
 */
proto.pb.XQBoardInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.XQGrid;
      reader.readMessage(value,proto.pb.XQGrid.deserializeBinaryFromReader);
      msg.addCells(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.XQBoardInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.XQBoardInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.XQBoardInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.XQBoardInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCellsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.XQGrid.serializeBinaryToWriter
    );
  }
};


/**
 * repeated XQGrid cells = 1;
 * @return {!Array<!proto.pb.XQGrid>}
 */
proto.pb.XQBoardInfo.prototype.getCellsList = function() {
  return /** @type{!Array<!proto.pb.XQGrid>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.XQGrid, 1));
};


/** @param {!Array<!proto.pb.XQGrid>} value */
proto.pb.XQBoardInfo.prototype.setCellsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.XQGrid=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.XQGrid}
 */
proto.pb.XQBoardInfo.prototype.addCells = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.XQGrid, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.XQBoardInfo.prototype.clearCellsList = function() {
  this.setCellsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChineseChessResult.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChineseChessResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChineseChessResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessResult.toObject = function(includeInstance, msg) {
  var obj = {
    redcamp: (f = msg.getRedcamp()) && baseinfo_pb.PlayerSimpleInfo.toObject(includeInstance, f),
    blackcamp: (f = msg.getBlackcamp()) && baseinfo_pb.PlayerSimpleInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChineseChessResult}
 */
proto.pb.ChineseChessResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChineseChessResult;
  return proto.pb.ChineseChessResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChineseChessResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChineseChessResult}
 */
proto.pb.ChineseChessResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new baseinfo_pb.PlayerSimpleInfo;
      reader.readMessage(value,baseinfo_pb.PlayerSimpleInfo.deserializeBinaryFromReader);
      msg.setRedcamp(value);
      break;
    case 2:
      var value = new baseinfo_pb.PlayerSimpleInfo;
      reader.readMessage(value,baseinfo_pb.PlayerSimpleInfo.deserializeBinaryFromReader);
      msg.setBlackcamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChineseChessResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChineseChessResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChineseChessResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRedcamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      baseinfo_pb.PlayerSimpleInfo.serializeBinaryToWriter
    );
  }
  f = message.getBlackcamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      baseinfo_pb.PlayerSimpleInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional PlayerSimpleInfo redCamp = 1;
 * @return {?proto.pb.PlayerSimpleInfo}
 */
proto.pb.ChineseChessResult.prototype.getRedcamp = function() {
  return /** @type{?proto.pb.PlayerSimpleInfo} */ (
    jspb.Message.getWrapperField(this, baseinfo_pb.PlayerSimpleInfo, 1));
};


/** @param {?proto.pb.PlayerSimpleInfo|undefined} value */
proto.pb.ChineseChessResult.prototype.setRedcamp = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChineseChessResult.prototype.clearRedcamp = function() {
  this.setRedcamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChineseChessResult.prototype.hasRedcamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PlayerSimpleInfo blackCamp = 2;
 * @return {?proto.pb.PlayerSimpleInfo}
 */
proto.pb.ChineseChessResult.prototype.getBlackcamp = function() {
  return /** @type{?proto.pb.PlayerSimpleInfo} */ (
    jspb.Message.getWrapperField(this, baseinfo_pb.PlayerSimpleInfo, 2));
};


/** @param {?proto.pb.PlayerSimpleInfo|undefined} value */
proto.pb.ChineseChessResult.prototype.setBlackcamp = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChineseChessResult.prototype.clearBlackcamp = function() {
  this.setBlackcamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChineseChessResult.prototype.hasBlackcamp = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChineseChessSceneResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChineseChessSceneResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChineseChessSceneResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessSceneResp.toObject = function(includeInstance, msg) {
  var obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    inning: jspb.Message.getFieldWithDefault(msg, 2, ""),
    board: (f = msg.getBoard()) && proto.pb.XQBoardInfo.toObject(includeInstance, f),
    redcamp: (f = msg.getRedcamp()) && baseinfo_pb.PlayerSimpleInfo.toObject(includeInstance, f),
    blackcamp: (f = msg.getBlackcamp()) && baseinfo_pb.PlayerSimpleInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChineseChessSceneResp}
 */
proto.pb.ChineseChessSceneResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChineseChessSceneResp;
  return proto.pb.ChineseChessSceneResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChineseChessSceneResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChineseChessSceneResp}
 */
proto.pb.ChineseChessSceneResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInning(value);
      break;
    case 3:
      var value = new proto.pb.XQBoardInfo;
      reader.readMessage(value,proto.pb.XQBoardInfo.deserializeBinaryFromReader);
      msg.setBoard(value);
      break;
    case 4:
      var value = new baseinfo_pb.PlayerSimpleInfo;
      reader.readMessage(value,baseinfo_pb.PlayerSimpleInfo.deserializeBinaryFromReader);
      msg.setRedcamp(value);
      break;
    case 5:
      var value = new baseinfo_pb.PlayerSimpleInfo;
      reader.readMessage(value,baseinfo_pb.PlayerSimpleInfo.deserializeBinaryFromReader);
      msg.setBlackcamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChineseChessSceneResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChineseChessSceneResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChineseChessSceneResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessSceneResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getInning();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBoard();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.XQBoardInfo.serializeBinaryToWriter
    );
  }
  f = message.getRedcamp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      baseinfo_pb.PlayerSimpleInfo.serializeBinaryToWriter
    );
  }
  f = message.getBlackcamp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      baseinfo_pb.PlayerSimpleInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 timeStamp = 1;
 * @return {number}
 */
proto.pb.ChineseChessSceneResp.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.ChineseChessSceneResp.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string inning = 2;
 * @return {string}
 */
proto.pb.ChineseChessSceneResp.prototype.getInning = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.ChineseChessSceneResp.prototype.setInning = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional XQBoardInfo board = 3;
 * @return {?proto.pb.XQBoardInfo}
 */
proto.pb.ChineseChessSceneResp.prototype.getBoard = function() {
  return /** @type{?proto.pb.XQBoardInfo} */ (
    jspb.Message.getWrapperField(this, proto.pb.XQBoardInfo, 3));
};


/** @param {?proto.pb.XQBoardInfo|undefined} value */
proto.pb.ChineseChessSceneResp.prototype.setBoard = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChineseChessSceneResp.prototype.clearBoard = function() {
  this.setBoard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChineseChessSceneResp.prototype.hasBoard = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PlayerSimpleInfo redCamp = 4;
 * @return {?proto.pb.PlayerSimpleInfo}
 */
proto.pb.ChineseChessSceneResp.prototype.getRedcamp = function() {
  return /** @type{?proto.pb.PlayerSimpleInfo} */ (
    jspb.Message.getWrapperField(this, baseinfo_pb.PlayerSimpleInfo, 4));
};


/** @param {?proto.pb.PlayerSimpleInfo|undefined} value */
proto.pb.ChineseChessSceneResp.prototype.setRedcamp = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChineseChessSceneResp.prototype.clearRedcamp = function() {
  this.setRedcamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChineseChessSceneResp.prototype.hasRedcamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PlayerSimpleInfo blackCamp = 5;
 * @return {?proto.pb.PlayerSimpleInfo}
 */
proto.pb.ChineseChessSceneResp.prototype.getBlackcamp = function() {
  return /** @type{?proto.pb.PlayerSimpleInfo} */ (
    jspb.Message.getWrapperField(this, baseinfo_pb.PlayerSimpleInfo, 5));
};


/** @param {?proto.pb.PlayerSimpleInfo|undefined} value */
proto.pb.ChineseChessSceneResp.prototype.setBlackcamp = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChineseChessSceneResp.prototype.clearBlackcamp = function() {
  this.setBlackcamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChineseChessSceneResp.prototype.hasBlackcamp = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChineseChessStateFreeResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChineseChessStateFreeResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChineseChessStateFreeResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessStateFreeResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && baseinfo_pb.TimeInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChineseChessStateFreeResp}
 */
proto.pb.ChineseChessStateFreeResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChineseChessStateFreeResp;
  return proto.pb.ChineseChessStateFreeResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChineseChessStateFreeResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChineseChessStateFreeResp}
 */
proto.pb.ChineseChessStateFreeResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new baseinfo_pb.TimeInfo;
      reader.readMessage(value,baseinfo_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChineseChessStateFreeResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChineseChessStateFreeResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChineseChessStateFreeResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessStateFreeResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      baseinfo_pb.TimeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.ChineseChessStateFreeResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, baseinfo_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.ChineseChessStateFreeResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChineseChessStateFreeResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChineseChessStateFreeResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChineseChessStateStartResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChineseChessStateStartResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChineseChessStateStartResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessStateStartResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && baseinfo_pb.TimeInfo.toObject(includeInstance, f),
    uid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChineseChessStateStartResp}
 */
proto.pb.ChineseChessStateStartResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChineseChessStateStartResp;
  return proto.pb.ChineseChessStateStartResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChineseChessStateStartResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChineseChessStateStartResp}
 */
proto.pb.ChineseChessStateStartResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new baseinfo_pb.TimeInfo;
      reader.readMessage(value,baseinfo_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChineseChessStateStartResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChineseChessStateStartResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChineseChessStateStartResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessStateStartResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      baseinfo_pb.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.ChineseChessStateStartResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, baseinfo_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.ChineseChessStateStartResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChineseChessStateStartResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChineseChessStateStartResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 uid = 2;
 * @return {number}
 */
proto.pb.ChineseChessStateStartResp.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.ChineseChessStateStartResp.prototype.setUid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChineseChessStatePlayingResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChineseChessStatePlayingResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChineseChessStatePlayingResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessStatePlayingResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && baseinfo_pb.TimeInfo.toObject(includeInstance, f),
    uid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nowboard: (f = msg.getNowboard()) && proto.pb.XQBoardInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChineseChessStatePlayingResp}
 */
proto.pb.ChineseChessStatePlayingResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChineseChessStatePlayingResp;
  return proto.pb.ChineseChessStatePlayingResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChineseChessStatePlayingResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChineseChessStatePlayingResp}
 */
proto.pb.ChineseChessStatePlayingResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new baseinfo_pb.TimeInfo;
      reader.readMessage(value,baseinfo_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 3:
      var value = new proto.pb.XQBoardInfo;
      reader.readMessage(value,proto.pb.XQBoardInfo.deserializeBinaryFromReader);
      msg.setNowboard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChineseChessStatePlayingResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChineseChessStatePlayingResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChineseChessStatePlayingResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessStatePlayingResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      baseinfo_pb.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getNowboard();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.XQBoardInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.ChineseChessStatePlayingResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, baseinfo_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.ChineseChessStatePlayingResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChineseChessStatePlayingResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChineseChessStatePlayingResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 uid = 2;
 * @return {number}
 */
proto.pb.ChineseChessStatePlayingResp.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.ChineseChessStatePlayingResp.prototype.setUid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional XQBoardInfo nowBoard = 3;
 * @return {?proto.pb.XQBoardInfo}
 */
proto.pb.ChineseChessStatePlayingResp.prototype.getNowboard = function() {
  return /** @type{?proto.pb.XQBoardInfo} */ (
    jspb.Message.getWrapperField(this, proto.pb.XQBoardInfo, 3));
};


/** @param {?proto.pb.XQBoardInfo|undefined} value */
proto.pb.ChineseChessStatePlayingResp.prototype.setNowboard = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChineseChessStatePlayingResp.prototype.clearNowboard = function() {
  this.setNowboard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChineseChessStatePlayingResp.prototype.hasNowboard = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChineseChessStateOpenResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChineseChessStateOpenResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChineseChessStateOpenResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessStateOpenResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && baseinfo_pb.TimeInfo.toObject(includeInstance, f),
    winuid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nowboard: (f = msg.getNowboard()) && proto.pb.XQBoardInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChineseChessStateOpenResp}
 */
proto.pb.ChineseChessStateOpenResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChineseChessStateOpenResp;
  return proto.pb.ChineseChessStateOpenResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChineseChessStateOpenResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChineseChessStateOpenResp}
 */
proto.pb.ChineseChessStateOpenResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new baseinfo_pb.TimeInfo;
      reader.readMessage(value,baseinfo_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWinuid(value);
      break;
    case 3:
      var value = new proto.pb.XQBoardInfo;
      reader.readMessage(value,proto.pb.XQBoardInfo.deserializeBinaryFromReader);
      msg.setNowboard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChineseChessStateOpenResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChineseChessStateOpenResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChineseChessStateOpenResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessStateOpenResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      baseinfo_pb.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getWinuid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getNowboard();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.XQBoardInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.ChineseChessStateOpenResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, baseinfo_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.ChineseChessStateOpenResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChineseChessStateOpenResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChineseChessStateOpenResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 winUid = 2;
 * @return {number}
 */
proto.pb.ChineseChessStateOpenResp.prototype.getWinuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.ChineseChessStateOpenResp.prototype.setWinuid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional XQBoardInfo nowBoard = 3;
 * @return {?proto.pb.XQBoardInfo}
 */
proto.pb.ChineseChessStateOpenResp.prototype.getNowboard = function() {
  return /** @type{?proto.pb.XQBoardInfo} */ (
    jspb.Message.getWrapperField(this, proto.pb.XQBoardInfo, 3));
};


/** @param {?proto.pb.XQBoardInfo|undefined} value */
proto.pb.ChineseChessStateOpenResp.prototype.setNowboard = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChineseChessStateOpenResp.prototype.clearNowboard = function() {
  this.setNowboard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChineseChessStateOpenResp.prototype.hasNowboard = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChineseChessStateOverResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChineseChessStateOverResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChineseChessStateOverResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessStateOverResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && baseinfo_pb.TimeInfo.toObject(includeInstance, f),
    result: (f = msg.getResult()) && proto.pb.ChineseChessResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChineseChessStateOverResp}
 */
proto.pb.ChineseChessStateOverResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChineseChessStateOverResp;
  return proto.pb.ChineseChessStateOverResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChineseChessStateOverResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChineseChessStateOverResp}
 */
proto.pb.ChineseChessStateOverResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new baseinfo_pb.TimeInfo;
      reader.readMessage(value,baseinfo_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    case 2:
      var value = new proto.pb.ChineseChessResult;
      reader.readMessage(value,proto.pb.ChineseChessResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChineseChessStateOverResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChineseChessStateOverResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChineseChessStateOverResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessStateOverResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      baseinfo_pb.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.ChineseChessResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.ChineseChessStateOverResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, baseinfo_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.ChineseChessStateOverResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChineseChessStateOverResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChineseChessStateOverResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChineseChessResult result = 2;
 * @return {?proto.pb.ChineseChessResult}
 */
proto.pb.ChineseChessStateOverResp.prototype.getResult = function() {
  return /** @type{?proto.pb.ChineseChessResult} */ (
    jspb.Message.getWrapperField(this, proto.pb.ChineseChessResult, 2));
};


/** @param {?proto.pb.ChineseChessResult|undefined} value */
proto.pb.ChineseChessStateOverResp.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChineseChessStateOverResp.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChineseChessStateOverResp.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.ChineseChessSetTimeReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChineseChessSetTimeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChineseChessSetTimeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChineseChessSetTimeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessSetTimeReq.toObject = function(includeInstance, msg) {
  var obj = {
    timeout: jspb.Message.getFieldWithDefault(msg, 1, 0),
    givecellsList: jspb.Message.toObjectList(msg.getGivecellsList(),
    proto.pb.XQGrid.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChineseChessSetTimeReq}
 */
proto.pb.ChineseChessSetTimeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChineseChessSetTimeReq;
  return proto.pb.ChineseChessSetTimeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChineseChessSetTimeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChineseChessSetTimeReq}
 */
proto.pb.ChineseChessSetTimeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeout(value);
      break;
    case 2:
      var value = new proto.pb.XQGrid;
      reader.readMessage(value,proto.pb.XQGrid.deserializeBinaryFromReader);
      msg.addGivecells(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChineseChessSetTimeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChineseChessSetTimeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChineseChessSetTimeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessSetTimeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getGivecellsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pb.XQGrid.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 timeout = 1;
 * @return {number}
 */
proto.pb.ChineseChessSetTimeReq.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.ChineseChessSetTimeReq.prototype.setTimeout = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated XQGrid giveCells = 2;
 * @return {!Array<!proto.pb.XQGrid>}
 */
proto.pb.ChineseChessSetTimeReq.prototype.getGivecellsList = function() {
  return /** @type{!Array<!proto.pb.XQGrid>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.XQGrid, 2));
};


/** @param {!Array<!proto.pb.XQGrid>} value */
proto.pb.ChineseChessSetTimeReq.prototype.setGivecellsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pb.XQGrid=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.XQGrid}
 */
proto.pb.ChineseChessSetTimeReq.prototype.addGivecells = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pb.XQGrid, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.ChineseChessSetTimeReq.prototype.clearGivecellsList = function() {
  this.setGivecellsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.ChineseChessSetTimeResp.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChineseChessSetTimeResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChineseChessSetTimeResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChineseChessSetTimeResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessSetTimeResp.toObject = function(includeInstance, msg) {
  var obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timeout: jspb.Message.getFieldWithDefault(msg, 2, 0),
    givecellsList: jspb.Message.toObjectList(msg.getGivecellsList(),
    proto.pb.XQGrid.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChineseChessSetTimeResp}
 */
proto.pb.ChineseChessSetTimeResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChineseChessSetTimeResp;
  return proto.pb.ChineseChessSetTimeResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChineseChessSetTimeResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChineseChessSetTimeResp}
 */
proto.pb.ChineseChessSetTimeResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeout(value);
      break;
    case 3:
      var value = new proto.pb.XQGrid;
      reader.readMessage(value,proto.pb.XQGrid.deserializeBinaryFromReader);
      msg.addGivecells(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChineseChessSetTimeResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChineseChessSetTimeResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChineseChessSetTimeResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessSetTimeResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getGivecellsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.pb.XQGrid.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 uid = 1;
 * @return {number}
 */
proto.pb.ChineseChessSetTimeResp.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.ChineseChessSetTimeResp.prototype.setUid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 timeout = 2;
 * @return {number}
 */
proto.pb.ChineseChessSetTimeResp.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.ChineseChessSetTimeResp.prototype.setTimeout = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated XQGrid giveCells = 3;
 * @return {!Array<!proto.pb.XQGrid>}
 */
proto.pb.ChineseChessSetTimeResp.prototype.getGivecellsList = function() {
  return /** @type{!Array<!proto.pb.XQGrid>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.XQGrid, 3));
};


/** @param {!Array<!proto.pb.XQGrid>} value */
proto.pb.ChineseChessSetTimeResp.prototype.setGivecellsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pb.XQGrid=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.XQGrid}
 */
proto.pb.ChineseChessSetTimeResp.prototype.addGivecells = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pb.XQGrid, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.ChineseChessSetTimeResp.prototype.clearGivecellsList = function() {
  this.setGivecellsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChineseChessAgreeTimeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChineseChessAgreeTimeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChineseChessAgreeTimeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessAgreeTimeReq.toObject = function(includeInstance, msg) {
  var obj = {
    isagree: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChineseChessAgreeTimeReq}
 */
proto.pb.ChineseChessAgreeTimeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChineseChessAgreeTimeReq;
  return proto.pb.ChineseChessAgreeTimeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChineseChessAgreeTimeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChineseChessAgreeTimeReq}
 */
proto.pb.ChineseChessAgreeTimeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsagree(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChineseChessAgreeTimeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChineseChessAgreeTimeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChineseChessAgreeTimeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessAgreeTimeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsagree();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool isAgree = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.ChineseChessAgreeTimeReq.prototype.getIsagree = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.pb.ChineseChessAgreeTimeReq.prototype.setIsagree = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChineseChessAgreeTimeResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChineseChessAgreeTimeResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChineseChessAgreeTimeResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessAgreeTimeResp.toObject = function(includeInstance, msg) {
  var obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isagree: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChineseChessAgreeTimeResp}
 */
proto.pb.ChineseChessAgreeTimeResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChineseChessAgreeTimeResp;
  return proto.pb.ChineseChessAgreeTimeResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChineseChessAgreeTimeResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChineseChessAgreeTimeResp}
 */
proto.pb.ChineseChessAgreeTimeResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsagree(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChineseChessAgreeTimeResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChineseChessAgreeTimeResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChineseChessAgreeTimeResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessAgreeTimeResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getIsagree();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int64 uid = 1;
 * @return {number}
 */
proto.pb.ChineseChessAgreeTimeResp.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.ChineseChessAgreeTimeResp.prototype.setUid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool isAgree = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.ChineseChessAgreeTimeResp.prototype.getIsagree = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.pb.ChineseChessAgreeTimeResp.prototype.setIsagree = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChineseChessMoveReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChineseChessMoveReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChineseChessMoveReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessMoveReq.toObject = function(includeInstance, msg) {
  var obj = {
    origin: (f = msg.getOrigin()) && proto.pb.XQGrid.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.pb.XQGrid.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChineseChessMoveReq}
 */
proto.pb.ChineseChessMoveReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChineseChessMoveReq;
  return proto.pb.ChineseChessMoveReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChineseChessMoveReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChineseChessMoveReq}
 */
proto.pb.ChineseChessMoveReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.XQGrid;
      reader.readMessage(value,proto.pb.XQGrid.deserializeBinaryFromReader);
      msg.setOrigin(value);
      break;
    case 2:
      var value = new proto.pb.XQGrid;
      reader.readMessage(value,proto.pb.XQGrid.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChineseChessMoveReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChineseChessMoveReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChineseChessMoveReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessMoveReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrigin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.XQGrid.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.XQGrid.serializeBinaryToWriter
    );
  }
};


/**
 * optional XQGrid origin = 1;
 * @return {?proto.pb.XQGrid}
 */
proto.pb.ChineseChessMoveReq.prototype.getOrigin = function() {
  return /** @type{?proto.pb.XQGrid} */ (
    jspb.Message.getWrapperField(this, proto.pb.XQGrid, 1));
};


/** @param {?proto.pb.XQGrid|undefined} value */
proto.pb.ChineseChessMoveReq.prototype.setOrigin = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChineseChessMoveReq.prototype.clearOrigin = function() {
  this.setOrigin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChineseChessMoveReq.prototype.hasOrigin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional XQGrid target = 2;
 * @return {?proto.pb.XQGrid}
 */
proto.pb.ChineseChessMoveReq.prototype.getTarget = function() {
  return /** @type{?proto.pb.XQGrid} */ (
    jspb.Message.getWrapperField(this, proto.pb.XQGrid, 2));
};


/** @param {?proto.pb.XQGrid|undefined} value */
proto.pb.ChineseChessMoveReq.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChineseChessMoveReq.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChineseChessMoveReq.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ChineseChessMoveResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ChineseChessMoveResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ChineseChessMoveResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessMoveResp.toObject = function(includeInstance, msg) {
  var obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    origin: (f = msg.getOrigin()) && proto.pb.XQGrid.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.pb.XQGrid.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ChineseChessMoveResp}
 */
proto.pb.ChineseChessMoveResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ChineseChessMoveResp;
  return proto.pb.ChineseChessMoveResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ChineseChessMoveResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ChineseChessMoveResp}
 */
proto.pb.ChineseChessMoveResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 2:
      var value = new proto.pb.XQGrid;
      reader.readMessage(value,proto.pb.XQGrid.deserializeBinaryFromReader);
      msg.setOrigin(value);
      break;
    case 3:
      var value = new proto.pb.XQGrid;
      reader.readMessage(value,proto.pb.XQGrid.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ChineseChessMoveResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ChineseChessMoveResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ChineseChessMoveResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ChineseChessMoveResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getOrigin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.XQGrid.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.XQGrid.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 uid = 1;
 * @return {number}
 */
proto.pb.ChineseChessMoveResp.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.ChineseChessMoveResp.prototype.setUid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional XQGrid origin = 2;
 * @return {?proto.pb.XQGrid}
 */
proto.pb.ChineseChessMoveResp.prototype.getOrigin = function() {
  return /** @type{?proto.pb.XQGrid} */ (
    jspb.Message.getWrapperField(this, proto.pb.XQGrid, 2));
};


/** @param {?proto.pb.XQGrid|undefined} value */
proto.pb.ChineseChessMoveResp.prototype.setOrigin = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChineseChessMoveResp.prototype.clearOrigin = function() {
  this.setOrigin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChineseChessMoveResp.prototype.hasOrigin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional XQGrid target = 3;
 * @return {?proto.pb.XQGrid}
 */
proto.pb.ChineseChessMoveResp.prototype.getTarget = function() {
  return /** @type{?proto.pb.XQGrid} */ (
    jspb.Message.getWrapperField(this, proto.pb.XQGrid, 3));
};


/** @param {?proto.pb.XQGrid|undefined} value */
proto.pb.ChineseChessMoveResp.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.ChineseChessMoveResp.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ChineseChessMoveResp.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.pb.XQPiece = {
  NOXQPIECE: 0,
  REDBING: 1,
  REDPAO: 2,
  REDJU: 3,
  REDMA: 4,
  REDXIANG: 5,
  REDSHI: 6,
  REDSHUAI: 7,
  BLACKZU: 8,
  BLACKPAO: 9,
  BLACKJU: 10,
  BLACKMA: 11,
  BLACKXIANG: 12,
  BLACKSHI: 13,
  BLACKJIANG: 14
};

goog.object.extend(exports, proto.pb);
