/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var comm_pb = require('./comm_pb.js');
goog.object.extend(proto, comm_pb);
goog.exportSymbol('proto.pb.FriendApplyBatchDealReq', null, global);
goog.exportSymbol('proto.pb.FriendApplyBatchDealResp', null, global);
goog.exportSymbol('proto.pb.FriendApplyBatchReq', null, global);
goog.exportSymbol('proto.pb.FriendApplyBatchResp', null, global);
goog.exportSymbol('proto.pb.FriendApplyDealReq', null, global);
goog.exportSymbol('proto.pb.FriendApplyDealResp', null, global);
goog.exportSymbol('proto.pb.FriendApplyListReq', null, global);
goog.exportSymbol('proto.pb.FriendApplyListResp', null, global);
goog.exportSymbol('proto.pb.FriendApplyReq', null, global);
goog.exportSymbol('proto.pb.FriendApplyResp', null, global);
goog.exportSymbol('proto.pb.FriendDelReq', null, global);
goog.exportSymbol('proto.pb.FriendDelResp', null, global);
goog.exportSymbol('proto.pb.FriendListReq', null, global);
goog.exportSymbol('proto.pb.FriendListResp', null, global);
goog.exportSymbol('proto.pb.FriendOnlineReq', null, global);
goog.exportSymbol('proto.pb.FriendOnlineResp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.FriendOnlineReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.FriendOnlineReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FriendOnlineReq.displayName = 'proto.pb.FriendOnlineReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.FriendOnlineResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.FriendOnlineResp.repeatedFields_, null);
};
goog.inherits(proto.pb.FriendOnlineResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FriendOnlineResp.displayName = 'proto.pb.FriendOnlineResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.FriendListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.FriendListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FriendListReq.displayName = 'proto.pb.FriendListReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.FriendListResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.FriendListResp.repeatedFields_, null);
};
goog.inherits(proto.pb.FriendListResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FriendListResp.displayName = 'proto.pb.FriendListResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.FriendDelReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.FriendDelReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FriendDelReq.displayName = 'proto.pb.FriendDelReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.FriendDelResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.FriendDelResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FriendDelResp.displayName = 'proto.pb.FriendDelResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.FriendApplyReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.FriendApplyReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FriendApplyReq.displayName = 'proto.pb.FriendApplyReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.FriendApplyResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.FriendApplyResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FriendApplyResp.displayName = 'proto.pb.FriendApplyResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.FriendApplyBatchReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.FriendApplyBatchReq.repeatedFields_, null);
};
goog.inherits(proto.pb.FriendApplyBatchReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FriendApplyBatchReq.displayName = 'proto.pb.FriendApplyBatchReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.FriendApplyBatchResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.FriendApplyBatchResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FriendApplyBatchResp.displayName = 'proto.pb.FriendApplyBatchResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.FriendApplyListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.FriendApplyListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FriendApplyListReq.displayName = 'proto.pb.FriendApplyListReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.FriendApplyListResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.FriendApplyListResp.repeatedFields_, null);
};
goog.inherits(proto.pb.FriendApplyListResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FriendApplyListResp.displayName = 'proto.pb.FriendApplyListResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.FriendApplyDealReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.FriendApplyDealReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FriendApplyDealReq.displayName = 'proto.pb.FriendApplyDealReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.FriendApplyDealResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.FriendApplyDealResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FriendApplyDealResp.displayName = 'proto.pb.FriendApplyDealResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.FriendApplyBatchDealReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.FriendApplyBatchDealReq.repeatedFields_, null);
};
goog.inherits(proto.pb.FriendApplyBatchDealReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FriendApplyBatchDealReq.displayName = 'proto.pb.FriendApplyBatchDealReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.FriendApplyBatchDealResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.FriendApplyBatchDealResp.repeatedFields_, null);
};
goog.inherits(proto.pb.FriendApplyBatchDealResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.FriendApplyBatchDealResp.displayName = 'proto.pb.FriendApplyBatchDealResp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.FriendOnlineReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.FriendOnlineReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.FriendOnlineReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendOnlineReq.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FriendOnlineReq}
 */
proto.pb.FriendOnlineReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FriendOnlineReq;
  return proto.pb.FriendOnlineReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FriendOnlineReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FriendOnlineReq}
 */
proto.pb.FriendOnlineReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.FriendOnlineReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.FriendOnlineReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FriendOnlineReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendOnlineReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.FriendOnlineResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.FriendOnlineResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.FriendOnlineResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.FriendOnlineResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendOnlineResp.toObject = function(includeInstance, msg) {
  var obj = {
    uidlistList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FriendOnlineResp}
 */
proto.pb.FriendOnlineResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FriendOnlineResp;
  return proto.pb.FriendOnlineResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FriendOnlineResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FriendOnlineResp}
 */
proto.pb.FriendOnlineResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setUidlistList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.FriendOnlineResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.FriendOnlineResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FriendOnlineResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendOnlineResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUidlistList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
};


/**
 * repeated int64 uidList = 1;
 * @return {!Array<number>}
 */
proto.pb.FriendOnlineResp.prototype.getUidlistList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.pb.FriendOnlineResp.prototype.setUidlistList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.FriendOnlineResp.prototype.addUidlist = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.FriendOnlineResp.prototype.clearUidlistList = function() {
  this.setUidlistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.FriendListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.FriendListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.FriendListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendListReq.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FriendListReq}
 */
proto.pb.FriendListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FriendListReq;
  return proto.pb.FriendListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FriendListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FriendListReq}
 */
proto.pb.FriendListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.FriendListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.FriendListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FriendListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.FriendListResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.FriendListResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.FriendListResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.FriendListResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendListResp.toObject = function(includeInstance, msg) {
  var obj = {
    dataarrList: jspb.Message.toObjectList(msg.getDataarrList(),
    comm_pb.UserInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FriendListResp}
 */
proto.pb.FriendListResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FriendListResp;
  return proto.pb.FriendListResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FriendListResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FriendListResp}
 */
proto.pb.FriendListResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new comm_pb.UserInfo;
      reader.readMessage(value,comm_pb.UserInfo.deserializeBinaryFromReader);
      msg.addDataarr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.FriendListResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.FriendListResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FriendListResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendListResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataarrList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      comm_pb.UserInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UserInfo dataArr = 1;
 * @return {!Array<!proto.pb.UserInfo>}
 */
proto.pb.FriendListResp.prototype.getDataarrList = function() {
  return /** @type{!Array<!proto.pb.UserInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, comm_pb.UserInfo, 1));
};


/** @param {!Array<!proto.pb.UserInfo>} value */
proto.pb.FriendListResp.prototype.setDataarrList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.UserInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.UserInfo}
 */
proto.pb.FriendListResp.prototype.addDataarr = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.UserInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.FriendListResp.prototype.clearDataarrList = function() {
  this.setDataarrList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.FriendDelReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.FriendDelReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.FriendDelReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendDelReq.toObject = function(includeInstance, msg) {
  var obj = {
    frienduid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FriendDelReq}
 */
proto.pb.FriendDelReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FriendDelReq;
  return proto.pb.FriendDelReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FriendDelReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FriendDelReq}
 */
proto.pb.FriendDelReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrienduid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.FriendDelReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.FriendDelReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FriendDelReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendDelReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrienduid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 friendUid = 1;
 * @return {number}
 */
proto.pb.FriendDelReq.prototype.getFrienduid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.FriendDelReq.prototype.setFrienduid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.FriendDelResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.FriendDelResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.FriendDelResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendDelResp.toObject = function(includeInstance, msg) {
  var obj = {
    frienduid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FriendDelResp}
 */
proto.pb.FriendDelResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FriendDelResp;
  return proto.pb.FriendDelResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FriendDelResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FriendDelResp}
 */
proto.pb.FriendDelResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrienduid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.FriendDelResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.FriendDelResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FriendDelResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendDelResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrienduid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 friendUid = 1;
 * @return {number}
 */
proto.pb.FriendDelResp.prototype.getFrienduid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.FriendDelResp.prototype.setFrienduid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.FriendApplyReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.FriendApplyReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.FriendApplyReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyReq.toObject = function(includeInstance, msg) {
  var obj = {
    senderuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    targetuid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cont: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FriendApplyReq}
 */
proto.pb.FriendApplyReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FriendApplyReq;
  return proto.pb.FriendApplyReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FriendApplyReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FriendApplyReq}
 */
proto.pb.FriendApplyReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTargetuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCont(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.FriendApplyReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.FriendApplyReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FriendApplyReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderuid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTargetuid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCont();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 senderUid = 1;
 * @return {number}
 */
proto.pb.FriendApplyReq.prototype.getSenderuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.FriendApplyReq.prototype.setSenderuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 targetUid = 2;
 * @return {number}
 */
proto.pb.FriendApplyReq.prototype.getTargetuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.FriendApplyReq.prototype.setTargetuid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string cont = 3;
 * @return {string}
 */
proto.pb.FriendApplyReq.prototype.getCont = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.FriendApplyReq.prototype.setCont = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.FriendApplyResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.FriendApplyResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.FriendApplyResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyResp.toObject = function(includeInstance, msg) {
  var obj = {
    applydata: (f = msg.getApplydata()) && proto.pb.FriendApplyReq.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FriendApplyResp}
 */
proto.pb.FriendApplyResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FriendApplyResp;
  return proto.pb.FriendApplyResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FriendApplyResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FriendApplyResp}
 */
proto.pb.FriendApplyResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.FriendApplyReq;
      reader.readMessage(value,proto.pb.FriendApplyReq.deserializeBinaryFromReader);
      msg.setApplydata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.FriendApplyResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.FriendApplyResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FriendApplyResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplydata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.FriendApplyReq.serializeBinaryToWriter
    );
  }
};


/**
 * optional FriendApplyReq applyData = 1;
 * @return {?proto.pb.FriendApplyReq}
 */
proto.pb.FriendApplyResp.prototype.getApplydata = function() {
  return /** @type{?proto.pb.FriendApplyReq} */ (
    jspb.Message.getWrapperField(this, proto.pb.FriendApplyReq, 1));
};


/** @param {?proto.pb.FriendApplyReq|undefined} value */
proto.pb.FriendApplyResp.prototype.setApplydata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.FriendApplyResp.prototype.clearApplydata = function() {
  this.setApplydata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.FriendApplyResp.prototype.hasApplydata = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.FriendApplyBatchReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.FriendApplyBatchReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.FriendApplyBatchReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.FriendApplyBatchReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyBatchReq.toObject = function(includeInstance, msg) {
  var obj = {
    senderuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    targetuidarrList: jspb.Message.getRepeatedField(msg, 2),
    cont: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FriendApplyBatchReq}
 */
proto.pb.FriendApplyBatchReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FriendApplyBatchReq;
  return proto.pb.FriendApplyBatchReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FriendApplyBatchReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FriendApplyBatchReq}
 */
proto.pb.FriendApplyBatchReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderuid(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setTargetuidarrList(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCont(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.FriendApplyBatchReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.FriendApplyBatchReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FriendApplyBatchReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyBatchReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderuid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTargetuidarrList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
  f = message.getCont();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 senderUid = 1;
 * @return {number}
 */
proto.pb.FriendApplyBatchReq.prototype.getSenderuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.FriendApplyBatchReq.prototype.setSenderuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated int64 targetUidArr = 2;
 * @return {!Array<number>}
 */
proto.pb.FriendApplyBatchReq.prototype.getTargetuidarrList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.pb.FriendApplyBatchReq.prototype.setTargetuidarrList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.FriendApplyBatchReq.prototype.addTargetuidarr = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.FriendApplyBatchReq.prototype.clearTargetuidarrList = function() {
  this.setTargetuidarrList([]);
};


/**
 * optional string cont = 3;
 * @return {string}
 */
proto.pb.FriendApplyBatchReq.prototype.getCont = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.FriendApplyBatchReq.prototype.setCont = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.FriendApplyBatchResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.FriendApplyBatchResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.FriendApplyBatchResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyBatchResp.toObject = function(includeInstance, msg) {
  var obj = {
    applydata: (f = msg.getApplydata()) && proto.pb.FriendApplyBatchReq.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FriendApplyBatchResp}
 */
proto.pb.FriendApplyBatchResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FriendApplyBatchResp;
  return proto.pb.FriendApplyBatchResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FriendApplyBatchResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FriendApplyBatchResp}
 */
proto.pb.FriendApplyBatchResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.FriendApplyBatchReq;
      reader.readMessage(value,proto.pb.FriendApplyBatchReq.deserializeBinaryFromReader);
      msg.setApplydata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.FriendApplyBatchResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.FriendApplyBatchResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FriendApplyBatchResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyBatchResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplydata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.FriendApplyBatchReq.serializeBinaryToWriter
    );
  }
};


/**
 * optional FriendApplyBatchReq applyData = 1;
 * @return {?proto.pb.FriendApplyBatchReq}
 */
proto.pb.FriendApplyBatchResp.prototype.getApplydata = function() {
  return /** @type{?proto.pb.FriendApplyBatchReq} */ (
    jspb.Message.getWrapperField(this, proto.pb.FriendApplyBatchReq, 1));
};


/** @param {?proto.pb.FriendApplyBatchReq|undefined} value */
proto.pb.FriendApplyBatchResp.prototype.setApplydata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.FriendApplyBatchResp.prototype.clearApplydata = function() {
  this.setApplydata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.FriendApplyBatchResp.prototype.hasApplydata = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.FriendApplyListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.FriendApplyListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.FriendApplyListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyListReq.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FriendApplyListReq}
 */
proto.pb.FriendApplyListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FriendApplyListReq;
  return proto.pb.FriendApplyListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FriendApplyListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FriendApplyListReq}
 */
proto.pb.FriendApplyListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.FriendApplyListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.FriendApplyListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FriendApplyListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.FriendApplyListResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.FriendApplyListResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.FriendApplyListResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.FriendApplyListResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyListResp.toObject = function(includeInstance, msg) {
  var obj = {
    dataarrList: jspb.Message.toObjectList(msg.getDataarrList(),
    comm_pb.UserInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FriendApplyListResp}
 */
proto.pb.FriendApplyListResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FriendApplyListResp;
  return proto.pb.FriendApplyListResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FriendApplyListResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FriendApplyListResp}
 */
proto.pb.FriendApplyListResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new comm_pb.UserInfo;
      reader.readMessage(value,comm_pb.UserInfo.deserializeBinaryFromReader);
      msg.addDataarr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.FriendApplyListResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.FriendApplyListResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FriendApplyListResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyListResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataarrList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      comm_pb.UserInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UserInfo dataArr = 1;
 * @return {!Array<!proto.pb.UserInfo>}
 */
proto.pb.FriendApplyListResp.prototype.getDataarrList = function() {
  return /** @type{!Array<!proto.pb.UserInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, comm_pb.UserInfo, 1));
};


/** @param {!Array<!proto.pb.UserInfo>} value */
proto.pb.FriendApplyListResp.prototype.setDataarrList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.UserInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.UserInfo}
 */
proto.pb.FriendApplyListResp.prototype.addDataarr = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.UserInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.FriendApplyListResp.prototype.clearDataarrList = function() {
  this.setDataarrList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.FriendApplyDealReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.FriendApplyDealReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.FriendApplyDealReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyDealReq.toObject = function(includeInstance, msg) {
  var obj = {
    senderuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isagree: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FriendApplyDealReq}
 */
proto.pb.FriendApplyDealReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FriendApplyDealReq;
  return proto.pb.FriendApplyDealReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FriendApplyDealReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FriendApplyDealReq}
 */
proto.pb.FriendApplyDealReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsagree(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.FriendApplyDealReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.FriendApplyDealReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FriendApplyDealReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyDealReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderuid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getIsagree();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 senderUid = 1;
 * @return {number}
 */
proto.pb.FriendApplyDealReq.prototype.getSenderuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.FriendApplyDealReq.prototype.setSenderuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 isAgree = 2;
 * @return {number}
 */
proto.pb.FriendApplyDealReq.prototype.getIsagree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.FriendApplyDealReq.prototype.setIsagree = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.FriendApplyDealResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.FriendApplyDealResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.FriendApplyDealResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyDealResp.toObject = function(includeInstance, msg) {
  var obj = {
    senderuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    targetuid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isagree: jspb.Message.getFieldWithDefault(msg, 3, 0),
    frienddata: (f = msg.getFrienddata()) && comm_pb.UserInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FriendApplyDealResp}
 */
proto.pb.FriendApplyDealResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FriendApplyDealResp;
  return proto.pb.FriendApplyDealResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FriendApplyDealResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FriendApplyDealResp}
 */
proto.pb.FriendApplyDealResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTargetuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsagree(value);
      break;
    case 4:
      var value = new comm_pb.UserInfo;
      reader.readMessage(value,comm_pb.UserInfo.deserializeBinaryFromReader);
      msg.setFrienddata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.FriendApplyDealResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.FriendApplyDealResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FriendApplyDealResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyDealResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderuid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTargetuid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getIsagree();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFrienddata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      comm_pb.UserInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 senderUid = 1;
 * @return {number}
 */
proto.pb.FriendApplyDealResp.prototype.getSenderuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.FriendApplyDealResp.prototype.setSenderuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 targetUid = 2;
 * @return {number}
 */
proto.pb.FriendApplyDealResp.prototype.getTargetuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.FriendApplyDealResp.prototype.setTargetuid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 isAgree = 3;
 * @return {number}
 */
proto.pb.FriendApplyDealResp.prototype.getIsagree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.FriendApplyDealResp.prototype.setIsagree = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional UserInfo friendData = 4;
 * @return {?proto.pb.UserInfo}
 */
proto.pb.FriendApplyDealResp.prototype.getFrienddata = function() {
  return /** @type{?proto.pb.UserInfo} */ (
    jspb.Message.getWrapperField(this, comm_pb.UserInfo, 4));
};


/** @param {?proto.pb.UserInfo|undefined} value */
proto.pb.FriendApplyDealResp.prototype.setFrienddata = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.FriendApplyDealResp.prototype.clearFrienddata = function() {
  this.setFrienddata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.FriendApplyDealResp.prototype.hasFrienddata = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.FriendApplyBatchDealReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.FriendApplyBatchDealReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.FriendApplyBatchDealReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.FriendApplyBatchDealReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyBatchDealReq.toObject = function(includeInstance, msg) {
  var obj = {
    senderuidarrList: jspb.Message.getRepeatedField(msg, 1),
    isagree: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FriendApplyBatchDealReq}
 */
proto.pb.FriendApplyBatchDealReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FriendApplyBatchDealReq;
  return proto.pb.FriendApplyBatchDealReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FriendApplyBatchDealReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FriendApplyBatchDealReq}
 */
proto.pb.FriendApplyBatchDealReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setSenderuidarrList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsagree(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.FriendApplyBatchDealReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.FriendApplyBatchDealReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FriendApplyBatchDealReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyBatchDealReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderuidarrList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
  f = message.getIsagree();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated int64 senderUidArr = 1;
 * @return {!Array<number>}
 */
proto.pb.FriendApplyBatchDealReq.prototype.getSenderuidarrList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.pb.FriendApplyBatchDealReq.prototype.setSenderuidarrList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.FriendApplyBatchDealReq.prototype.addSenderuidarr = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.FriendApplyBatchDealReq.prototype.clearSenderuidarrList = function() {
  this.setSenderuidarrList([]);
};


/**
 * optional int32 isAgree = 2;
 * @return {number}
 */
proto.pb.FriendApplyBatchDealReq.prototype.getIsagree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.FriendApplyBatchDealReq.prototype.setIsagree = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.FriendApplyBatchDealResp.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.FriendApplyBatchDealResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.FriendApplyBatchDealResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.FriendApplyBatchDealResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyBatchDealResp.toObject = function(includeInstance, msg) {
  var obj = {
    targetuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    senderuidarrList: jspb.Message.getRepeatedField(msg, 2),
    isagree: jspb.Message.getFieldWithDefault(msg, 3, 0),
    friendarrList: jspb.Message.toObjectList(msg.getFriendarrList(),
    comm_pb.UserInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.FriendApplyBatchDealResp}
 */
proto.pb.FriendApplyBatchDealResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.FriendApplyBatchDealResp;
  return proto.pb.FriendApplyBatchDealResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.FriendApplyBatchDealResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.FriendApplyBatchDealResp}
 */
proto.pb.FriendApplyBatchDealResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTargetuid(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setSenderuidarrList(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIsagree(value);
      break;
    case 4:
      var value = new comm_pb.UserInfo;
      reader.readMessage(value,comm_pb.UserInfo.deserializeBinaryFromReader);
      msg.addFriendarr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.FriendApplyBatchDealResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.FriendApplyBatchDealResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.FriendApplyBatchDealResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.FriendApplyBatchDealResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetuid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSenderuidarrList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
  f = message.getIsagree();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFriendarrList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      comm_pb.UserInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 targetUid = 1;
 * @return {number}
 */
proto.pb.FriendApplyBatchDealResp.prototype.getTargetuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.FriendApplyBatchDealResp.prototype.setTargetuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated int64 senderUidArr = 2;
 * @return {!Array<number>}
 */
proto.pb.FriendApplyBatchDealResp.prototype.getSenderuidarrList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.pb.FriendApplyBatchDealResp.prototype.setSenderuidarrList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.FriendApplyBatchDealResp.prototype.addSenderuidarr = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.FriendApplyBatchDealResp.prototype.clearSenderuidarrList = function() {
  this.setSenderuidarrList([]);
};


/**
 * optional int32 isAgree = 3;
 * @return {number}
 */
proto.pb.FriendApplyBatchDealResp.prototype.getIsagree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.FriendApplyBatchDealResp.prototype.setIsagree = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated UserInfo friendArr = 4;
 * @return {!Array<!proto.pb.UserInfo>}
 */
proto.pb.FriendApplyBatchDealResp.prototype.getFriendarrList = function() {
  return /** @type{!Array<!proto.pb.UserInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, comm_pb.UserInfo, 4));
};


/** @param {!Array<!proto.pb.UserInfo>} value */
proto.pb.FriendApplyBatchDealResp.prototype.setFriendarrList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.pb.UserInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.UserInfo}
 */
proto.pb.FriendApplyBatchDealResp.prototype.addFriendarr = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.pb.UserInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.FriendApplyBatchDealResp.prototype.clearFriendarrList = function() {
  this.setFriendarrList([]);
};


goog.object.extend(exports, proto.pb);
