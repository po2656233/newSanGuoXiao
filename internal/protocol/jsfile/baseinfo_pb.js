/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pb.AreaInfo', null, global);
goog.exportSymbol('proto.pb.CardInfo', null, global);
goog.exportSymbol('proto.pb.ClassItem', null, global);
goog.exportSymbol('proto.pb.ClassList', null, global);
goog.exportSymbol('proto.pb.Direct', null, global);
goog.exportSymbol('proto.pb.EmailInfo', null, global);
goog.exportSymbol('proto.pb.GameInfo', null, global);
goog.exportSymbol('proto.pb.GameList', null, global);
goog.exportSymbol('proto.pb.GameScene', null, global);
goog.exportSymbol('proto.pb.GameState', null, global);
goog.exportSymbol('proto.pb.GoodsInfo', null, global);
goog.exportSymbol('proto.pb.GoodsList', null, global);
goog.exportSymbol('proto.pb.HeroInfo', null, global);
goog.exportSymbol('proto.pb.InningInfo', null, global);
goog.exportSymbol('proto.pb.InningList', null, global);
goog.exportSymbol('proto.pb.KnapsackInfo', null, global);
goog.exportSymbol('proto.pb.MJOperate', null, global);
goog.exportSymbol('proto.pb.MasterInfo', null, global);
goog.exportSymbol('proto.pb.NTFLevel', null, global);
goog.exportSymbol('proto.pb.NodeState', null, global);
goog.exportSymbol('proto.pb.PHZOperate', null, global);
goog.exportSymbol('proto.pb.PlayerInfo', null, global);
goog.exportSymbol('proto.pb.PlayerList', null, global);
goog.exportSymbol('proto.pb.PlayerState', null, global);
goog.exportSymbol('proto.pb.RoomInfo', null, global);
goog.exportSymbol('proto.pb.RoomList', null, global);
goog.exportSymbol('proto.pb.TableInfo', null, global);
goog.exportSymbol('proto.pb.TableList', null, global);
goog.exportSymbol('proto.pb.TaskItem', null, global);
goog.exportSymbol('proto.pb.TaskList', null, global);
goog.exportSymbol('proto.pb.TimeInfo', null, global);
goog.exportSymbol('proto.pb.UserInfo', null, global);
goog.exportSymbol('proto.pb.WeaponInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.UserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.UserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.UserInfo.displayName = 'proto.pb.UserInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.PlayerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.PlayerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.PlayerInfo.displayName = 'proto.pb.PlayerInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.HeroInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.HeroInfo.repeatedFields_, null);
};
goog.inherits(proto.pb.HeroInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.HeroInfo.displayName = 'proto.pb.HeroInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.WeaponInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.WeaponInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.WeaponInfo.displayName = 'proto.pb.WeaponInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.GoodsInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.GoodsInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.GoodsInfo.displayName = 'proto.pb.GoodsInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.KnapsackInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.KnapsackInfo.repeatedFields_, null);
};
goog.inherits(proto.pb.KnapsackInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.KnapsackInfo.displayName = 'proto.pb.KnapsackInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.EmailInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.EmailInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.EmailInfo.displayName = 'proto.pb.EmailInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.RoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.RoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.RoomInfo.displayName = 'proto.pb.RoomInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.TableInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.TableInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.TableInfo.displayName = 'proto.pb.TableInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.TimeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.TimeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.TimeInfo.displayName = 'proto.pb.TimeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.InningInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.InningInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.InningInfo.displayName = 'proto.pb.InningInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.CardInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.CardInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.CardInfo.displayName = 'proto.pb.CardInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.AreaInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.AreaInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.AreaInfo.displayName = 'proto.pb.AreaInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.GameInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.GameInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.GameInfo.displayName = 'proto.pb.GameInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.MasterInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.MasterInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.MasterInfo.displayName = 'proto.pb.MasterInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.TaskItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.TaskItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.TaskItem.displayName = 'proto.pb.TaskItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ClassItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ClassItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ClassItem.displayName = 'proto.pb.ClassItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.TaskList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.TaskList.repeatedFields_, null);
};
goog.inherits(proto.pb.TaskList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.TaskList.displayName = 'proto.pb.TaskList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ClassList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.ClassList.repeatedFields_, null);
};
goog.inherits(proto.pb.ClassList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ClassList.displayName = 'proto.pb.ClassList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.PlayerList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.PlayerList.repeatedFields_, null);
};
goog.inherits(proto.pb.PlayerList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.PlayerList.displayName = 'proto.pb.PlayerList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.GoodsList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.GoodsList.repeatedFields_, null);
};
goog.inherits(proto.pb.GoodsList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.GoodsList.displayName = 'proto.pb.GoodsList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.RoomList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.RoomList.repeatedFields_, null);
};
goog.inherits(proto.pb.RoomList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.RoomList.displayName = 'proto.pb.RoomList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.TableList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.TableList.repeatedFields_, null);
};
goog.inherits(proto.pb.TableList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.TableList.displayName = 'proto.pb.TableList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.GameList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.GameList.repeatedFields_, null);
};
goog.inherits(proto.pb.GameList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.GameList.displayName = 'proto.pb.GameList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.InningList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.InningList.repeatedFields_, null);
};
goog.inherits(proto.pb.InningList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.InningList.displayName = 'proto.pb.InningList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.UserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.UserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.UserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.UserInfo.toObject = function(includeInstance, msg) {
  var obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    account: jspb.Message.getFieldWithDefault(msg, 3, ""),
    password: jspb.Message.getFieldWithDefault(msg, 4, ""),
    faceid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gender: jspb.Message.getFieldWithDefault(msg, 6, 0),
    age: jspb.Message.getFieldWithDefault(msg, 7, 0),
    vip: jspb.Message.getFieldWithDefault(msg, 8, 0),
    level: jspb.Message.getFieldWithDefault(msg, 9, 0),
    yuanbao: jspb.Message.getFieldWithDefault(msg, 10, 0),
    coin: jspb.Message.getFieldWithDefault(msg, 11, 0),
    money: jspb.Message.getFieldWithDefault(msg, 12, 0),
    passportid: jspb.Message.getFieldWithDefault(msg, 13, ""),
    realname: jspb.Message.getFieldWithDefault(msg, 14, ""),
    phonenum: jspb.Message.getFieldWithDefault(msg, 15, ""),
    email: jspb.Message.getFieldWithDefault(msg, 16, ""),
    address: jspb.Message.getFieldWithDefault(msg, 17, ""),
    identity: jspb.Message.getFieldWithDefault(msg, 18, ""),
    agentid: jspb.Message.getFieldWithDefault(msg, 19, 0),
    referralcode: jspb.Message.getFieldWithDefault(msg, 20, ""),
    clientaddr: jspb.Message.getFieldWithDefault(msg, 21, ""),
    serveraddr: jspb.Message.getFieldWithDefault(msg, 22, ""),
    machinecode: jspb.Message.getFieldWithDefault(msg, 23, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.UserInfo}
 */
proto.pb.UserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.UserInfo;
  return proto.pb.UserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.UserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.UserInfo}
 */
proto.pb.UserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFaceid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGender(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAge(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVip(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setYuanbao(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCoin(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMoney(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassportid(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setRealname(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonenum(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentity(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAgentid(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferralcode(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientaddr(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setServeraddr(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setMachinecode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.UserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.UserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.UserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.UserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFaceid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getGender();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getAge();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getVip();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getYuanbao();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getCoin();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getMoney();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getPassportid();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getRealname();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getPhonenum();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getIdentity();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getAgentid();
  if (f !== 0) {
    writer.writeInt64(
      19,
      f
    );
  }
  f = message.getReferralcode();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getClientaddr();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getServeraddr();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getMachinecode();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.pb.UserInfo.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.UserInfo.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.pb.UserInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.UserInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string account = 3;
 * @return {string}
 */
proto.pb.UserInfo.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.UserInfo.prototype.setAccount = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string password = 4;
 * @return {string}
 */
proto.pb.UserInfo.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.pb.UserInfo.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 faceID = 5;
 * @return {number}
 */
proto.pb.UserInfo.prototype.getFaceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb.UserInfo.prototype.setFaceid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 gender = 6;
 * @return {number}
 */
proto.pb.UserInfo.prototype.getGender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.pb.UserInfo.prototype.setGender = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 age = 7;
 * @return {number}
 */
proto.pb.UserInfo.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.pb.UserInfo.prototype.setAge = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 vIP = 8;
 * @return {number}
 */
proto.pb.UserInfo.prototype.getVip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.pb.UserInfo.prototype.setVip = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 level = 9;
 * @return {number}
 */
proto.pb.UserInfo.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.pb.UserInfo.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 yuanBao = 10;
 * @return {number}
 */
proto.pb.UserInfo.prototype.getYuanbao = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.pb.UserInfo.prototype.setYuanbao = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 coin = 11;
 * @return {number}
 */
proto.pb.UserInfo.prototype.getCoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.pb.UserInfo.prototype.setCoin = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 money = 12;
 * @return {number}
 */
proto.pb.UserInfo.prototype.getMoney = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.pb.UserInfo.prototype.setMoney = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string passPortID = 13;
 * @return {string}
 */
proto.pb.UserInfo.prototype.getPassportid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.pb.UserInfo.prototype.setPassportid = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string realName = 14;
 * @return {string}
 */
proto.pb.UserInfo.prototype.getRealname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.pb.UserInfo.prototype.setRealname = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string phoneNum = 15;
 * @return {string}
 */
proto.pb.UserInfo.prototype.getPhonenum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.pb.UserInfo.prototype.setPhonenum = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string email = 16;
 * @return {string}
 */
proto.pb.UserInfo.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.pb.UserInfo.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string address = 17;
 * @return {string}
 */
proto.pb.UserInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.pb.UserInfo.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string iDentity = 18;
 * @return {string}
 */
proto.pb.UserInfo.prototype.getIdentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.pb.UserInfo.prototype.setIdentity = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional int64 agentID = 19;
 * @return {number}
 */
proto.pb.UserInfo.prototype.getAgentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.pb.UserInfo.prototype.setAgentid = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional string referralCode = 20;
 * @return {string}
 */
proto.pb.UserInfo.prototype.getReferralcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.pb.UserInfo.prototype.setReferralcode = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string clientAddr = 21;
 * @return {string}
 */
proto.pb.UserInfo.prototype.getClientaddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.pb.UserInfo.prototype.setClientaddr = function(value) {
  jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string serverAddr = 22;
 * @return {string}
 */
proto.pb.UserInfo.prototype.getServeraddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.pb.UserInfo.prototype.setServeraddr = function(value) {
  jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional string machineCode = 23;
 * @return {string}
 */
proto.pb.UserInfo.prototype.getMachinecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/** @param {string} value */
proto.pb.UserInfo.prototype.setMachinecode = function(value) {
  jspb.Message.setProto3StringField(this, 23, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.PlayerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.PlayerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.PlayerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PlayerInfo.toObject = function(includeInstance, msg) {
  var obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    account: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    faceid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    age: jspb.Message.getFieldWithDefault(msg, 5, 0),
    sex: jspb.Message.getFieldWithDefault(msg, 6, 0),
    yuanbao: jspb.Message.getFieldWithDefault(msg, 7, 0),
    coin: jspb.Message.getFieldWithDefault(msg, 8, 0),
    level: jspb.Message.getFieldWithDefault(msg, 9, 0),
    ranking: jspb.Message.getFieldWithDefault(msg, 10, 0),
    state: jspb.Message.getFieldWithDefault(msg, 11, 0),
    gold: jspb.Message.getFieldWithDefault(msg, 12, 0),
    money: jspb.Message.getFieldWithDefault(msg, 13, 0),
    bindinfo: jspb.Message.getFieldWithDefault(msg, 14, ""),
    gamestate: jspb.Message.getFieldWithDefault(msg, 15, 0),
    platformid: jspb.Message.getFieldWithDefault(msg, 16, 0),
    roomnum: jspb.Message.getFieldWithDefault(msg, 17, 0),
    gameid: jspb.Message.getFieldWithDefault(msg, 18, 0),
    tableid: jspb.Message.getFieldWithDefault(msg, 19, 0),
    chairid: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.PlayerInfo}
 */
proto.pb.PlayerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.PlayerInfo;
  return proto.pb.PlayerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.PlayerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.PlayerInfo}
 */
proto.pb.PlayerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFaceid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAge(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSex(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setYuanbao(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCoin(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRanking(value);
      break;
    case 11:
      var value = /** @type {!proto.pb.PlayerState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGold(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMoney(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setBindinfo(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGamestate(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPlatformid(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRoomnum(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameid(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTableid(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChairid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.PlayerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.PlayerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.PlayerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PlayerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAccount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFaceid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAge();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSex();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getYuanbao();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getCoin();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getRanking();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getGold();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getMoney();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getBindinfo();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getGamestate();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getPlatformid();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getRoomnum();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getGameid();
  if (f !== 0) {
    writer.writeInt64(
      18,
      f
    );
  }
  f = message.getTableid();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getChairid();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.pb.PlayerInfo.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.PlayerInfo.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string account = 2;
 * @return {string}
 */
proto.pb.PlayerInfo.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.PlayerInfo.prototype.setAccount = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.pb.PlayerInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.PlayerInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 faceID = 4;
 * @return {number}
 */
proto.pb.PlayerInfo.prototype.getFaceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.PlayerInfo.prototype.setFaceid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 age = 5;
 * @return {number}
 */
proto.pb.PlayerInfo.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb.PlayerInfo.prototype.setAge = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 sex = 6;
 * @return {number}
 */
proto.pb.PlayerInfo.prototype.getSex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.pb.PlayerInfo.prototype.setSex = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 yuanBao = 7;
 * @return {number}
 */
proto.pb.PlayerInfo.prototype.getYuanbao = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.pb.PlayerInfo.prototype.setYuanbao = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 coin = 8;
 * @return {number}
 */
proto.pb.PlayerInfo.prototype.getCoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.pb.PlayerInfo.prototype.setCoin = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 level = 9;
 * @return {number}
 */
proto.pb.PlayerInfo.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.pb.PlayerInfo.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 ranking = 10;
 * @return {number}
 */
proto.pb.PlayerInfo.prototype.getRanking = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.pb.PlayerInfo.prototype.setRanking = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional PlayerState state = 11;
 * @return {!proto.pb.PlayerState}
 */
proto.pb.PlayerInfo.prototype.getState = function() {
  return /** @type {!proto.pb.PlayerState} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.pb.PlayerState} value */
proto.pb.PlayerInfo.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional int64 gold = 12;
 * @return {number}
 */
proto.pb.PlayerInfo.prototype.getGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.pb.PlayerInfo.prototype.setGold = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 money = 13;
 * @return {number}
 */
proto.pb.PlayerInfo.prototype.getMoney = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.pb.PlayerInfo.prototype.setMoney = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional string bindInfo = 14;
 * @return {string}
 */
proto.pb.PlayerInfo.prototype.getBindinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.pb.PlayerInfo.prototype.setBindinfo = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional int32 gameState = 15;
 * @return {number}
 */
proto.pb.PlayerInfo.prototype.getGamestate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.pb.PlayerInfo.prototype.setGamestate = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int64 platformID = 16;
 * @return {number}
 */
proto.pb.PlayerInfo.prototype.getPlatformid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.pb.PlayerInfo.prototype.setPlatformid = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int64 roomNum = 17;
 * @return {number}
 */
proto.pb.PlayerInfo.prototype.getRoomnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.pb.PlayerInfo.prototype.setRoomnum = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int64 gameID = 18;
 * @return {number}
 */
proto.pb.PlayerInfo.prototype.getGameid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.pb.PlayerInfo.prototype.setGameid = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 tableID = 19;
 * @return {number}
 */
proto.pb.PlayerInfo.prototype.getTableid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.pb.PlayerInfo.prototype.setTableid = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 chairID = 20;
 * @return {number}
 */
proto.pb.PlayerInfo.prototype.getChairid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.pb.PlayerInfo.prototype.setChairid = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.HeroInfo.repeatedFields_ = [15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.HeroInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.HeroInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.HeroInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.HeroInfo.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    headid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    rarity: jspb.Message.getFieldWithDefault(msg, 5, 0),
    faction: jspb.Message.getFieldWithDefault(msg, 6, 0),
    healthpoint: jspb.Message.getFieldWithDefault(msg, 7, 0),
    healthpointfull: jspb.Message.getFieldWithDefault(msg, 8, 0),
    strength: jspb.Message.getFieldWithDefault(msg, 9, 0),
    agility: jspb.Message.getFieldWithDefault(msg, 10, 0),
    intelligence: jspb.Message.getFieldWithDefault(msg, 11, 0),
    attackpoint: jspb.Message.getFieldWithDefault(msg, 12, 0),
    armorpoint: jspb.Message.getFieldWithDefault(msg, 13, 0),
    spellpower: jspb.Message.getFieldWithDefault(msg, 14, 0),
    skillsList: jspb.Message.getRepeatedField(msg, 15)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.HeroInfo}
 */
proto.pb.HeroInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.HeroInfo;
  return proto.pb.HeroInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.HeroInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.HeroInfo}
 */
proto.pb.HeroInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeadid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSex(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRarity(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFaction(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHealthpoint(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHealthpointfull(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStrength(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAgility(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntelligence(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAttackpoint(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setArmorpoint(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSpellpower(value);
      break;
    case 15:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setSkillsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.HeroInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.HeroInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.HeroInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.HeroInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getHeadid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSex();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getRarity();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getFaction();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getHealthpoint();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getHealthpointfull();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getStrength();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getAgility();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getIntelligence();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getAttackpoint();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getArmorpoint();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getSpellpower();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getSkillsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      15,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.pb.HeroInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.HeroInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 headId = 2;
 * @return {number}
 */
proto.pb.HeroInfo.prototype.getHeadid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.HeroInfo.prototype.setHeadid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.pb.HeroInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.HeroInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 sex = 4;
 * @return {number}
 */
proto.pb.HeroInfo.prototype.getSex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.HeroInfo.prototype.setSex = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 rarity = 5;
 * @return {number}
 */
proto.pb.HeroInfo.prototype.getRarity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb.HeroInfo.prototype.setRarity = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 faction = 6;
 * @return {number}
 */
proto.pb.HeroInfo.prototype.getFaction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.pb.HeroInfo.prototype.setFaction = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 healthPoint = 7;
 * @return {number}
 */
proto.pb.HeroInfo.prototype.getHealthpoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.pb.HeroInfo.prototype.setHealthpoint = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 healthPointFull = 8;
 * @return {number}
 */
proto.pb.HeroInfo.prototype.getHealthpointfull = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.pb.HeroInfo.prototype.setHealthpointfull = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 strength = 9;
 * @return {number}
 */
proto.pb.HeroInfo.prototype.getStrength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.pb.HeroInfo.prototype.setStrength = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 agility = 10;
 * @return {number}
 */
proto.pb.HeroInfo.prototype.getAgility = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.pb.HeroInfo.prototype.setAgility = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 intelligence = 11;
 * @return {number}
 */
proto.pb.HeroInfo.prototype.getIntelligence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.pb.HeroInfo.prototype.setIntelligence = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 attackPoint = 12;
 * @return {number}
 */
proto.pb.HeroInfo.prototype.getAttackpoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.pb.HeroInfo.prototype.setAttackpoint = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 armorPoint = 13;
 * @return {number}
 */
proto.pb.HeroInfo.prototype.getArmorpoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.pb.HeroInfo.prototype.setArmorpoint = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int64 spellPower = 14;
 * @return {number}
 */
proto.pb.HeroInfo.prototype.getSpellpower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.pb.HeroInfo.prototype.setSpellpower = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * repeated int64 skills = 15;
 * @return {!Array<number>}
 */
proto.pb.HeroInfo.prototype.getSkillsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 15));
};


/** @param {!Array<number>} value */
proto.pb.HeroInfo.prototype.setSkillsList = function(value) {
  jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.HeroInfo.prototype.addSkills = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.HeroInfo.prototype.clearSkillsList = function() {
  this.setSkillsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.WeaponInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.WeaponInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.WeaponInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.WeaponInfo.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    level: jspb.Message.getFieldWithDefault(msg, 4, 0),
    damage: jspb.Message.getFieldWithDefault(msg, 5, 0),
    prob: jspb.Message.getFieldWithDefault(msg, 6, 0),
    count: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.WeaponInfo}
 */
proto.pb.WeaponInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.WeaponInfo;
  return proto.pb.WeaponInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.WeaponInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.WeaponInfo}
 */
proto.pb.WeaponInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDamage(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProb(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.WeaponInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.WeaponInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.WeaponInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.WeaponInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getDamage();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getProb();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.pb.WeaponInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.WeaponInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.pb.WeaponInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.WeaponInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 type = 3;
 * @return {number}
 */
proto.pb.WeaponInfo.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.WeaponInfo.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 level = 4;
 * @return {number}
 */
proto.pb.WeaponInfo.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.WeaponInfo.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 damage = 5;
 * @return {number}
 */
proto.pb.WeaponInfo.prototype.getDamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb.WeaponInfo.prototype.setDamage = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 prob = 6;
 * @return {number}
 */
proto.pb.WeaponInfo.prototype.getProb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.pb.WeaponInfo.prototype.setProb = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 count = 7;
 * @return {number}
 */
proto.pb.WeaponInfo.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.pb.WeaponInfo.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.GoodsInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.GoodsInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.GoodsInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GoodsInfo.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    kind: jspb.Message.getFieldWithDefault(msg, 3, 0),
    level: jspb.Message.getFieldWithDefault(msg, 4, 0),
    price: jspb.Message.getFieldWithDefault(msg, 5, 0),
    store: jspb.Message.getFieldWithDefault(msg, 6, 0),
    sold: jspb.Message.getFieldWithDefault(msg, 7, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.GoodsInfo}
 */
proto.pb.GoodsInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.GoodsInfo;
  return proto.pb.GoodsInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.GoodsInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.GoodsInfo}
 */
proto.pb.GoodsInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKind(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPrice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStore(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSold(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.GoodsInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.GoodsInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.GoodsInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GoodsInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKind();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getStore();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getSold();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.pb.GoodsInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.GoodsInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.pb.GoodsInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.GoodsInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 kind = 3;
 * @return {number}
 */
proto.pb.GoodsInfo.prototype.getKind = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.GoodsInfo.prototype.setKind = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 level = 4;
 * @return {number}
 */
proto.pb.GoodsInfo.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.GoodsInfo.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 price = 5;
 * @return {number}
 */
proto.pb.GoodsInfo.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb.GoodsInfo.prototype.setPrice = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 store = 6;
 * @return {number}
 */
proto.pb.GoodsInfo.prototype.getStore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.pb.GoodsInfo.prototype.setStore = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 sold = 7;
 * @return {number}
 */
proto.pb.GoodsInfo.prototype.getSold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.pb.GoodsInfo.prototype.setSold = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 amount = 8;
 * @return {number}
 */
proto.pb.GoodsInfo.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.pb.GoodsInfo.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.KnapsackInfo.repeatedFields_ = [4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.KnapsackInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.KnapsackInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.KnapsackInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.KnapsackInfo.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    weaponrylistList: jspb.Message.toObjectList(msg.getWeaponrylistList(),
    proto.pb.WeaponInfo.toObject, includeInstance),
    goodslistList: jspb.Message.toObjectList(msg.getGoodslistList(),
    proto.pb.GoodsInfo.toObject, includeInstance),
    herolistList: jspb.Message.toObjectList(msg.getHerolistList(),
    proto.pb.HeroInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.KnapsackInfo}
 */
proto.pb.KnapsackInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.KnapsackInfo;
  return proto.pb.KnapsackInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.KnapsackInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.KnapsackInfo}
 */
proto.pb.KnapsackInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new proto.pb.WeaponInfo;
      reader.readMessage(value,proto.pb.WeaponInfo.deserializeBinaryFromReader);
      msg.addWeaponrylist(value);
      break;
    case 5:
      var value = new proto.pb.GoodsInfo;
      reader.readMessage(value,proto.pb.GoodsInfo.deserializeBinaryFromReader);
      msg.addGoodslist(value);
      break;
    case 6:
      var value = new proto.pb.HeroInfo;
      reader.readMessage(value,proto.pb.HeroInfo.deserializeBinaryFromReader);
      msg.addHerolist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.KnapsackInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.KnapsackInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.KnapsackInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.KnapsackInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWeaponrylistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.pb.WeaponInfo.serializeBinaryToWriter
    );
  }
  f = message.getGoodslistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.pb.GoodsInfo.serializeBinaryToWriter
    );
  }
  f = message.getHerolistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.pb.HeroInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.pb.KnapsackInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.KnapsackInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 uid = 2;
 * @return {number}
 */
proto.pb.KnapsackInfo.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.KnapsackInfo.prototype.setUid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.pb.KnapsackInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.KnapsackInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated WeaponInfo weaponryList = 4;
 * @return {!Array<!proto.pb.WeaponInfo>}
 */
proto.pb.KnapsackInfo.prototype.getWeaponrylistList = function() {
  return /** @type{!Array<!proto.pb.WeaponInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.WeaponInfo, 4));
};


/** @param {!Array<!proto.pb.WeaponInfo>} value */
proto.pb.KnapsackInfo.prototype.setWeaponrylistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.pb.WeaponInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.WeaponInfo}
 */
proto.pb.KnapsackInfo.prototype.addWeaponrylist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.pb.WeaponInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.KnapsackInfo.prototype.clearWeaponrylistList = function() {
  this.setWeaponrylistList([]);
};


/**
 * repeated GoodsInfo goodsList = 5;
 * @return {!Array<!proto.pb.GoodsInfo>}
 */
proto.pb.KnapsackInfo.prototype.getGoodslistList = function() {
  return /** @type{!Array<!proto.pb.GoodsInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.GoodsInfo, 5));
};


/** @param {!Array<!proto.pb.GoodsInfo>} value */
proto.pb.KnapsackInfo.prototype.setGoodslistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.pb.GoodsInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.GoodsInfo}
 */
proto.pb.KnapsackInfo.prototype.addGoodslist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.pb.GoodsInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.KnapsackInfo.prototype.clearGoodslistList = function() {
  this.setGoodslistList([]);
};


/**
 * repeated HeroInfo heroList = 6;
 * @return {!Array<!proto.pb.HeroInfo>}
 */
proto.pb.KnapsackInfo.prototype.getHerolistList = function() {
  return /** @type{!Array<!proto.pb.HeroInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.HeroInfo, 6));
};


/** @param {!Array<!proto.pb.HeroInfo>} value */
proto.pb.KnapsackInfo.prototype.setHerolistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.pb.HeroInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.HeroInfo}
 */
proto.pb.KnapsackInfo.prototype.addHerolist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.pb.HeroInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.KnapsackInfo.prototype.clearHerolistList = function() {
  this.setHerolistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.EmailInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.EmailInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.EmailInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.EmailInfo.toObject = function(includeInstance, msg) {
  var obj = {
    emailid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    acceptname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sender: jspb.Message.getFieldWithDefault(msg, 3, ""),
    cc: jspb.Message.getFieldWithDefault(msg, 4, ""),
    topic: jspb.Message.getFieldWithDefault(msg, 5, ""),
    content: jspb.Message.getFieldWithDefault(msg, 6, ""),
    isread: jspb.Message.getFieldWithDefault(msg, 7, false),
    awardlist: (f = msg.getAwardlist()) && proto.pb.GoodsList.toObject(includeInstance, f),
    timestamp: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.EmailInfo}
 */
proto.pb.EmailInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.EmailInfo;
  return proto.pb.EmailInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.EmailInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.EmailInfo}
 */
proto.pb.EmailInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEmailid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAcceptname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCc(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsread(value);
      break;
    case 8:
      var value = new proto.pb.GoodsList;
      reader.readMessage(value,proto.pb.GoodsList.deserializeBinaryFromReader);
      msg.setAwardlist(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.EmailInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.EmailInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.EmailInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.EmailInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmailid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAcceptname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCc();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getIsread();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getAwardlist();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.pb.GoodsList.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
};


/**
 * optional int64 emailID = 1;
 * @return {number}
 */
proto.pb.EmailInfo.prototype.getEmailid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.EmailInfo.prototype.setEmailid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string acceptName = 2;
 * @return {string}
 */
proto.pb.EmailInfo.prototype.getAcceptname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.EmailInfo.prototype.setAcceptname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sender = 3;
 * @return {string}
 */
proto.pb.EmailInfo.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.EmailInfo.prototype.setSender = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string cc = 4;
 * @return {string}
 */
proto.pb.EmailInfo.prototype.getCc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.pb.EmailInfo.prototype.setCc = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string topic = 5;
 * @return {string}
 */
proto.pb.EmailInfo.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.pb.EmailInfo.prototype.setTopic = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string content = 6;
 * @return {string}
 */
proto.pb.EmailInfo.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.pb.EmailInfo.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool isRead = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.EmailInfo.prototype.getIsread = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.pb.EmailInfo.prototype.setIsread = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional GoodsList awardList = 8;
 * @return {?proto.pb.GoodsList}
 */
proto.pb.EmailInfo.prototype.getAwardlist = function() {
  return /** @type{?proto.pb.GoodsList} */ (
    jspb.Message.getWrapperField(this, proto.pb.GoodsList, 8));
};


/** @param {?proto.pb.GoodsList|undefined} value */
proto.pb.EmailInfo.prototype.setAwardlist = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.EmailInfo.prototype.clearAwardlist = function() {
  this.setAwardlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.EmailInfo.prototype.hasAwardlist = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int64 timeStamp = 9;
 * @return {number}
 */
proto.pb.EmailInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.pb.EmailInfo.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.RoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.RoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.RoomInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.RoomInfo.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hostid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    level: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    roomkey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    enterscore: jspb.Message.getFieldWithDefault(msg, 6, 0),
    onlinecount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    robotcount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    maxcount: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.RoomInfo}
 */
proto.pb.RoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.RoomInfo;
  return proto.pb.RoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.RoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.RoomInfo}
 */
proto.pb.RoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHostid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomkey(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEnterscore(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOnlinecount(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRobotcount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.RoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.RoomInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.RoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.RoomInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getHostid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRoomkey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEnterscore();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getOnlinecount();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getRobotcount();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getMaxcount();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.pb.RoomInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.RoomInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 hostId = 2;
 * @return {number}
 */
proto.pb.RoomInfo.prototype.getHostid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.RoomInfo.prototype.setHostid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 level = 3;
 * @return {number}
 */
proto.pb.RoomInfo.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.RoomInfo.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.pb.RoomInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.pb.RoomInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string roomKey = 5;
 * @return {string}
 */
proto.pb.RoomInfo.prototype.getRoomkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.pb.RoomInfo.prototype.setRoomkey = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 enterScore = 6;
 * @return {number}
 */
proto.pb.RoomInfo.prototype.getEnterscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.pb.RoomInfo.prototype.setEnterscore = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 onlineCount = 7;
 * @return {number}
 */
proto.pb.RoomInfo.prototype.getOnlinecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.pb.RoomInfo.prototype.setOnlinecount = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 robotCount = 8;
 * @return {number}
 */
proto.pb.RoomInfo.prototype.getRobotcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.pb.RoomInfo.prototype.setRobotcount = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 maxCount = 9;
 * @return {number}
 */
proto.pb.RoomInfo.prototype.getMaxcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.pb.RoomInfo.prototype.setMaxcount = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.TableInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.TableInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.TableInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TableInfo.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    num: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    gid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    opentime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    taxation: jspb.Message.getFieldWithDefault(msg, 6, 0),
    commission: jspb.Message.getFieldWithDefault(msg, 7, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    playscore: jspb.Message.getFieldWithDefault(msg, 9, 0),
    sittercount: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.TableInfo}
 */
proto.pb.TableInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.TableInfo;
  return proto.pb.TableInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.TableInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.TableInfo}
 */
proto.pb.TableInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpentime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTaxation(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommission(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAmount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPlayscore(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSittercount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.TableInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.TableInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.TableInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TableInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNum();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getGid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getOpentime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getTaxation();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCommission();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getPlayscore();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getSittercount();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.pb.TableInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.TableInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 num = 2;
 * @return {number}
 */
proto.pb.TableInfo.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.TableInfo.prototype.setNum = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 rid = 3;
 * @return {number}
 */
proto.pb.TableInfo.prototype.getRid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.TableInfo.prototype.setRid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 gid = 4;
 * @return {number}
 */
proto.pb.TableInfo.prototype.getGid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.TableInfo.prototype.setGid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 openTime = 5;
 * @return {number}
 */
proto.pb.TableInfo.prototype.getOpentime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb.TableInfo.prototype.setOpentime = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 taxation = 6;
 * @return {number}
 */
proto.pb.TableInfo.prototype.getTaxation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.pb.TableInfo.prototype.setTaxation = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 commission = 7;
 * @return {number}
 */
proto.pb.TableInfo.prototype.getCommission = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.pb.TableInfo.prototype.setCommission = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 amount = 8;
 * @return {number}
 */
proto.pb.TableInfo.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.pb.TableInfo.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 playScore = 9;
 * @return {number}
 */
proto.pb.TableInfo.prototype.getPlayscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.pb.TableInfo.prototype.setPlayscore = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 sitterCount = 10;
 * @return {number}
 */
proto.pb.TableInfo.prototype.getSittercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.pb.TableInfo.prototype.setSittercount = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.TimeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.TimeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.TimeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TimeInfo.toObject = function(includeInstance, msg) {
  var obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    waittime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    outtime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totaltime: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.TimeInfo}
 */
proto.pb.TimeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.TimeInfo;
  return proto.pb.TimeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.TimeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.TimeInfo}
 */
proto.pb.TimeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWaittime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOuttime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotaltime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.TimeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.TimeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.TimeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TimeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getWaittime();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOuttime();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTotaltime();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int64 timeStamp = 1;
 * @return {number}
 */
proto.pb.TimeInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.TimeInfo.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 waitTime = 2;
 * @return {number}
 */
proto.pb.TimeInfo.prototype.getWaittime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.TimeInfo.prototype.setWaittime = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 outTime = 3;
 * @return {number}
 */
proto.pb.TimeInfo.prototype.getOuttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.TimeInfo.prototype.setOuttime = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 totalTime = 4;
 * @return {number}
 */
proto.pb.TimeInfo.prototype.getTotaltime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.TimeInfo.prototype.setTotaltime = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.InningInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.InningInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.InningInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.InningInfo.toObject = function(includeInstance, msg) {
  var obj = {
    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gamename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    number: jspb.Message.getFieldWithDefault(msg, 3, ""),
    winnerid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    loserid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    payoff: jspb.Message.getFieldWithDefault(msg, 6, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    result: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.InningInfo}
 */
proto.pb.InningInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.InningInfo;
  return proto.pb.InningInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.InningInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.InningInfo}
 */
proto.pb.InningInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGameid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGamename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWinnerid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLoserid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPayoff(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.InningInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.InningInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.InningInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.InningInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getGamename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWinnerid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getLoserid();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getPayoff();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional int64 gameID = 1;
 * @return {number}
 */
proto.pb.InningInfo.prototype.getGameid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.InningInfo.prototype.setGameid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string gameName = 2;
 * @return {string}
 */
proto.pb.InningInfo.prototype.getGamename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.InningInfo.prototype.setGamename = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string number = 3;
 * @return {string}
 */
proto.pb.InningInfo.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.InningInfo.prototype.setNumber = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 winnerID = 4;
 * @return {number}
 */
proto.pb.InningInfo.prototype.getWinnerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.InningInfo.prototype.setWinnerid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 loserID = 5;
 * @return {number}
 */
proto.pb.InningInfo.prototype.getLoserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb.InningInfo.prototype.setLoserid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 payoff = 6;
 * @return {number}
 */
proto.pb.InningInfo.prototype.getPayoff = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.pb.InningInfo.prototype.setPayoff = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 timeStamp = 7;
 * @return {number}
 */
proto.pb.InningInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.pb.InningInfo.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string result = 8;
 * @return {string}
 */
proto.pb.InningInfo.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.pb.InningInfo.prototype.setResult = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.CardInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.CardInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.CardInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CardInfo.toObject = function(includeInstance, msg) {
  var obj = {
    cards: msg.getCards_asB64(),
    cardtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cardvalue: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.CardInfo}
 */
proto.pb.CardInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.CardInfo;
  return proto.pb.CardInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.CardInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.CardInfo}
 */
proto.pb.CardInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCards(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCardtype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCardvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.CardInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.CardInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.CardInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CardInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCards_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCardtype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCardvalue();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bytes cards = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pb.CardInfo.prototype.getCards = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cards = 1;
 * This is a type-conversion wrapper around `getCards()`
 * @return {string}
 */
proto.pb.CardInfo.prototype.getCards_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCards()));
};


/**
 * optional bytes cards = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCards()`
 * @return {!Uint8Array}
 */
proto.pb.CardInfo.prototype.getCards_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCards()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.CardInfo.prototype.setCards = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 cardType = 2;
 * @return {number}
 */
proto.pb.CardInfo.prototype.getCardtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.CardInfo.prototype.setCardtype = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 cardValue = 3;
 * @return {number}
 */
proto.pb.CardInfo.prototype.getCardvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.CardInfo.prototype.setCardvalue = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.AreaInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.AreaInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.AreaInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.AreaInfo.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mygold: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalgold: jspb.Message.getFieldWithDefault(msg, 3, 0),
    awardgold: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.AreaInfo}
 */
proto.pb.AreaInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.AreaInfo;
  return proto.pb.AreaInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.AreaInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.AreaInfo}
 */
proto.pb.AreaInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMygold(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalgold(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAwardgold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.AreaInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.AreaInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.AreaInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.AreaInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMygold();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTotalgold();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAwardgold();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pb.AreaInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.AreaInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 myGold = 2;
 * @return {number}
 */
proto.pb.AreaInfo.prototype.getMygold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.AreaInfo.prototype.setMygold = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 totalGold = 3;
 * @return {number}
 */
proto.pb.AreaInfo.prototype.getTotalgold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.AreaInfo.prototype.setTotalgold = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 awardGold = 4;
 * @return {number}
 */
proto.pb.AreaInfo.prototype.getAwardgold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.AreaInfo.prototype.setAwardgold = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.GameInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.GameInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.GameInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GameInfo.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    kindid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    level: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lessscore: jspb.Message.getFieldWithDefault(msg, 5, 0),
    scene: jspb.Message.getFieldWithDefault(msg, 6, 0),
    state: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maxcount: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.GameInfo}
 */
proto.pb.GameInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.GameInfo;
  return proto.pb.GameInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.GameInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.GameInfo}
 */
proto.pb.GameInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKindid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLessscore(value);
      break;
    case 6:
      var value = /** @type {!proto.pb.GameScene} */ (reader.readEnum());
      msg.setScene(value);
      break;
    case 7:
      var value = /** @type {!proto.pb.GameState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.GameInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.GameInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.GameInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GameInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getKindid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getLessscore();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getScene();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getMaxcount();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.pb.GameInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.GameInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 kindID = 2;
 * @return {number}
 */
proto.pb.GameInfo.prototype.getKindid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.GameInfo.prototype.setKindid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.pb.GameInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.GameInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 level = 4;
 * @return {number}
 */
proto.pb.GameInfo.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.GameInfo.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 lessScore = 5;
 * @return {number}
 */
proto.pb.GameInfo.prototype.getLessscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb.GameInfo.prototype.setLessscore = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional GameScene scene = 6;
 * @return {!proto.pb.GameScene}
 */
proto.pb.GameInfo.prototype.getScene = function() {
  return /** @type {!proto.pb.GameScene} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.pb.GameScene} value */
proto.pb.GameInfo.prototype.setScene = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional GameState state = 7;
 * @return {!proto.pb.GameState}
 */
proto.pb.GameInfo.prototype.getState = function() {
  return /** @type {!proto.pb.GameState} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.pb.GameState} value */
proto.pb.GameInfo.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional int32 maxCount = 8;
 * @return {number}
 */
proto.pb.GameInfo.prototype.getMaxcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.pb.GameInfo.prototype.setMaxcount = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.MasterInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.MasterInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.MasterInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MasterInfo.toObject = function(includeInstance, msg) {
  var obj = {
    userinfo: (f = msg.getUserinfo()) && proto.pb.UserInfo.toObject(includeInstance, f),
    classes: (f = msg.getClasses()) && proto.pb.ClassList.toObject(includeInstance, f),
    tasks: (f = msg.getTasks()) && proto.pb.TaskList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.MasterInfo}
 */
proto.pb.MasterInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.MasterInfo;
  return proto.pb.MasterInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.MasterInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.MasterInfo}
 */
proto.pb.MasterInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.UserInfo;
      reader.readMessage(value,proto.pb.UserInfo.deserializeBinaryFromReader);
      msg.setUserinfo(value);
      break;
    case 2:
      var value = new proto.pb.ClassList;
      reader.readMessage(value,proto.pb.ClassList.deserializeBinaryFromReader);
      msg.setClasses(value);
      break;
    case 3:
      var value = new proto.pb.TaskList;
      reader.readMessage(value,proto.pb.TaskList.deserializeBinaryFromReader);
      msg.setTasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.MasterInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.MasterInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.MasterInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.MasterInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.UserInfo.serializeBinaryToWriter
    );
  }
  f = message.getClasses();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.ClassList.serializeBinaryToWriter
    );
  }
  f = message.getTasks();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.TaskList.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserInfo userInfo = 1;
 * @return {?proto.pb.UserInfo}
 */
proto.pb.MasterInfo.prototype.getUserinfo = function() {
  return /** @type{?proto.pb.UserInfo} */ (
    jspb.Message.getWrapperField(this, proto.pb.UserInfo, 1));
};


/** @param {?proto.pb.UserInfo|undefined} value */
proto.pb.MasterInfo.prototype.setUserinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.MasterInfo.prototype.clearUserinfo = function() {
  this.setUserinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.MasterInfo.prototype.hasUserinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ClassList classes = 2;
 * @return {?proto.pb.ClassList}
 */
proto.pb.MasterInfo.prototype.getClasses = function() {
  return /** @type{?proto.pb.ClassList} */ (
    jspb.Message.getWrapperField(this, proto.pb.ClassList, 2));
};


/** @param {?proto.pb.ClassList|undefined} value */
proto.pb.MasterInfo.prototype.setClasses = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.MasterInfo.prototype.clearClasses = function() {
  this.setClasses(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.MasterInfo.prototype.hasClasses = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TaskList tasks = 3;
 * @return {?proto.pb.TaskList}
 */
proto.pb.MasterInfo.prototype.getTasks = function() {
  return /** @type{?proto.pb.TaskList} */ (
    jspb.Message.getWrapperField(this, proto.pb.TaskList, 3));
};


/** @param {?proto.pb.TaskList|undefined} value */
proto.pb.MasterInfo.prototype.setTasks = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.MasterInfo.prototype.clearTasks = function() {
  this.setTasks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.MasterInfo.prototype.hasTasks = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.TaskItem.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.TaskItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.TaskItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TaskItem.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    twice: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hints: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.TaskItem}
 */
proto.pb.TaskItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.TaskItem;
  return proto.pb.TaskItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.TaskItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.TaskItem}
 */
proto.pb.TaskItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTwice(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.TaskItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.TaskItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.TaskItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TaskItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTwice();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHints();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pb.TaskItem.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.TaskItem.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 twice = 2;
 * @return {number}
 */
proto.pb.TaskItem.prototype.getTwice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.TaskItem.prototype.setTwice = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string hints = 3;
 * @return {string}
 */
proto.pb.TaskItem.prototype.getHints = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.TaskItem.prototype.setHints = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ClassItem.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ClassItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ClassItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ClassItem.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    enname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ClassItem}
 */
proto.pb.ClassItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ClassItem;
  return proto.pb.ClassItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ClassItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ClassItem}
 */
proto.pb.ClassItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ClassItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ClassItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ClassItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ClassItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEnname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.pb.ClassItem.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.ClassItem.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.pb.ClassItem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.ClassItem.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string enName = 3;
 * @return {string}
 */
proto.pb.ClassItem.prototype.getEnname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.ClassItem.prototype.setEnname = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.TaskList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.TaskList.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.TaskList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.TaskList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TaskList.toObject = function(includeInstance, msg) {
  var obj = {
    taskList: jspb.Message.toObjectList(msg.getTaskList(),
    proto.pb.TaskItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.TaskList}
 */
proto.pb.TaskList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.TaskList;
  return proto.pb.TaskList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.TaskList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.TaskList}
 */
proto.pb.TaskList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.TaskItem;
      reader.readMessage(value,proto.pb.TaskItem.deserializeBinaryFromReader);
      msg.addTask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.TaskList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.TaskList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.TaskList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TaskList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.TaskItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TaskItem task = 1;
 * @return {!Array<!proto.pb.TaskItem>}
 */
proto.pb.TaskList.prototype.getTaskList = function() {
  return /** @type{!Array<!proto.pb.TaskItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.TaskItem, 1));
};


/** @param {!Array<!proto.pb.TaskItem>} value */
proto.pb.TaskList.prototype.setTaskList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.TaskItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.TaskItem}
 */
proto.pb.TaskList.prototype.addTask = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.TaskItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.TaskList.prototype.clearTaskList = function() {
  this.setTaskList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.ClassList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ClassList.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ClassList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ClassList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ClassList.toObject = function(includeInstance, msg) {
  var obj = {
    classifyList: jspb.Message.toObjectList(msg.getClassifyList(),
    proto.pb.ClassItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ClassList}
 */
proto.pb.ClassList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ClassList;
  return proto.pb.ClassList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ClassList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ClassList}
 */
proto.pb.ClassList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.ClassItem;
      reader.readMessage(value,proto.pb.ClassItem.deserializeBinaryFromReader);
      msg.addClassify(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ClassList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ClassList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ClassList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ClassList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassifyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.ClassItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ClassItem classify = 1;
 * @return {!Array<!proto.pb.ClassItem>}
 */
proto.pb.ClassList.prototype.getClassifyList = function() {
  return /** @type{!Array<!proto.pb.ClassItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.ClassItem, 1));
};


/** @param {!Array<!proto.pb.ClassItem>} value */
proto.pb.ClassList.prototype.setClassifyList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.ClassItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.ClassItem}
 */
proto.pb.ClassList.prototype.addClassify = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.ClassItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.ClassList.prototype.clearClassifyList = function() {
  this.setClassifyList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.PlayerList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.PlayerList.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.PlayerList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.PlayerList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PlayerList.toObject = function(includeInstance, msg) {
  var obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.pb.PlayerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.PlayerList}
 */
proto.pb.PlayerList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.PlayerList;
  return proto.pb.PlayerList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.PlayerList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.PlayerList}
 */
proto.pb.PlayerList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.PlayerInfo;
      reader.readMessage(value,proto.pb.PlayerInfo.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.PlayerList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.PlayerList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.PlayerList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PlayerList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.PlayerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlayerInfo items = 1;
 * @return {!Array<!proto.pb.PlayerInfo>}
 */
proto.pb.PlayerList.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.pb.PlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.PlayerInfo, 1));
};


/** @param {!Array<!proto.pb.PlayerInfo>} value */
proto.pb.PlayerList.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.PlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.PlayerInfo}
 */
proto.pb.PlayerList.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.PlayerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.PlayerList.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.GoodsList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.GoodsList.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.GoodsList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.GoodsList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GoodsList.toObject = function(includeInstance, msg) {
  var obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.pb.GoodsInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.GoodsList}
 */
proto.pb.GoodsList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.GoodsList;
  return proto.pb.GoodsList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.GoodsList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.GoodsList}
 */
proto.pb.GoodsList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.GoodsInfo;
      reader.readMessage(value,proto.pb.GoodsInfo.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.GoodsList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.GoodsList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.GoodsList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GoodsList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.GoodsInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GoodsInfo items = 1;
 * @return {!Array<!proto.pb.GoodsInfo>}
 */
proto.pb.GoodsList.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.pb.GoodsInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.GoodsInfo, 1));
};


/** @param {!Array<!proto.pb.GoodsInfo>} value */
proto.pb.GoodsList.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.GoodsInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.GoodsInfo}
 */
proto.pb.GoodsList.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.GoodsInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.GoodsList.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.RoomList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.RoomList.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.RoomList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.RoomList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.RoomList.toObject = function(includeInstance, msg) {
  var obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.pb.RoomInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.RoomList}
 */
proto.pb.RoomList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.RoomList;
  return proto.pb.RoomList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.RoomList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.RoomList}
 */
proto.pb.RoomList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.RoomInfo;
      reader.readMessage(value,proto.pb.RoomInfo.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.RoomList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.RoomList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.RoomList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.RoomList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.RoomInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RoomInfo items = 1;
 * @return {!Array<!proto.pb.RoomInfo>}
 */
proto.pb.RoomList.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.pb.RoomInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.RoomInfo, 1));
};


/** @param {!Array<!proto.pb.RoomInfo>} value */
proto.pb.RoomList.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.RoomInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.RoomInfo}
 */
proto.pb.RoomList.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.RoomInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.RoomList.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.TableList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.TableList.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.TableList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.TableList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TableList.toObject = function(includeInstance, msg) {
  var obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.pb.TableInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.TableList}
 */
proto.pb.TableList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.TableList;
  return proto.pb.TableList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.TableList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.TableList}
 */
proto.pb.TableList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.TableInfo;
      reader.readMessage(value,proto.pb.TableInfo.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.TableList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.TableList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.TableList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TableList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.TableInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TableInfo items = 1;
 * @return {!Array<!proto.pb.TableInfo>}
 */
proto.pb.TableList.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.pb.TableInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.TableInfo, 1));
};


/** @param {!Array<!proto.pb.TableInfo>} value */
proto.pb.TableList.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.TableInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.TableInfo}
 */
proto.pb.TableList.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.TableInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.TableList.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.GameList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.GameList.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.GameList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.GameList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GameList.toObject = function(includeInstance, msg) {
  var obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.pb.GameInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.GameList}
 */
proto.pb.GameList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.GameList;
  return proto.pb.GameList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.GameList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.GameList}
 */
proto.pb.GameList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.GameInfo;
      reader.readMessage(value,proto.pb.GameInfo.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.GameList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.GameList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.GameList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GameList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.GameInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GameInfo items = 1;
 * @return {!Array<!proto.pb.GameInfo>}
 */
proto.pb.GameList.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.pb.GameInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.GameInfo, 1));
};


/** @param {!Array<!proto.pb.GameInfo>} value */
proto.pb.GameList.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.GameInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.GameInfo}
 */
proto.pb.GameList.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.GameInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.GameList.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.InningList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.InningList.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.InningList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.InningList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.InningList.toObject = function(includeInstance, msg) {
  var obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.pb.InningInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.InningList}
 */
proto.pb.InningList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.InningList;
  return proto.pb.InningList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.InningList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.InningList}
 */
proto.pb.InningList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.InningInfo;
      reader.readMessage(value,proto.pb.InningInfo.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.InningList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.InningList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.InningList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.InningList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.InningInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InningInfo items = 1;
 * @return {!Array<!proto.pb.InningInfo>}
 */
proto.pb.InningList.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.pb.InningInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.InningInfo, 1));
};


/** @param {!Array<!proto.pb.InningInfo>} value */
proto.pb.InningList.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.InningInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.InningInfo}
 */
proto.pb.InningList.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.InningInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.InningList.prototype.clearItemsList = function() {
  this.setItemsList([]);
};


/**
 * @enum {number}
 */
proto.pb.NodeState = {
  OPEN: 0,
  MAINTAIN: 1,
  CLOSED: 2
};

/**
 * @enum {number}
 */
proto.pb.NTFLevel = {
  GENERALNTF: 0,
  URGENCYNTF: 1,
  NTMAINTAINNTF: 2,
  SERVESTOPNTF: 3,
  PRAISENTF: 4,
  STRUMPETNTF: 5,
  MTRUMPETNTF: 6,
  BTRUMPETNTF: 7
};

/**
 * @enum {number}
 */
proto.pb.PlayerState = {
  PLAYERLOOKON: 0,
  PLAYERSITDOWN: 1,
  PLAYERAGREE: 2,
  PLAYERPLAYING: 3,
  PLAYERPICKUP: 4,
  PLAYERCALL: 5,
  PLAYERFOLLOW: 6,
  PLAYERRAISE: 7,
  PLAYERLOOK: 8,
  PLAYERCOMPARE: 9,
  PLAYERCOMPARELOSE: 10,
  PLAYEROUTCARD: 11,
  PLAYERPASS: 12,
  PLAYERCHI: 13,
  PLAYERPONG: 14,
  PLAYERMINGGANG: 15,
  PLAYERANGANG: 16,
  PLAYERTING: 17,
  PLAYERHU: 18,
  PLAYERZIMO: 19,
  PLAYERTRUSTEE: 97,
  PLAYERGIVEUP: 98,
  PLAYERSTANDUP: 99
};

/**
 * @enum {number}
 */
proto.pb.GameState = {
  INITTB: 0,
  OPENTB: 1,
  REPAIRTB: 2,
  CLEARTB: 3,
  STOPTB: 4,
  CLOSETB: 5
};

/**
 * @enum {number}
 */
proto.pb.GameScene = {
  FREE: 0,
  START: 1,
  CALL: 2,
  DECIDE: 3,
  PLAYING: 4,
  OPENING: 5,
  OVER: 6,
  CLOSING: 7,
  SITDIRECT: 8,
  ROLLDICE: 9,
  WAITOPERATE: 10,
  CHANGETHREE: 11,
  DINGQUE: 12,
  CHECKTING: 13,
  CHECKHUAZHU: 14
};

/**
 * @enum {number}
 */
proto.pb.Direct = {
  CENTRE: 0,
  EAST: 1,
  SOUTH: 2,
  WEST: 3,
  NORTH: 4,
  EASTSOUTH: 5,
  WESTSOUTH: 6,
  EASTNORTH: 7,
  WESTNORTH: 8
};

/**
 * @enum {number}
 */
proto.pb.MJOperate = {
  NULL: 0,
  PASS: 1,
  CHI: 2,
  PONG: 3,
  GANG: 4,
  MINGGANG: 5,
  ANGANG: 6,
  BUHUA: 7,
  TING: 8,
  HU: 9,
  ZIMO: 10
};

/**
 * @enum {number}
 */
proto.pb.PHZOperate = {
  PHZNULL: 0,
  PHZTI: 1,
  PHZWEI: 2,
  PHZHE: 3,
  PHZPAO: 4,
  PHZPONG: 5,
  PHZCHI: 6
};

goog.object.extend(exports, proto.pb);
