/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var game_pb = require('./game_pb.js');
goog.object.extend(proto, game_pb);
var player_pb = require('./player_pb.js');
goog.object.extend(proto, player_pb);
goog.exportSymbol('proto.pb.BrcowcowBetReq', null, global);
goog.exportSymbol('proto.pb.BrcowcowBetResp', null, global);
goog.exportSymbol('proto.pb.BrcowcowHostListReq', null, global);
goog.exportSymbol('proto.pb.BrcowcowHostListResp', null, global);
goog.exportSymbol('proto.pb.BrcowcowHostReq', null, global);
goog.exportSymbol('proto.pb.BrcowcowHostResp', null, global);
goog.exportSymbol('proto.pb.BrcowcowOpenResp', null, global);
goog.exportSymbol('proto.pb.BrcowcowOverResp', null, global);
goog.exportSymbol('proto.pb.BrcowcowSceneResp', null, global);
goog.exportSymbol('proto.pb.BrcowcowStateFreeResp', null, global);
goog.exportSymbol('proto.pb.BrcowcowStateOpenResp', null, global);
goog.exportSymbol('proto.pb.BrcowcowStateOverResp', null, global);
goog.exportSymbol('proto.pb.BrcowcowStatePlayingResp', null, global);
goog.exportSymbol('proto.pb.BrcowcowStateStartResp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.BrcowcowSceneResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.BrcowcowSceneResp.repeatedFields_, null);
};
goog.inherits(proto.pb.BrcowcowSceneResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.BrcowcowSceneResp.displayName = 'proto.pb.BrcowcowSceneResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.BrcowcowStateFreeResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.BrcowcowStateFreeResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.BrcowcowStateFreeResp.displayName = 'proto.pb.BrcowcowStateFreeResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.BrcowcowStateStartResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.BrcowcowStateStartResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.BrcowcowStateStartResp.displayName = 'proto.pb.BrcowcowStateStartResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.BrcowcowStatePlayingResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.BrcowcowStatePlayingResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.BrcowcowStatePlayingResp.displayName = 'proto.pb.BrcowcowStatePlayingResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.BrcowcowStateOpenResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.BrcowcowStateOpenResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.BrcowcowStateOpenResp.displayName = 'proto.pb.BrcowcowStateOpenResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.BrcowcowStateOverResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.BrcowcowStateOverResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.BrcowcowStateOverResp.displayName = 'proto.pb.BrcowcowStateOverResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.BrcowcowBetReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.BrcowcowBetReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.BrcowcowBetReq.displayName = 'proto.pb.BrcowcowBetReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.BrcowcowBetResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.BrcowcowBetResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.BrcowcowBetResp.displayName = 'proto.pb.BrcowcowBetResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.BrcowcowOpenResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.BrcowcowOpenResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.BrcowcowOpenResp.displayName = 'proto.pb.BrcowcowOpenResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.BrcowcowOverResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.BrcowcowOverResp.repeatedFields_, null);
};
goog.inherits(proto.pb.BrcowcowOverResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.BrcowcowOverResp.displayName = 'proto.pb.BrcowcowOverResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.BrcowcowHostReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.BrcowcowHostReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.BrcowcowHostReq.displayName = 'proto.pb.BrcowcowHostReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.BrcowcowHostResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.BrcowcowHostResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.BrcowcowHostResp.displayName = 'proto.pb.BrcowcowHostResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.BrcowcowHostListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.BrcowcowHostListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.BrcowcowHostListReq.displayName = 'proto.pb.BrcowcowHostListReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.BrcowcowHostListResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.BrcowcowHostListResp.repeatedFields_, null);
};
goog.inherits(proto.pb.BrcowcowHostListResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.BrcowcowHostListResp.displayName = 'proto.pb.BrcowcowHostListResp';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.BrcowcowSceneResp.repeatedFields_ = [2,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.BrcowcowSceneResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.BrcowcowSceneResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.BrcowcowSceneResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowSceneResp.toObject = function(includeInstance, msg) {
  var obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chipsList: jspb.Message.getRepeatedField(msg, 2),
    awardareasList: msg.getAwardareasList_asB64(),
    areabetsList: jspb.Message.getRepeatedField(msg, 4),
    mybetsList: jspb.Message.getRepeatedField(msg, 5),
    inning: jspb.Message.getFieldWithDefault(msg, 6, ""),
    allplayers: (f = msg.getAllplayers()) && player_pb.PlayerListInfo.toObject(includeInstance, f),
    hostid: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.BrcowcowSceneResp}
 */
proto.pb.BrcowcowSceneResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.BrcowcowSceneResp;
  return proto.pb.BrcowcowSceneResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.BrcowcowSceneResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.BrcowcowSceneResp}
 */
proto.pb.BrcowcowSceneResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setChipsList(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAwardareas(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setAreabetsList(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setMybetsList(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setInning(value);
      break;
    case 7:
      var value = new player_pb.PlayerListInfo;
      reader.readMessage(value,player_pb.PlayerListInfo.deserializeBinaryFromReader);
      msg.setAllplayers(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHostid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.BrcowcowSceneResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.BrcowcowSceneResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.BrcowcowSceneResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowSceneResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getChipsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getAwardareasList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
  f = message.getAreabetsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      4,
      f
    );
  }
  f = message.getMybetsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      5,
      f
    );
  }
  f = message.getInning();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAllplayers();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      player_pb.PlayerListInfo.serializeBinaryToWriter
    );
  }
  f = message.getHostid();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
};


/**
 * optional int64 timeStamp = 1;
 * @return {number}
 */
proto.pb.BrcowcowSceneResp.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.BrcowcowSceneResp.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated int32 chips = 2;
 * @return {!Array<number>}
 */
proto.pb.BrcowcowSceneResp.prototype.getChipsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.pb.BrcowcowSceneResp.prototype.setChipsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.BrcowcowSceneResp.prototype.addChips = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.BrcowcowSceneResp.prototype.clearChipsList = function() {
  this.setChipsList([]);
};


/**
 * repeated bytes awardAreas = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.pb.BrcowcowSceneResp.prototype.getAwardareasList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes awardAreas = 3;
 * This is a type-conversion wrapper around `getAwardareasList()`
 * @return {!Array<string>}
 */
proto.pb.BrcowcowSceneResp.prototype.getAwardareasList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getAwardareasList()));
};


/**
 * repeated bytes awardAreas = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAwardareasList()`
 * @return {!Array<!Uint8Array>}
 */
proto.pb.BrcowcowSceneResp.prototype.getAwardareasList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAwardareasList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.pb.BrcowcowSceneResp.prototype.setAwardareasList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.pb.BrcowcowSceneResp.prototype.addAwardareas = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.BrcowcowSceneResp.prototype.clearAwardareasList = function() {
  this.setAwardareasList([]);
};


/**
 * repeated int64 areaBets = 4;
 * @return {!Array<number>}
 */
proto.pb.BrcowcowSceneResp.prototype.getAreabetsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<number>} value */
proto.pb.BrcowcowSceneResp.prototype.setAreabetsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.BrcowcowSceneResp.prototype.addAreabets = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.BrcowcowSceneResp.prototype.clearAreabetsList = function() {
  this.setAreabetsList([]);
};


/**
 * repeated int64 myBets = 5;
 * @return {!Array<number>}
 */
proto.pb.BrcowcowSceneResp.prototype.getMybetsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<number>} value */
proto.pb.BrcowcowSceneResp.prototype.setMybetsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.BrcowcowSceneResp.prototype.addMybets = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.BrcowcowSceneResp.prototype.clearMybetsList = function() {
  this.setMybetsList([]);
};


/**
 * optional string inning = 6;
 * @return {string}
 */
proto.pb.BrcowcowSceneResp.prototype.getInning = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.pb.BrcowcowSceneResp.prototype.setInning = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional PlayerListInfo allPlayers = 7;
 * @return {?proto.pb.PlayerListInfo}
 */
proto.pb.BrcowcowSceneResp.prototype.getAllplayers = function() {
  return /** @type{?proto.pb.PlayerListInfo} */ (
    jspb.Message.getWrapperField(this, player_pb.PlayerListInfo, 7));
};


/** @param {?proto.pb.PlayerListInfo|undefined} value */
proto.pb.BrcowcowSceneResp.prototype.setAllplayers = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.BrcowcowSceneResp.prototype.clearAllplayers = function() {
  this.setAllplayers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.BrcowcowSceneResp.prototype.hasAllplayers = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 hostID = 8;
 * @return {number}
 */
proto.pb.BrcowcowSceneResp.prototype.getHostid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.pb.BrcowcowSceneResp.prototype.setHostid = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.BrcowcowStateFreeResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.BrcowcowStateFreeResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.BrcowcowStateFreeResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowStateFreeResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && game_pb.TimeInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.BrcowcowStateFreeResp}
 */
proto.pb.BrcowcowStateFreeResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.BrcowcowStateFreeResp;
  return proto.pb.BrcowcowStateFreeResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.BrcowcowStateFreeResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.BrcowcowStateFreeResp}
 */
proto.pb.BrcowcowStateFreeResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new game_pb.TimeInfo;
      reader.readMessage(value,game_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.BrcowcowStateFreeResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.BrcowcowStateFreeResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.BrcowcowStateFreeResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowStateFreeResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      game_pb.TimeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.BrcowcowStateFreeResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, game_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.BrcowcowStateFreeResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.BrcowcowStateFreeResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.BrcowcowStateFreeResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.BrcowcowStateStartResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.BrcowcowStateStartResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.BrcowcowStateStartResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowStateStartResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && game_pb.TimeInfo.toObject(includeInstance, f),
    hostid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    inning: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.BrcowcowStateStartResp}
 */
proto.pb.BrcowcowStateStartResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.BrcowcowStateStartResp;
  return proto.pb.BrcowcowStateStartResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.BrcowcowStateStartResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.BrcowcowStateStartResp}
 */
proto.pb.BrcowcowStateStartResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new game_pb.TimeInfo;
      reader.readMessage(value,game_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHostid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInning(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.BrcowcowStateStartResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.BrcowcowStateStartResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.BrcowcowStateStartResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowStateStartResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      game_pb.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getHostid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getInning();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.BrcowcowStateStartResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, game_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.BrcowcowStateStartResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.BrcowcowStateStartResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.BrcowcowStateStartResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 hostID = 2;
 * @return {number}
 */
proto.pb.BrcowcowStateStartResp.prototype.getHostid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.BrcowcowStateStartResp.prototype.setHostid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string inning = 3;
 * @return {string}
 */
proto.pb.BrcowcowStateStartResp.prototype.getInning = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.BrcowcowStateStartResp.prototype.setInning = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.BrcowcowStatePlayingResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.BrcowcowStatePlayingResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.BrcowcowStatePlayingResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowStatePlayingResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && game_pb.TimeInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.BrcowcowStatePlayingResp}
 */
proto.pb.BrcowcowStatePlayingResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.BrcowcowStatePlayingResp;
  return proto.pb.BrcowcowStatePlayingResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.BrcowcowStatePlayingResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.BrcowcowStatePlayingResp}
 */
proto.pb.BrcowcowStatePlayingResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new game_pb.TimeInfo;
      reader.readMessage(value,game_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.BrcowcowStatePlayingResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.BrcowcowStatePlayingResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.BrcowcowStatePlayingResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowStatePlayingResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      game_pb.TimeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.BrcowcowStatePlayingResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, game_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.BrcowcowStatePlayingResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.BrcowcowStatePlayingResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.BrcowcowStatePlayingResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.BrcowcowStateOpenResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.BrcowcowStateOpenResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.BrcowcowStateOpenResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowStateOpenResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && game_pb.TimeInfo.toObject(includeInstance, f),
    openinfo: (f = msg.getOpeninfo()) && proto.pb.BrcowcowOpenResp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.BrcowcowStateOpenResp}
 */
proto.pb.BrcowcowStateOpenResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.BrcowcowStateOpenResp;
  return proto.pb.BrcowcowStateOpenResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.BrcowcowStateOpenResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.BrcowcowStateOpenResp}
 */
proto.pb.BrcowcowStateOpenResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new game_pb.TimeInfo;
      reader.readMessage(value,game_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    case 2:
      var value = new proto.pb.BrcowcowOpenResp;
      reader.readMessage(value,proto.pb.BrcowcowOpenResp.deserializeBinaryFromReader);
      msg.setOpeninfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.BrcowcowStateOpenResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.BrcowcowStateOpenResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.BrcowcowStateOpenResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowStateOpenResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      game_pb.TimeInfo.serializeBinaryToWriter
    );
  }
  f = message.getOpeninfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.BrcowcowOpenResp.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.BrcowcowStateOpenResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, game_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.BrcowcowStateOpenResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.BrcowcowStateOpenResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.BrcowcowStateOpenResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BrcowcowOpenResp openInfo = 2;
 * @return {?proto.pb.BrcowcowOpenResp}
 */
proto.pb.BrcowcowStateOpenResp.prototype.getOpeninfo = function() {
  return /** @type{?proto.pb.BrcowcowOpenResp} */ (
    jspb.Message.getWrapperField(this, proto.pb.BrcowcowOpenResp, 2));
};


/** @param {?proto.pb.BrcowcowOpenResp|undefined} value */
proto.pb.BrcowcowStateOpenResp.prototype.setOpeninfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.BrcowcowStateOpenResp.prototype.clearOpeninfo = function() {
  this.setOpeninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.BrcowcowStateOpenResp.prototype.hasOpeninfo = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.BrcowcowStateOverResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.BrcowcowStateOverResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.BrcowcowStateOverResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowStateOverResp.toObject = function(includeInstance, msg) {
  var obj = {
    times: (f = msg.getTimes()) && game_pb.TimeInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.BrcowcowStateOverResp}
 */
proto.pb.BrcowcowStateOverResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.BrcowcowStateOverResp;
  return proto.pb.BrcowcowStateOverResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.BrcowcowStateOverResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.BrcowcowStateOverResp}
 */
proto.pb.BrcowcowStateOverResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new game_pb.TimeInfo;
      reader.readMessage(value,game_pb.TimeInfo.deserializeBinaryFromReader);
      msg.setTimes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.BrcowcowStateOverResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.BrcowcowStateOverResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.BrcowcowStateOverResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowStateOverResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      game_pb.TimeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TimeInfo times = 1;
 * @return {?proto.pb.TimeInfo}
 */
proto.pb.BrcowcowStateOverResp.prototype.getTimes = function() {
  return /** @type{?proto.pb.TimeInfo} */ (
    jspb.Message.getWrapperField(this, game_pb.TimeInfo, 1));
};


/** @param {?proto.pb.TimeInfo|undefined} value */
proto.pb.BrcowcowStateOverResp.prototype.setTimes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.BrcowcowStateOverResp.prototype.clearTimes = function() {
  this.setTimes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.BrcowcowStateOverResp.prototype.hasTimes = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.BrcowcowBetReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.BrcowcowBetReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.BrcowcowBetReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowBetReq.toObject = function(includeInstance, msg) {
  var obj = {
    betarea: jspb.Message.getFieldWithDefault(msg, 1, 0),
    betscore: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.BrcowcowBetReq}
 */
proto.pb.BrcowcowBetReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.BrcowcowBetReq;
  return proto.pb.BrcowcowBetReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.BrcowcowBetReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.BrcowcowBetReq}
 */
proto.pb.BrcowcowBetReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBetarea(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBetscore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.BrcowcowBetReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.BrcowcowBetReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.BrcowcowBetReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowBetReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBetarea();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getBetscore();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int32 betArea = 1;
 * @return {number}
 */
proto.pb.BrcowcowBetReq.prototype.getBetarea = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.BrcowcowBetReq.prototype.setBetarea = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 betScore = 2;
 * @return {number}
 */
proto.pb.BrcowcowBetReq.prototype.getBetscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.BrcowcowBetReq.prototype.setBetscore = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.BrcowcowBetResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.BrcowcowBetResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.BrcowcowBetResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowBetResp.toObject = function(includeInstance, msg) {
  var obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    betarea: jspb.Message.getFieldWithDefault(msg, 2, 0),
    betscore: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.BrcowcowBetResp}
 */
proto.pb.BrcowcowBetResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.BrcowcowBetResp;
  return proto.pb.BrcowcowBetResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.BrcowcowBetResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.BrcowcowBetResp}
 */
proto.pb.BrcowcowBetResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBetarea(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBetscore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.BrcowcowBetResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.BrcowcowBetResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.BrcowcowBetResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowBetResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBetarea();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getBetscore();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.pb.BrcowcowBetResp.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.BrcowcowBetResp.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 betArea = 2;
 * @return {number}
 */
proto.pb.BrcowcowBetResp.prototype.getBetarea = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.BrcowcowBetResp.prototype.setBetarea = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 betScore = 3;
 * @return {number}
 */
proto.pb.BrcowcowBetResp.prototype.getBetscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.BrcowcowBetResp.prototype.setBetscore = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.BrcowcowOpenResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.BrcowcowOpenResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.BrcowcowOpenResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowOpenResp.toObject = function(includeInstance, msg) {
  var obj = {
    awardarea: msg.getAwardarea_asB64(),
    bankercard: (f = msg.getBankercard()) && game_pb.CardInfo.toObject(includeInstance, f),
    tiancard: (f = msg.getTiancard()) && game_pb.CardInfo.toObject(includeInstance, f),
    xuancard: (f = msg.getXuancard()) && game_pb.CardInfo.toObject(includeInstance, f),
    dicard: (f = msg.getDicard()) && game_pb.CardInfo.toObject(includeInstance, f),
    huangcard: (f = msg.getHuangcard()) && game_pb.CardInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.BrcowcowOpenResp}
 */
proto.pb.BrcowcowOpenResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.BrcowcowOpenResp;
  return proto.pb.BrcowcowOpenResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.BrcowcowOpenResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.BrcowcowOpenResp}
 */
proto.pb.BrcowcowOpenResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAwardarea(value);
      break;
    case 2:
      var value = new game_pb.CardInfo;
      reader.readMessage(value,game_pb.CardInfo.deserializeBinaryFromReader);
      msg.setBankercard(value);
      break;
    case 3:
      var value = new game_pb.CardInfo;
      reader.readMessage(value,game_pb.CardInfo.deserializeBinaryFromReader);
      msg.setTiancard(value);
      break;
    case 4:
      var value = new game_pb.CardInfo;
      reader.readMessage(value,game_pb.CardInfo.deserializeBinaryFromReader);
      msg.setXuancard(value);
      break;
    case 5:
      var value = new game_pb.CardInfo;
      reader.readMessage(value,game_pb.CardInfo.deserializeBinaryFromReader);
      msg.setDicard(value);
      break;
    case 6:
      var value = new game_pb.CardInfo;
      reader.readMessage(value,game_pb.CardInfo.deserializeBinaryFromReader);
      msg.setHuangcard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.BrcowcowOpenResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.BrcowcowOpenResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.BrcowcowOpenResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowOpenResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAwardarea_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBankercard();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      game_pb.CardInfo.serializeBinaryToWriter
    );
  }
  f = message.getTiancard();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      game_pb.CardInfo.serializeBinaryToWriter
    );
  }
  f = message.getXuancard();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      game_pb.CardInfo.serializeBinaryToWriter
    );
  }
  f = message.getDicard();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      game_pb.CardInfo.serializeBinaryToWriter
    );
  }
  f = message.getHuangcard();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      game_pb.CardInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes awardArea = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pb.BrcowcowOpenResp.prototype.getAwardarea = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes awardArea = 1;
 * This is a type-conversion wrapper around `getAwardarea()`
 * @return {string}
 */
proto.pb.BrcowcowOpenResp.prototype.getAwardarea_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAwardarea()));
};


/**
 * optional bytes awardArea = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAwardarea()`
 * @return {!Uint8Array}
 */
proto.pb.BrcowcowOpenResp.prototype.getAwardarea_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAwardarea()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.BrcowcowOpenResp.prototype.setAwardarea = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CardInfo bankerCard = 2;
 * @return {?proto.pb.CardInfo}
 */
proto.pb.BrcowcowOpenResp.prototype.getBankercard = function() {
  return /** @type{?proto.pb.CardInfo} */ (
    jspb.Message.getWrapperField(this, game_pb.CardInfo, 2));
};


/** @param {?proto.pb.CardInfo|undefined} value */
proto.pb.BrcowcowOpenResp.prototype.setBankercard = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.BrcowcowOpenResp.prototype.clearBankercard = function() {
  this.setBankercard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.BrcowcowOpenResp.prototype.hasBankercard = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CardInfo tianCard = 3;
 * @return {?proto.pb.CardInfo}
 */
proto.pb.BrcowcowOpenResp.prototype.getTiancard = function() {
  return /** @type{?proto.pb.CardInfo} */ (
    jspb.Message.getWrapperField(this, game_pb.CardInfo, 3));
};


/** @param {?proto.pb.CardInfo|undefined} value */
proto.pb.BrcowcowOpenResp.prototype.setTiancard = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.BrcowcowOpenResp.prototype.clearTiancard = function() {
  this.setTiancard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.BrcowcowOpenResp.prototype.hasTiancard = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CardInfo xuanCard = 4;
 * @return {?proto.pb.CardInfo}
 */
proto.pb.BrcowcowOpenResp.prototype.getXuancard = function() {
  return /** @type{?proto.pb.CardInfo} */ (
    jspb.Message.getWrapperField(this, game_pb.CardInfo, 4));
};


/** @param {?proto.pb.CardInfo|undefined} value */
proto.pb.BrcowcowOpenResp.prototype.setXuancard = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.BrcowcowOpenResp.prototype.clearXuancard = function() {
  this.setXuancard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.BrcowcowOpenResp.prototype.hasXuancard = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CardInfo diCard = 5;
 * @return {?proto.pb.CardInfo}
 */
proto.pb.BrcowcowOpenResp.prototype.getDicard = function() {
  return /** @type{?proto.pb.CardInfo} */ (
    jspb.Message.getWrapperField(this, game_pb.CardInfo, 5));
};


/** @param {?proto.pb.CardInfo|undefined} value */
proto.pb.BrcowcowOpenResp.prototype.setDicard = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.BrcowcowOpenResp.prototype.clearDicard = function() {
  this.setDicard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.BrcowcowOpenResp.prototype.hasDicard = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CardInfo huangCard = 6;
 * @return {?proto.pb.CardInfo}
 */
proto.pb.BrcowcowOpenResp.prototype.getHuangcard = function() {
  return /** @type{?proto.pb.CardInfo} */ (
    jspb.Message.getWrapperField(this, game_pb.CardInfo, 6));
};


/** @param {?proto.pb.CardInfo|undefined} value */
proto.pb.BrcowcowOpenResp.prototype.setHuangcard = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.BrcowcowOpenResp.prototype.clearHuangcard = function() {
  this.setHuangcard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.BrcowcowOpenResp.prototype.hasHuangcard = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.BrcowcowOverResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.BrcowcowOverResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.BrcowcowOverResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.BrcowcowOverResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowOverResp.toObject = function(includeInstance, msg) {
  var obj = {
    myacquire: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalsettlementList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.BrcowcowOverResp}
 */
proto.pb.BrcowcowOverResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.BrcowcowOverResp;
  return proto.pb.BrcowcowOverResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.BrcowcowOverResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.BrcowcowOverResp}
 */
proto.pb.BrcowcowOverResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMyacquire(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setTotalsettlementList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.BrcowcowOverResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.BrcowcowOverResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.BrcowcowOverResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowOverResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyacquire();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTotalsettlementList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 myAcquire = 1;
 * @return {number}
 */
proto.pb.BrcowcowOverResp.prototype.getMyacquire = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.BrcowcowOverResp.prototype.setMyacquire = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated int64 totalSettlement = 2;
 * @return {!Array<number>}
 */
proto.pb.BrcowcowOverResp.prototype.getTotalsettlementList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.pb.BrcowcowOverResp.prototype.setTotalsettlementList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.BrcowcowOverResp.prototype.addTotalsettlement = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.BrcowcowOverResp.prototype.clearTotalsettlementList = function() {
  this.setTotalsettlementList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.BrcowcowHostReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.BrcowcowHostReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.BrcowcowHostReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowHostReq.toObject = function(includeInstance, msg) {
  var obj = {
    iswant: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.BrcowcowHostReq}
 */
proto.pb.BrcowcowHostReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.BrcowcowHostReq;
  return proto.pb.BrcowcowHostReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.BrcowcowHostReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.BrcowcowHostReq}
 */
proto.pb.BrcowcowHostReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswant(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.BrcowcowHostReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.BrcowcowHostReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.BrcowcowHostReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowHostReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIswant();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool isWant = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.BrcowcowHostReq.prototype.getIswant = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.pb.BrcowcowHostReq.prototype.setIswant = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.BrcowcowHostResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.BrcowcowHostResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.BrcowcowHostResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowHostResp.toObject = function(includeInstance, msg) {
  var obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    iswant: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.BrcowcowHostResp}
 */
proto.pb.BrcowcowHostResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.BrcowcowHostResp;
  return proto.pb.BrcowcowHostResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.BrcowcowHostResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.BrcowcowHostResp}
 */
proto.pb.BrcowcowHostResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswant(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.BrcowcowHostResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.BrcowcowHostResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.BrcowcowHostResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowHostResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getIswant();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int64 userID = 1;
 * @return {number}
 */
proto.pb.BrcowcowHostResp.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.BrcowcowHostResp.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool isWant = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.BrcowcowHostResp.prototype.getIswant = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.pb.BrcowcowHostResp.prototype.setIswant = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.BrcowcowHostListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.BrcowcowHostListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.BrcowcowHostListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowHostListReq.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.BrcowcowHostListReq}
 */
proto.pb.BrcowcowHostListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.BrcowcowHostListReq;
  return proto.pb.BrcowcowHostListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.BrcowcowHostListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.BrcowcowHostListReq}
 */
proto.pb.BrcowcowHostListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.BrcowcowHostListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.BrcowcowHostListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.BrcowcowHostListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowHostListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.BrcowcowHostListResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.BrcowcowHostListResp.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.BrcowcowHostListResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.BrcowcowHostListResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowHostListResp.toObject = function(includeInstance, msg) {
  var obj = {
    curhost: (f = msg.getCurhost()) && player_pb.PlayerInfo.toObject(includeInstance, f),
    waitlistList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.BrcowcowHostListResp}
 */
proto.pb.BrcowcowHostListResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.BrcowcowHostListResp;
  return proto.pb.BrcowcowHostListResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.BrcowcowHostListResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.BrcowcowHostListResp}
 */
proto.pb.BrcowcowHostListResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new player_pb.PlayerInfo;
      reader.readMessage(value,player_pb.PlayerInfo.deserializeBinaryFromReader);
      msg.setCurhost(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setWaitlistList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.BrcowcowHostListResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.BrcowcowHostListResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.BrcowcowHostListResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.BrcowcowHostListResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurhost();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      player_pb.PlayerInfo.serializeBinaryToWriter
    );
  }
  f = message.getWaitlistList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
};


/**
 * optional PlayerInfo curHost = 1;
 * @return {?proto.pb.PlayerInfo}
 */
proto.pb.BrcowcowHostListResp.prototype.getCurhost = function() {
  return /** @type{?proto.pb.PlayerInfo} */ (
    jspb.Message.getWrapperField(this, player_pb.PlayerInfo, 1));
};


/** @param {?proto.pb.PlayerInfo|undefined} value */
proto.pb.BrcowcowHostListResp.prototype.setCurhost = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.pb.BrcowcowHostListResp.prototype.clearCurhost = function() {
  this.setCurhost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.BrcowcowHostListResp.prototype.hasCurhost = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int64 waitlist = 2;
 * @return {!Array<number>}
 */
proto.pb.BrcowcowHostListResp.prototype.getWaitlistList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.pb.BrcowcowHostListResp.prototype.setWaitlistList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.pb.BrcowcowHostListResp.prototype.addWaitlist = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.pb.BrcowcowHostListResp.prototype.clearWaitlistList = function() {
  this.setWaitlistList([]);
};


goog.object.extend(exports, proto.pb);
