// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.0
// source: baseinfo.proto

package pb

import (
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.


//该协议文件不提供 req 和 resp 注:如需使用,请在子游戏协议中嵌套相关协议.
//////////////////////////////enum////////////////////////////////////////////////////
// 节点状态
type NodeState int32

const (
	NodeState_Open     NodeState = 0 // 开放状态,所有角色可以进入
	NodeState_Maintain NodeState = 1 // 维护状态,白名单角色可以进入
	NodeState_Closed   NodeState = 2 // 关闭状态,所有角色不可进入(同时踢除所有角色)
)

// Enum value maps for NodeState.
var (
	NodeState_name = map[int32]string{
		0: "Open",
		1: "Maintain",
		2: "Closed",
	}
	NodeState_value = map[string]int32{
		"Open":     0,
		"Maintain": 1,
		"Closed":   2,
	}
)

func (x NodeState) Enum() *NodeState {
	p := new(NodeState)
	*p = x
	return p
}

func (x NodeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeState) Descriptor() protoreflect.EnumDescriptor {
	return file_baseinfo_proto_enumTypes[0].Descriptor()
}

func (NodeState) Type() protoreflect.EnumType {
	return &file_baseinfo_proto_enumTypes[0]
}

func (x NodeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeState.Descriptor instead.
func (NodeState) EnumDescriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{0}
}

// 公告级别
type NTFLevel int32

const (
	//系统公告
	NTFLevel_GeneralNTF    NTFLevel = 0 //普通公告
	NTFLevel_UrgencyNTF    NTFLevel = 1 //紧急公告
	NTFLevel_NTMaintainNTF NTFLevel = 2 //维护公告
	NTFLevel_ServeStopNTF  NTFLevel = 3 //停服公告
	NTFLevel_PraiseNTF     NTFLevel = 4 //表扬公告
	//个人公告
	NTFLevel_STrumpetNTF NTFLevel = 5 // 小喇叭
	NTFLevel_MTrumpetNTF NTFLevel = 6 // 银喇叭
	NTFLevel_BTrumpetNTF NTFLevel = 7 // 金喇叭
)

// Enum value maps for NTFLevel.
var (
	NTFLevel_name = map[int32]string{
		0: "GeneralNTF",
		1: "UrgencyNTF",
		2: "NTMaintainNTF",
		3: "ServeStopNTF",
		4: "PraiseNTF",
		5: "STrumpetNTF",
		6: "MTrumpetNTF",
		7: "BTrumpetNTF",
	}
	NTFLevel_value = map[string]int32{
		"GeneralNTF":    0,
		"UrgencyNTF":    1,
		"NTMaintainNTF": 2,
		"ServeStopNTF":  3,
		"PraiseNTF":     4,
		"STrumpetNTF":   5,
		"MTrumpetNTF":   6,
		"BTrumpetNTF":   7,
	}
)

func (x NTFLevel) Enum() *NTFLevel {
	p := new(NTFLevel)
	*p = x
	return p
}

func (x NTFLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NTFLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_baseinfo_proto_enumTypes[1].Descriptor()
}

func (NTFLevel) Type() protoreflect.EnumType {
	return &file_baseinfo_proto_enumTypes[1]
}

func (x NTFLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NTFLevel.Descriptor instead.
func (NTFLevel) EnumDescriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{1}
}

// 玩家状态
type PlayerState int32

const (
	PlayerState_PlayerLookOn      PlayerState = 0  //旁观(可作为刚入场时的初始状态)
	PlayerState_PlayerSitDown     PlayerState = 1  //坐下(此状态下，才能参与游戏)
	PlayerState_PlayerAgree       PlayerState = 2  //同意(可作为准备状态)
	PlayerState_PlayerPlaying     PlayerState = 3  //游戏中
	PlayerState_PlayerPickUp      PlayerState = 4  //托管
	PlayerState_PlayerCall        PlayerState = 5  //叫分
	PlayerState_PlayerFollow      PlayerState = 6  //跟牌
	PlayerState_PlayerRaise       PlayerState = 7  //加注
	PlayerState_PlayerLook        PlayerState = 8  //看牌
	PlayerState_PlayerCompare     PlayerState = 9  //比牌
	PlayerState_PlayerCompareLose PlayerState = 10 //比牌失败
	PlayerState_PlayerOutCard     PlayerState = 11 //出牌|摊牌
	PlayerState_PlayerPass        PlayerState = 12 //过牌|要不起
	PlayerState_PlayerChi         PlayerState = 13 //吃
	PlayerState_PlayerPong        PlayerState = 14 //碰
	PlayerState_PlayerMingGang    PlayerState = 15 //明杠
	PlayerState_PlayerAnGang      PlayerState = 16 //暗杠
	PlayerState_PlayerTing        PlayerState = 17 //听
	PlayerState_PlayerHu          PlayerState = 18 //胡
	PlayerState_PlayerZiMo        PlayerState = 19 //自摸
	PlayerState_PlayerTrustee     PlayerState = 97 //托管
	PlayerState_PlayerGiveUp      PlayerState = 98 //弃牌
	PlayerState_PlayerStandUp     PlayerState = 99 //站起(可作为结束状态)
)

// Enum value maps for PlayerState.
var (
	PlayerState_name = map[int32]string{
		0:  "PlayerLookOn",
		1:  "PlayerSitDown",
		2:  "PlayerAgree",
		3:  "PlayerPlaying",
		4:  "PlayerPickUp",
		5:  "PlayerCall",
		6:  "PlayerFollow",
		7:  "PlayerRaise",
		8:  "PlayerLook",
		9:  "PlayerCompare",
		10: "PlayerCompareLose",
		11: "PlayerOutCard",
		12: "PlayerPass",
		13: "PlayerChi",
		14: "PlayerPong",
		15: "PlayerMingGang",
		16: "PlayerAnGang",
		17: "PlayerTing",
		18: "PlayerHu",
		19: "PlayerZiMo",
		97: "PlayerTrustee",
		98: "PlayerGiveUp",
		99: "PlayerStandUp",
	}
	PlayerState_value = map[string]int32{
		"PlayerLookOn":      0,
		"PlayerSitDown":     1,
		"PlayerAgree":       2,
		"PlayerPlaying":     3,
		"PlayerPickUp":      4,
		"PlayerCall":        5,
		"PlayerFollow":      6,
		"PlayerRaise":       7,
		"PlayerLook":        8,
		"PlayerCompare":     9,
		"PlayerCompareLose": 10,
		"PlayerOutCard":     11,
		"PlayerPass":        12,
		"PlayerChi":         13,
		"PlayerPong":        14,
		"PlayerMingGang":    15,
		"PlayerAnGang":      16,
		"PlayerTing":        17,
		"PlayerHu":          18,
		"PlayerZiMo":        19,
		"PlayerTrustee":     97,
		"PlayerGiveUp":      98,
		"PlayerStandUp":     99,
	}
)

func (x PlayerState) Enum() *PlayerState {
	p := new(PlayerState)
	*p = x
	return p
}

func (x PlayerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerState) Descriptor() protoreflect.EnumDescriptor {
	return file_baseinfo_proto_enumTypes[2].Descriptor()
}

func (PlayerState) Type() protoreflect.EnumType {
	return &file_baseinfo_proto_enumTypes[2]
}

func (x PlayerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerState.Descriptor instead.
func (PlayerState) EnumDescriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{2}
}

////游戏类型
//enum GameType {
//  General = 0;        //常规
//  Fight = 1;          //对战类(两个或两个以上玩家同桌博弈)
//  MultiPerson = 2;    //百人类型
//  TableCard = 3;      //房卡类型
//  Guess = 4;          //竞猜类型
//  GamesCity = 5;      //电玩城类型
//  DualMeet = 6;       //电竞类型
//  Sport = 7;          //体育类型
//  Smart = 8;          //益智休闲
//  RPG = 9;            //RPG类型
//}
//游戏状态
type GameState int32

const (
	GameState_InitTB   GameState = 0 //初始化
	GameState_OpenTB   GameState = 1 //开启
	GameState_RepairTB GameState = 2 //维护
	GameState_ClearTB  GameState = 3 //清场(当前局结束后,清空所有场景信息)
	GameState_StopTB   GameState = 4 //停运(再次启动时，以当前局的场景信息继续运作)
	GameState_CloseTB  GameState = 5 //关闭
)

// Enum value maps for GameState.
var (
	GameState_name = map[int32]string{
		0: "InitTB",
		1: "OpenTB",
		2: "RepairTB",
		3: "ClearTB",
		4: "StopTB",
		5: "CloseTB",
	}
	GameState_value = map[string]int32{
		"InitTB":   0,
		"OpenTB":   1,
		"RepairTB": 2,
		"ClearTB":  3,
		"StopTB":   4,
		"CloseTB":  5,
	}
)

func (x GameState) Enum() *GameState {
	p := new(GameState)
	*p = x
	return p
}

func (x GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_baseinfo_proto_enumTypes[3].Descriptor()
}

func (GameState) Type() protoreflect.EnumType {
	return &file_baseinfo_proto_enumTypes[3]
}

func (x GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameState.Descriptor instead.
func (GameState) EnumDescriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{3}
}

//游戏场景
type GameScene int32

const (
	GameScene_Free        GameScene = 0  //空闲
	GameScene_Start       GameScene = 1  //开始
	GameScene_Call        GameScene = 2  //叫分
	GameScene_Decide      GameScene = 3  //定庄
	GameScene_Playing     GameScene = 4  //游戏中
	GameScene_Opening     GameScene = 5  //开奖
	GameScene_Over        GameScene = 6  //结算
	GameScene_Closing     GameScene = 7  //关闭
	GameScene_SitDirect   GameScene = 8  //决定方位
	GameScene_RollDice    GameScene = 9  //掷骰子
	GameScene_WaitOperate GameScene = 10 //等待操作
	GameScene_ChangeThree GameScene = 11 //换三张
	GameScene_DingQue     GameScene = 12 //定缺门
	GameScene_CheckTing   GameScene = 13 //查听
	GameScene_CheckHuaZHu GameScene = 14 //查花猪
)

// Enum value maps for GameScene.
var (
	GameScene_name = map[int32]string{
		0:  "Free",
		1:  "Start",
		2:  "Call",
		3:  "Decide",
		4:  "Playing",
		5:  "Opening",
		6:  "Over",
		7:  "Closing",
		8:  "SitDirect",
		9:  "RollDice",
		10: "WaitOperate",
		11: "ChangeThree",
		12: "DingQue",
		13: "CheckTing",
		14: "CheckHuaZHu",
	}
	GameScene_value = map[string]int32{
		"Free":        0,
		"Start":       1,
		"Call":        2,
		"Decide":      3,
		"Playing":     4,
		"Opening":     5,
		"Over":        6,
		"Closing":     7,
		"SitDirect":   8,
		"RollDice":    9,
		"WaitOperate": 10,
		"ChangeThree": 11,
		"DingQue":     12,
		"CheckTing":   13,
		"CheckHuaZHu": 14,
	}
)

func (x GameScene) Enum() *GameScene {
	p := new(GameScene)
	*p = x
	return p
}

func (x GameScene) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameScene) Descriptor() protoreflect.EnumDescriptor {
	return file_baseinfo_proto_enumTypes[4].Descriptor()
}

func (GameScene) Type() protoreflect.EnumType {
	return &file_baseinfo_proto_enumTypes[4]
}

func (x GameScene) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameScene.Descriptor instead.
func (GameScene) EnumDescriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{4}
}

// 方位
type Direct int32

const (
	Direct_Centre    Direct = 0
	Direct_EAST      Direct = 1
	Direct_South     Direct = 2
	Direct_West      Direct = 3
	Direct_North     Direct = 4
	Direct_EASTSouth Direct = 5
	Direct_WestSouth Direct = 6
	Direct_EASTNorth Direct = 7
	Direct_WestNorth Direct = 8
)

// Enum value maps for Direct.
var (
	Direct_name = map[int32]string{
		0: "Centre",
		1: "EAST",
		2: "South",
		3: "West",
		4: "North",
		5: "EASTSouth",
		6: "WestSouth",
		7: "EASTNorth",
		8: "WestNorth",
	}
	Direct_value = map[string]int32{
		"Centre":    0,
		"EAST":      1,
		"South":     2,
		"West":      3,
		"North":     4,
		"EASTSouth": 5,
		"WestSouth": 6,
		"EASTNorth": 7,
		"WestNorth": 8,
	}
)

func (x Direct) Enum() *Direct {
	p := new(Direct)
	*p = x
	return p
}

func (x Direct) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direct) Descriptor() protoreflect.EnumDescriptor {
	return file_baseinfo_proto_enumTypes[5].Descriptor()
}

func (Direct) Type() protoreflect.EnumType {
	return &file_baseinfo_proto_enumTypes[5]
}

func (x Direct) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direct.Descriptor instead.
func (Direct) EnumDescriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{5}
}

// 麻将操作
type MJOperate int32

const (
	MJOperate_NULL     MJOperate = 0  //用于校验
	MJOperate_Pass     MJOperate = 1  // 过牌
	MJOperate_Chi      MJOperate = 2  // 吃
	MJOperate_Pong     MJOperate = 3  // 碰
	MJOperate_Gang     MJOperate = 4  // 杠 自己手上三个,杠别家一个。和MingGang效果一样,显示不同
	MJOperate_MingGang MJOperate = 5  // 明杠(同杠)或碰后,抓牌起杠
	MJOperate_AnGang   MJOperate = 6  // 暗杠
	MJOperate_BuHua    MJOperate = 7  // 补花
	MJOperate_Ting     MJOperate = 8  // 听
	MJOperate_Hu       MJOperate = 9  // 胡牌
	MJOperate_ZiMo     MJOperate = 10 // 自摸
)

// Enum value maps for MJOperate.
var (
	MJOperate_name = map[int32]string{
		0:  "NULL",
		1:  "Pass",
		2:  "Chi",
		3:  "Pong",
		4:  "Gang",
		5:  "MingGang",
		6:  "AnGang",
		7:  "BuHua",
		8:  "Ting",
		9:  "Hu",
		10: "ZiMo",
	}
	MJOperate_value = map[string]int32{
		"NULL":     0,
		"Pass":     1,
		"Chi":      2,
		"Pong":     3,
		"Gang":     4,
		"MingGang": 5,
		"AnGang":   6,
		"BuHua":    7,
		"Ting":     8,
		"Hu":       9,
		"ZiMo":     10,
	}
)

func (x MJOperate) Enum() *MJOperate {
	p := new(MJOperate)
	*p = x
	return p
}

func (x MJOperate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MJOperate) Descriptor() protoreflect.EnumDescriptor {
	return file_baseinfo_proto_enumTypes[6].Descriptor()
}

func (MJOperate) Type() protoreflect.EnumType {
	return &file_baseinfo_proto_enumTypes[6]
}

func (x MJOperate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MJOperate.Descriptor instead.
func (MJOperate) EnumDescriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{6}
}

//跑胡子
type PHZOperate int32

const (
	PHZOperate_PhzNull PHZOperate = 0 //用于校验
	PHZOperate_PhzTi   PHZOperate = 1 // 提
	PHZOperate_PhzWei  PHZOperate = 2 // 偎
	PHZOperate_PhzHe   PHZOperate = 3 // 和
	PHZOperate_PhzPao  PHZOperate = 4 // 跑
	PHZOperate_PhzPong PHZOperate = 5 // 碰
	PHZOperate_PhzChi  PHZOperate = 6 // 吃
)

// Enum value maps for PHZOperate.
var (
	PHZOperate_name = map[int32]string{
		0: "PhzNull",
		1: "PhzTi",
		2: "PhzWei",
		3: "PhzHe",
		4: "PhzPao",
		5: "PhzPong",
		6: "PhzChi",
	}
	PHZOperate_value = map[string]int32{
		"PhzNull": 0,
		"PhzTi":   1,
		"PhzWei":  2,
		"PhzHe":   3,
		"PhzPao":  4,
		"PhzPong": 5,
		"PhzChi":  6,
	}
)

func (x PHZOperate) Enum() *PHZOperate {
	p := new(PHZOperate)
	*p = x
	return p
}

func (x PHZOperate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PHZOperate) Descriptor() protoreflect.EnumDescriptor {
	return file_baseinfo_proto_enumTypes[7].Descriptor()
}

func (PHZOperate) Type() protoreflect.EnumType {
	return &file_baseinfo_proto_enumTypes[7]
}

func (x PHZOperate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PHZOperate.Descriptor instead.
func (PHZOperate) EnumDescriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{7}
}

/////////////基础信息/////////////////[重要的INFO]///////////////////////////////////////////////////////
//用户个人信息
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       int64  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`             //ID
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                  //用户
	Account      string `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`            //帐号
	Password     string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`          //密码
	FaceID       int32  `protobuf:"varint,5,opt,name=faceID,proto3" json:"faceID,omitempty"`             //头像
	Gender       int32  `protobuf:"varint,6,opt,name=gender,proto3" json:"gender,omitempty"`             //性别
	Age          int32  `protobuf:"varint,7,opt,name=age,proto3" json:"age,omitempty"`                   //年龄
	VIP          int32  `protobuf:"varint,8,opt,name=vIP,proto3" json:"vIP,omitempty"`                   //VIP级别
	Level        int32  `protobuf:"varint,9,opt,name=level,proto3" json:"level,omitempty"`               //级别
	YuanBao      int64  `protobuf:"varint,10,opt,name=yuanBao,proto3" json:"yuanBao,omitempty"`          //元宝
	Coin         int64  `protobuf:"varint,11,opt,name=coin,proto3" json:"coin,omitempty"`                //铜钱
	Money        int64  `protobuf:"varint,12,opt,name=money,proto3" json:"money,omitempty"`              //金钱(余额)
	PassPortID   string `protobuf:"bytes,13,opt,name=passPortID,proto3" json:"passPortID,omitempty"`     //证件号
	RealName     string `protobuf:"bytes,14,opt,name=realName,proto3" json:"realName,omitempty"`         //真实名字
	PhoneNum     string `protobuf:"bytes,15,opt,name=phoneNum,proto3" json:"phoneNum,omitempty"`         //手机
	Email        string `protobuf:"bytes,16,opt,name=email,proto3" json:"email,omitempty"`               //邮箱
	Address      string `protobuf:"bytes,17,opt,name=address,proto3" json:"address,omitempty"`           //住址
	IDentity     string `protobuf:"bytes,18,opt,name=iDentity,proto3" json:"iDentity,omitempty"`         //识别码(平台生成)
	AgentID      int64  `protobuf:"varint,19,opt,name=agentID,proto3" json:"agentID,omitempty"`          //代理标识(上级代理人)
	ReferralCode string `protobuf:"bytes,20,opt,name=referralCode,proto3" json:"referralCode,omitempty"` //推荐标识(推荐码,由邀请码生成)
	ClientAddr   string `protobuf:"bytes,21,opt,name=clientAddr,proto3" json:"clientAddr,omitempty"`     //连接地址(当前实际IP)
	ServerAddr   string `protobuf:"bytes,22,opt,name=serverAddr,proto3" json:"serverAddr,omitempty"`     //(跳转至该地址 由登录服务返回的真实服务器地址)
	MachineCode  string `protobuf:"bytes,23,opt,name=machineCode,proto3" json:"machineCode,omitempty"`   //机器序列
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{0}
}

func (x *UserInfo) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserInfo) GetFaceID() int32 {
	if x != nil {
		return x.FaceID
	}
	return 0
}

func (x *UserInfo) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *UserInfo) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *UserInfo) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

func (x *UserInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UserInfo) GetYuanBao() int64 {
	if x != nil {
		return x.YuanBao
	}
	return 0
}

func (x *UserInfo) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *UserInfo) GetMoney() int64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *UserInfo) GetPassPortID() string {
	if x != nil {
		return x.PassPortID
	}
	return ""
}

func (x *UserInfo) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UserInfo) GetPhoneNum() string {
	if x != nil {
		return x.PhoneNum
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserInfo) GetIDentity() string {
	if x != nil {
		return x.IDentity
	}
	return ""
}

func (x *UserInfo) GetAgentID() int64 {
	if x != nil {
		return x.AgentID
	}
	return 0
}

func (x *UserInfo) GetReferralCode() string {
	if x != nil {
		return x.ReferralCode
	}
	return ""
}

func (x *UserInfo) GetClientAddr() string {
	if x != nil {
		return x.ClientAddr
	}
	return ""
}

func (x *UserInfo) GetServerAddr() string {
	if x != nil {
		return x.ServerAddr
	}
	return ""
}

func (x *UserInfo) GetMachineCode() string {
	if x != nil {
		return x.MachineCode
	}
	return ""
}

//玩家信息
type PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     int64       `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`                    // ID
	Account    string      `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`                   // 账号
	Name       string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                         // 名称
	FaceID     int32       `protobuf:"varint,4,opt,name=faceID,proto3" json:"faceID,omitempty"`                    // 头像
	Age        int32       `protobuf:"varint,5,opt,name=age,proto3" json:"age,omitempty"`                          // 年龄
	Sex        int32       `protobuf:"varint,6,opt,name=sex,proto3" json:"sex,omitempty"`                          // 性别
	YuanBao    int64       `protobuf:"varint,7,opt,name=yuanBao,proto3" json:"yuanBao,omitempty"`                  // 元宝 *100
	Coin       int64       `protobuf:"varint,8,opt,name=coin,proto3" json:"coin,omitempty"`                        // 铜钱
	Level      int32       `protobuf:"varint,9,opt,name=level,proto3" json:"level,omitempty"`                      // 游戏级别
	Ranking    int32       `protobuf:"varint,10,opt,name=ranking,proto3" json:"ranking,omitempty"`                 // 排名
	State      PlayerState `protobuf:"varint,11,opt,name=state,proto3,enum=pb.PlayerState" json:"state,omitempty"` // 状态
	Gold       int64       `protobuf:"varint,12,opt,name=gold,proto3" json:"gold,omitempty"`                       //金币 *100
	Money      int64       `protobuf:"varint,13,opt,name=money,proto3" json:"money,omitempty"`                     //钱
	BindInfo   string      `protobuf:"bytes,14,opt,name=bindInfo,proto3" json:"bindInfo,omitempty"`                // 绑定信息
	GameState  int32       `protobuf:"varint,15,opt,name=gameState,proto3" json:"gameState,omitempty"`             //游戏级别
	PlatformID int64       `protobuf:"varint,16,opt,name=platformID,proto3" json:"platformID,omitempty"`           // 平台ID 0:无效
	RoomNum    int64       `protobuf:"varint,17,opt,name=roomNum,proto3" json:"roomNum,omitempty"`                 // 房间号 0:无效
	GameID     int64       `protobuf:"varint,18,opt,name=gameID,proto3" json:"gameID,omitempty"`                   // 所在游戏ID 0:无效
	TableID    int32       `protobuf:"varint,19,opt,name=tableID,proto3" json:"tableID,omitempty"`                 // 所在桌号ID 0:不提供
	ChairID    int32       `protobuf:"varint,20,opt,name=chairID,proto3" json:"chairID,omitempty"`                 // 所在椅子ID 0:不提供
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerInfo) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *PlayerInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *PlayerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerInfo) GetFaceID() int32 {
	if x != nil {
		return x.FaceID
	}
	return 0
}

func (x *PlayerInfo) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *PlayerInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *PlayerInfo) GetYuanBao() int64 {
	if x != nil {
		return x.YuanBao
	}
	return 0
}

func (x *PlayerInfo) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *PlayerInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PlayerInfo) GetRanking() int32 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *PlayerInfo) GetState() PlayerState {
	if x != nil {
		return x.State
	}
	return PlayerState_PlayerLookOn
}

func (x *PlayerInfo) GetGold() int64 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *PlayerInfo) GetMoney() int64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *PlayerInfo) GetBindInfo() string {
	if x != nil {
		return x.BindInfo
	}
	return ""
}

func (x *PlayerInfo) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *PlayerInfo) GetPlatformID() int64 {
	if x != nil {
		return x.PlatformID
	}
	return 0
}

func (x *PlayerInfo) GetRoomNum() int64 {
	if x != nil {
		return x.RoomNum
	}
	return 0
}

func (x *PlayerInfo) GetGameID() int64 {
	if x != nil {
		return x.GameID
	}
	return 0
}

func (x *PlayerInfo) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *PlayerInfo) GetChairID() int32 {
	if x != nil {
		return x.ChairID
	}
	return 0
}

// 武将信息
type HeroInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	HeadId          int32   `protobuf:"varint,2,opt,name=headId,proto3" json:"headId,omitempty"`                   // 头像ID
	Name            string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                        // 武将名称
	Sex             int32   `protobuf:"varint,4,opt,name=sex,proto3" json:"sex,omitempty"`                         // 武将性别
	Rarity          int32   `protobuf:"varint,5,opt,name=rarity,proto3" json:"rarity,omitempty"`                   // 稀有度
	Faction         int32   `protobuf:"varint,6,opt,name=faction,proto3" json:"faction,omitempty"`                 // 所属阵营==类型
	HealthPoint     int64   `protobuf:"varint,7,opt,name=healthPoint,proto3" json:"healthPoint,omitempty"`         // 当前生命值
	HealthPointFull int64   `protobuf:"varint,8,opt,name=healthPointFull,proto3" json:"healthPointFull,omitempty"` // 满血值
	Strength        int64   `protobuf:"varint,9,opt,name=strength,proto3" json:"strength,omitempty"`               // 力量
	Agility         int64   `protobuf:"varint,10,opt,name=agility,proto3" json:"agility,omitempty"`                // 敏捷
	Intelligence    int64   `protobuf:"varint,11,opt,name=intelligence,proto3" json:"intelligence,omitempty"`      // 智力
	AttackPoint     int64   `protobuf:"varint,12,opt,name=attackPoint,proto3" json:"attackPoint,omitempty"`        // 攻击力
	ArmorPoint      int64   `protobuf:"varint,13,opt,name=armorPoint,proto3" json:"armorPoint,omitempty"`          // 防御力
	SpellPower      int64   `protobuf:"varint,14,opt,name=spellPower,proto3" json:"spellPower,omitempty"`          // 法强
	Skills          []int64 `protobuf:"varint,15,rep,packed,name=skills,proto3" json:"skills,omitempty"`           // 所包含的技能
}

func (x *HeroInfo) Reset() {
	*x = HeroInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeroInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeroInfo) ProtoMessage() {}

func (x *HeroInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeroInfo.ProtoReflect.Descriptor instead.
func (*HeroInfo) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{2}
}

func (x *HeroInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HeroInfo) GetHeadId() int32 {
	if x != nil {
		return x.HeadId
	}
	return 0
}

func (x *HeroInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HeroInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *HeroInfo) GetRarity() int32 {
	if x != nil {
		return x.Rarity
	}
	return 0
}

func (x *HeroInfo) GetFaction() int32 {
	if x != nil {
		return x.Faction
	}
	return 0
}

func (x *HeroInfo) GetHealthPoint() int64 {
	if x != nil {
		return x.HealthPoint
	}
	return 0
}

func (x *HeroInfo) GetHealthPointFull() int64 {
	if x != nil {
		return x.HealthPointFull
	}
	return 0
}

func (x *HeroInfo) GetStrength() int64 {
	if x != nil {
		return x.Strength
	}
	return 0
}

func (x *HeroInfo) GetAgility() int64 {
	if x != nil {
		return x.Agility
	}
	return 0
}

func (x *HeroInfo) GetIntelligence() int64 {
	if x != nil {
		return x.Intelligence
	}
	return 0
}

func (x *HeroInfo) GetAttackPoint() int64 {
	if x != nil {
		return x.AttackPoint
	}
	return 0
}

func (x *HeroInfo) GetArmorPoint() int64 {
	if x != nil {
		return x.ArmorPoint
	}
	return 0
}

func (x *HeroInfo) GetSpellPower() int64 {
	if x != nil {
		return x.SpellPower
	}
	return 0
}

func (x *HeroInfo) GetSkills() []int64 {
	if x != nil {
		return x.Skills
	}
	return nil
}

// 武器信息
type WeaponInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`         //标识
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`      //名称
	Type   int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`     //种类
	Level  int32  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`   //级别
	Damage int64  `protobuf:"varint,5,opt,name=damage,proto3" json:"damage,omitempty"` //伤害值
	Prob   int64  `protobuf:"varint,6,opt,name=prob,proto3" json:"prob,omitempty"`     //掉落几率
	Count  int32  `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`   //总数 -1:表示数量无限制
}

func (x *WeaponInfo) Reset() {
	*x = WeaponInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaponInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaponInfo) ProtoMessage() {}

func (x *WeaponInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaponInfo.ProtoReflect.Descriptor instead.
func (*WeaponInfo) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{3}
}

func (x *WeaponInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WeaponInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WeaponInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *WeaponInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *WeaponInfo) GetDamage() int64 {
	if x != nil {
		return x.Damage
	}
	return 0
}

func (x *WeaponInfo) GetProb() int64 {
	if x != nil {
		return x.Prob
	}
	return 0
}

func (x *WeaponInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 商品信息
type GoodsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`         //标识
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`      //名称
	Kind   int32  `protobuf:"varint,3,opt,name=kind,proto3" json:"kind,omitempty"`     //种类
	Level  int32  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`   //级别
	Price  int64  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`   //价格
	Store  int64  `protobuf:"varint,6,opt,name=store,proto3" json:"store,omitempty"`   //库存
	Sold   int64  `protobuf:"varint,7,opt,name=sold,proto3" json:"sold,omitempty"`     //已售 (玩家单次购得的数量)
	Amount int32  `protobuf:"varint,8,opt,name=amount,proto3" json:"amount,omitempty"` //总数 (玩家已购得的总数量)
}

func (x *GoodsInfo) Reset() {
	*x = GoodsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsInfo) ProtoMessage() {}

func (x *GoodsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsInfo.ProtoReflect.Descriptor instead.
func (*GoodsInfo) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{4}
}

func (x *GoodsInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GoodsInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoodsInfo) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *GoodsInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GoodsInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GoodsInfo) GetStore() int64 {
	if x != nil {
		return x.Store
	}
	return 0
}

func (x *GoodsInfo) GetSold() int64 {
	if x != nil {
		return x.Sold
	}
	return 0
}

func (x *GoodsInfo) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// 背包信息(单个)
type KnapsackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                    //标识
	Uid          int64         `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`                  //玩家ID
	Name         string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                 //背包名称
	WeaponryList []*WeaponInfo `protobuf:"bytes,4,rep,name=weaponryList,proto3" json:"weaponryList,omitempty"` // 武器列表
	GoodsList    []*GoodsInfo  `protobuf:"bytes,5,rep,name=goodsList,proto3" json:"goodsList,omitempty"`       // 商品列表
	HeroList     []*HeroInfo   `protobuf:"bytes,6,rep,name=heroList,proto3" json:"heroList,omitempty"`         // 我的武将列表
}

func (x *KnapsackInfo) Reset() {
	*x = KnapsackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnapsackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnapsackInfo) ProtoMessage() {}

func (x *KnapsackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnapsackInfo.ProtoReflect.Descriptor instead.
func (*KnapsackInfo) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{5}
}

func (x *KnapsackInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KnapsackInfo) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *KnapsackInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KnapsackInfo) GetWeaponryList() []*WeaponInfo {
	if x != nil {
		return x.WeaponryList
	}
	return nil
}

func (x *KnapsackInfo) GetGoodsList() []*GoodsInfo {
	if x != nil {
		return x.GoodsList
	}
	return nil
}

func (x *KnapsackInfo) GetHeroList() []*HeroInfo {
	if x != nil {
		return x.HeroList
	}
	return nil
}

//邮箱信息
type EmailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailID    int64      `protobuf:"varint,1,opt,name=emailID,proto3" json:"emailID,omitempty"`      //邮箱ID
	AcceptName string     `protobuf:"bytes,2,opt,name=acceptName,proto3" json:"acceptName,omitempty"` //接收者
	Sender     string     `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`         //发送者
	Cc         string     `protobuf:"bytes,4,opt,name=cc,proto3" json:"cc,omitempty"`                 //抄送给
	Topic      string     `protobuf:"bytes,5,opt,name=topic,proto3" json:"topic,omitempty"`           //主题
	Content    string     `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`       //内容 300字(最多)
	IsRead     bool       `protobuf:"varint,7,opt,name=isRead,proto3" json:"isRead,omitempty"`
	AwardList  *GoodsList `protobuf:"bytes,8,opt,name=awardList,proto3" json:"awardList,omitempty"`  //奖励商品列表
	TimeStamp  int64      `protobuf:"varint,9,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"` //时间戳
}

func (x *EmailInfo) Reset() {
	*x = EmailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailInfo) ProtoMessage() {}

func (x *EmailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailInfo.ProtoReflect.Descriptor instead.
func (*EmailInfo) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{6}
}

func (x *EmailInfo) GetEmailID() int64 {
	if x != nil {
		return x.EmailID
	}
	return 0
}

func (x *EmailInfo) GetAcceptName() string {
	if x != nil {
		return x.AcceptName
	}
	return ""
}

func (x *EmailInfo) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *EmailInfo) GetCc() string {
	if x != nil {
		return x.Cc
	}
	return ""
}

func (x *EmailInfo) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *EmailInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *EmailInfo) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *EmailInfo) GetAwardList() *GoodsList {
	if x != nil {
		return x.AwardList
	}
	return nil
}

func (x *EmailInfo) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

//房间信息
type RoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                   // 房间ID
	HostId      int64  `protobuf:"varint,2,opt,name=hostId,proto3" json:"hostId,omitempty"`           // 房主ID
	Level       int32  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`             // 房间级别
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                // 房间名称
	RoomKey     string `protobuf:"bytes,5,opt,name=roomKey,proto3" json:"roomKey,omitempty"`          // 房间密钥
	EnterScore  int64  `protobuf:"varint,6,opt,name=enterScore,proto3" json:"enterScore,omitempty"`   // 进场分
	OnlineCount int32  `protobuf:"varint,7,opt,name=onlineCount,proto3" json:"onlineCount,omitempty"` // 在线人数
	RobotCount  int32  `protobuf:"varint,8,opt,name=robotCount,proto3" json:"robotCount,omitempty"`   // 机器人数量
	MaxCount    int32  `protobuf:"varint,9,opt,name=maxCount,proto3" json:"maxCount,omitempty"`       // 最大人数 -1:表示无限制[一级房5人 二级房10人 三级房100人 4级房1000人 5级房10000人]
}

func (x *RoomInfo) Reset() {
	*x = RoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInfo) ProtoMessage() {}

func (x *RoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomInfo.ProtoReflect.Descriptor instead.
func (*RoomInfo) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{7}
}

func (x *RoomInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoomInfo) GetHostId() int64 {
	if x != nil {
		return x.HostId
	}
	return 0
}

func (x *RoomInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *RoomInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoomInfo) GetRoomKey() string {
	if x != nil {
		return x.RoomKey
	}
	return ""
}

func (x *RoomInfo) GetEnterScore() int64 {
	if x != nil {
		return x.EnterScore
	}
	return 0
}

func (x *RoomInfo) GetOnlineCount() int32 {
	if x != nil {
		return x.OnlineCount
	}
	return 0
}

func (x *RoomInfo) GetRobotCount() int32 {
	if x != nil {
		return x.RobotCount
	}
	return 0
}

func (x *RoomInfo) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

//桌子信息
type TableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Num         int32  `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`                  // 桌台编号(在房间内的编号)
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                 // 桌牌名称
	Rid         int64  `protobuf:"varint,4,opt,name=rid,proto3" json:"rid,omitempty"`                  // 房间ID
	Gid         int64  `protobuf:"varint,5,opt,name=gid,proto3" json:"gid,omitempty"`                  // 绑定的游戏ID
	OpenTime    int64  `protobuf:"varint,6,opt,name=openTime,proto3" json:"openTime,omitempty"`        // 开启时间
	Taxation    int64  `protobuf:"varint,7,opt,name=taxation,proto3" json:"taxation,omitempty"`        // 固定税收
	Commission  int32  `protobuf:"varint,8,opt,name=commission,proto3" json:"commission,omitempty"`    // 每局税收
	Amount      int32  `protobuf:"varint,9,opt,name=amount,proto3" json:"amount,omitempty"`            // 总共场数
	PlayScore   int64  `protobuf:"varint,10,opt,name=playScore,proto3" json:"playScore,omitempty"`     // 初始积分(携带的积分)
	SitterCount int32  `protobuf:"varint,11,opt,name=sitterCount,proto3" json:"sitterCount,omitempty"` // 客人数量(即:当前玩家数量)
}

func (x *TableInfo) Reset() {
	*x = TableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableInfo) ProtoMessage() {}

func (x *TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableInfo.ProtoReflect.Descriptor instead.
func (*TableInfo) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{8}
}

func (x *TableInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TableInfo) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *TableInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableInfo) GetRid() int64 {
	if x != nil {
		return x.Rid
	}
	return 0
}

func (x *TableInfo) GetGid() int64 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *TableInfo) GetOpenTime() int64 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *TableInfo) GetTaxation() int64 {
	if x != nil {
		return x.Taxation
	}
	return 0
}

func (x *TableInfo) GetCommission() int32 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *TableInfo) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TableInfo) GetPlayScore() int64 {
	if x != nil {
		return x.PlayScore
	}
	return 0
}

func (x *TableInfo) GetSitterCount() int32 {
	if x != nil {
		return x.SitterCount
	}
	return 0
}

//////////////////////////////////[游戏信息]/////////////////////////////////////////
//时间信息
type TimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp int64 `protobuf:"varint,1,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"` //时间戳（起始时间戳）
	WaitTime  int32 `protobuf:"varint,2,opt,name=waitTime,proto3" json:"waitTime,omitempty"`   //仍需等待时长
	OutTime   int32 `protobuf:"varint,3,opt,name=outTime,proto3" json:"outTime,omitempty"`     //服务器已过时长
	TotalTime int32 `protobuf:"varint,4,opt,name=totalTime,proto3" json:"totalTime,omitempty"` //总时长
}

func (x *TimeInfo) Reset() {
	*x = TimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeInfo) ProtoMessage() {}

func (x *TimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeInfo.ProtoReflect.Descriptor instead.
func (*TimeInfo) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{9}
}

func (x *TimeInfo) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *TimeInfo) GetWaitTime() int32 {
	if x != nil {
		return x.WaitTime
	}
	return 0
}

func (x *TimeInfo) GetOutTime() int32 {
	if x != nil {
		return x.OutTime
	}
	return 0
}

func (x *TimeInfo) GetTotalTime() int32 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

//牌局信息
type InningInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID    int64  `protobuf:"varint,1,opt,name=gameID,proto3" json:"gameID,omitempty"`       //游戏ID
	GameName  string `protobuf:"bytes,2,opt,name=gameName,proto3" json:"gameName,omitempty"`    // 游戏名称
	Number    string `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`        // 牌局编号
	WinnerID  int64  `protobuf:"varint,4,opt,name=winnerID,proto3" json:"winnerID,omitempty"`   // 赢家
	LoserID   int64  `protobuf:"varint,5,opt,name=loserID,proto3" json:"loserID,omitempty"`     // 输家
	Payoff    int64  `protobuf:"varint,6,opt,name=payoff,proto3" json:"payoff,omitempty"`       // 结算
	TimeStamp int64  `protobuf:"varint,7,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"` // 时间戳
	Result    string `protobuf:"bytes,8,opt,name=result,proto3" json:"result,omitempty"`        // 牌局结果奖励
}

func (x *InningInfo) Reset() {
	*x = InningInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InningInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InningInfo) ProtoMessage() {}

func (x *InningInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InningInfo.ProtoReflect.Descriptor instead.
func (*InningInfo) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{10}
}

func (x *InningInfo) GetGameID() int64 {
	if x != nil {
		return x.GameID
	}
	return 0
}

func (x *InningInfo) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *InningInfo) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *InningInfo) GetWinnerID() int64 {
	if x != nil {
		return x.WinnerID
	}
	return 0
}

func (x *InningInfo) GetLoserID() int64 {
	if x != nil {
		return x.LoserID
	}
	return 0
}

func (x *InningInfo) GetPayoff() int64 {
	if x != nil {
		return x.Payoff
	}
	return 0
}

func (x *InningInfo) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *InningInfo) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

//牌信息
type CardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards     []byte `protobuf:"bytes,1,opt,name=cards,proto3" json:"cards,omitempty"`          //牌
	CardType  int32  `protobuf:"varint,2,opt,name=cardType,proto3" json:"cardType,omitempty"`   //牌型
	CardValue int32  `protobuf:"varint,3,opt,name=cardValue,proto3" json:"cardValue,omitempty"` //牌值
}

func (x *CardInfo) Reset() {
	*x = CardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardInfo) ProtoMessage() {}

func (x *CardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardInfo.ProtoReflect.Descriptor instead.
func (*CardInfo) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{11}
}

func (x *CardInfo) GetCards() []byte {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *CardInfo) GetCardType() int32 {
	if x != nil {
		return x.CardType
	}
	return 0
}

func (x *CardInfo) GetCardValue() int32 {
	if x != nil {
		return x.CardValue
	}
	return 0
}

//区域信息
type AreaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`               //区域ID
	MyGold    int64 `protobuf:"varint,2,opt,name=myGold,proto3" json:"myGold,omitempty"`       //my
	TotalGold int64 `protobuf:"varint,3,opt,name=totalGold,proto3" json:"totalGold,omitempty"` //总
	AwardGold int64 `protobuf:"varint,4,opt,name=awardGold,proto3" json:"awardGold,omitempty"` //输赢情况
}

func (x *AreaInfo) Reset() {
	*x = AreaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaInfo) ProtoMessage() {}

func (x *AreaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaInfo.ProtoReflect.Descriptor instead.
func (*AreaInfo) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{12}
}

func (x *AreaInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AreaInfo) GetMyGold() int64 {
	if x != nil {
		return x.MyGold
	}
	return 0
}

func (x *AreaInfo) GetTotalGold() int64 {
	if x != nil {
		return x.TotalGold
	}
	return 0
}

func (x *AreaInfo) GetAwardGold() int64 {
	if x != nil {
		return x.AwardGold
	}
	return 0
}

//游戏信息
type GameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // 游戏ID
	Kid  int32  `protobuf:"varint,2,opt,name=kid,proto3" json:"kid,omitempty"`  // 游戏种类(类型)
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"` // 游戏名称
	//  int32 level = 4;        // 游戏类别 0:普通 1:中级 2:高级 3:积分排位 4:淘汰制排位
	Lessscore int64     `protobuf:"varint,5,opt,name=lessscore,proto3" json:"lessscore,omitempty"`           // 底分
	Scene     GameScene `protobuf:"varint,6,opt,name=scene,proto3,enum=pb.GameScene" json:"scene,omitempty"` // 游戏场景
	State     GameState `protobuf:"varint,7,opt,name=state,proto3,enum=pb.GameState" json:"state,omitempty"` // 游戏状态
	MaxCount  int32     `protobuf:"varint,8,opt,name=maxCount,proto3" json:"maxCount,omitempty"`             // 最大人数
	HowToPlay string    `protobuf:"bytes,9,opt,name=howToPlay,proto3" json:"howToPlay,omitempty"`
}

func (x *GameInfo) Reset() {
	*x = GameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameInfo) ProtoMessage() {}

func (x *GameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameInfo.ProtoReflect.Descriptor instead.
func (*GameInfo) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{13}
}

func (x *GameInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GameInfo) GetKid() int32 {
	if x != nil {
		return x.Kid
	}
	return 0
}

func (x *GameInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameInfo) GetLessscore() int64 {
	if x != nil {
		return x.Lessscore
	}
	return 0
}

func (x *GameInfo) GetScene() GameScene {
	if x != nil {
		return x.Scene
	}
	return GameScene_Free
}

func (x *GameInfo) GetState() GameState {
	if x != nil {
		return x.State
	}
	return GameState_InitTB
}

func (x *GameInfo) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *GameInfo) GetHowToPlay() string {
	if x != nil {
		return x.HowToPlay
	}
	return ""
}

////////////////////主页信息(起始信息,优先获取)///////////////////////////////////////
//主页信息
type MasterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo *UserInfo  `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"` //用户信息
	Classes  *ClassList `protobuf:"bytes,2,opt,name=classes,proto3" json:"classes,omitempty"`   //分类列表
	Tasks    *TaskList  `protobuf:"bytes,3,opt,name=tasks,proto3" json:"tasks,omitempty"`       //任务列表
}

func (x *MasterInfo) Reset() {
	*x = MasterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterInfo) ProtoMessage() {}

func (x *MasterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterInfo.ProtoReflect.Descriptor instead.
func (*MasterInfo) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{14}
}

func (x *MasterInfo) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *MasterInfo) GetClasses() *ClassList {
	if x != nil {
		return x.Classes
	}
	return nil
}

func (x *MasterInfo) GetTasks() *TaskList {
	if x != nil {
		return x.Tasks
	}
	return nil
}

/////////////////item/////////////////////////////////
//任务项
type TaskItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Twice int32  `protobuf:"varint,2,opt,name=twice,proto3" json:"twice,omitempty"` // 实现次数
	Hints string `protobuf:"bytes,3,opt,name=hints,proto3" json:"hints,omitempty"`  // 提示语 “恭喜 祝贺”之类
}

func (x *TaskItem) Reset() {
	*x = TaskItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskItem) ProtoMessage() {}

func (x *TaskItem) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskItem.ProtoReflect.Descriptor instead.
func (*TaskItem) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{15}
}

func (x *TaskItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskItem) GetTwice() int32 {
	if x != nil {
		return x.Twice
	}
	return 0
}

func (x *TaskItem) GetHints() string {
	if x != nil {
		return x.Hints
	}
	return ""
}

//分类项
type ClassItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`        // 标识[必要项]
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`     // 分类名称
	EnName string `protobuf:"bytes,3,opt,name=enName,proto3" json:"enName,omitempty"` // 英文
}

func (x *ClassItem) Reset() {
	*x = ClassItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassItem) ProtoMessage() {}

func (x *ClassItem) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassItem.ProtoReflect.Descriptor instead.
func (*ClassItem) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{16}
}

func (x *ClassItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClassItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClassItem) GetEnName() string {
	if x != nil {
		return x.EnName
	}
	return ""
}

/////////////list//////////////////////////////////
//任务列表
type TaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task []*TaskItem `protobuf:"bytes,1,rep,name=task,proto3" json:"task,omitempty"`
}

func (x *TaskList) Reset() {
	*x = TaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskList) ProtoMessage() {}

func (x *TaskList) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskList.ProtoReflect.Descriptor instead.
func (*TaskList) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{17}
}

func (x *TaskList) GetTask() []*TaskItem {
	if x != nil {
		return x.Task
	}
	return nil
}

//分类列表
type ClassList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classify []*ClassItem `protobuf:"bytes,1,rep,name=classify,proto3" json:"classify,omitempty"`
}

func (x *ClassList) Reset() {
	*x = ClassList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassList) ProtoMessage() {}

func (x *ClassList) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassList.ProtoReflect.Descriptor instead.
func (*ClassList) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{18}
}

func (x *ClassList) GetClassify() []*ClassItem {
	if x != nil {
		return x.Classify
	}
	return nil
}

/////////////////[常用列表]/////////////////////////////
//玩家列表
type PlayerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*PlayerInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PlayerList) Reset() {
	*x = PlayerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerList) ProtoMessage() {}

func (x *PlayerList) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerList.ProtoReflect.Descriptor instead.
func (*PlayerList) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{19}
}

func (x *PlayerList) GetItems() []*PlayerInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

//商品列表
type GoodsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*GoodsInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"` //奖励商品列表
}

func (x *GoodsList) Reset() {
	*x = GoodsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsList) ProtoMessage() {}

func (x *GoodsList) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsList.ProtoReflect.Descriptor instead.
func (*GoodsList) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{20}
}

func (x *GoodsList) GetItems() []*GoodsInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

//房间列表
type RoomList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*RoomInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *RoomList) Reset() {
	*x = RoomList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomList) ProtoMessage() {}

func (x *RoomList) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomList.ProtoReflect.Descriptor instead.
func (*RoomList) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{21}
}

func (x *RoomList) GetItems() []*RoomInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

//桌子列表
type TableList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*TableInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *TableList) Reset() {
	*x = TableList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableList) ProtoMessage() {}

func (x *TableList) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableList.ProtoReflect.Descriptor instead.
func (*TableList) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{22}
}

func (x *TableList) GetItems() []*TableInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

//游戏列表
type GameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*GameInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GameList) Reset() {
	*x = GameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameList) ProtoMessage() {}

func (x *GameList) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameList.ProtoReflect.Descriptor instead.
func (*GameList) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{23}
}

func (x *GameList) GetItems() []*GameInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

// 牌局记录
type InningList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*InningInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *InningList) Reset() {
	*x = InningList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseinfo_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InningList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InningList) ProtoMessage() {}

func (x *InningList) ProtoReflect() protoreflect.Message {
	mi := &file_baseinfo_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InningList.ProtoReflect.Descriptor instead.
func (*InningList) Descriptor() ([]byte, []int) {
	return file_baseinfo_proto_rawDescGZIP(), []int{24}
}

func (x *InningList) GetItems() []*InningInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_baseinfo_proto protoreflect.FileDescriptor

var file_baseinfo_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x70, 0x62, 0x22, 0xde, 0x04, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x49, 0x50, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x76, 0x49, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x79, 0x75, 0x61, 0x6e, 0x42, 0x61, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x79, 0x75, 0x61, 0x6e, 0x42, 0x61, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x44, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x44, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xfd, 0x03, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x79, 0x75, 0x61, 0x6e, 0x42, 0x61,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x79, 0x75, 0x61, 0x6e, 0x42, 0x61, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67,
	0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d,
	0x65, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x69, 0x72, 0x49, 0x44, 0x22, 0xaa, 0x03, 0x0a, 0x08, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x72,
	0x6d, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x72, 0x6d, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70,
	0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x70, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0a, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x62, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xb1, 0x01, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x6c,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x0c, 0x4b, 0x6e, 0x61, 0x70, 0x73, 0x61,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0c,
	0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x08, 0x68, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x68,
	0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x09, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x2b, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x09, 0x61, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xf4, 0x01, 0x0a, 0x08, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d,
	0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x95, 0x02, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x78, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7c, 0x0a, 0x08, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x6c, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6c, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x6f,
	0x66, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x66, 0x66,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5a, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x6e, 0x0a, 0x08, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x79, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6d, 0x79, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47,
	0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x72, 0x64, 0x47, 0x6f, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x77, 0x61, 0x72, 0x64, 0x47, 0x6f,
	0x6c, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x73, 0x73, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x73, 0x73, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x77,
	0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f,
	0x77, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x27, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x46, 0x0a,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x77, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x77, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x68, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x47, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2c,
	0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x36, 0x0a, 0x09,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x79, 0x22, 0x32, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x30, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x2e, 0x0a, 0x08, 0x52, 0x6f,
	0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x30, 0x0a, 0x09, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x2e, 0x0a, 0x08,
	0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x32, 0x0a, 0x0a,
	0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x2a, 0x2f, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10,
	0x02, 0x2a, 0x91, 0x01, 0x0a, 0x08, 0x4e, 0x54, 0x46, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e,
	0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x54, 0x46, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x55, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x54, 0x46, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x54, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x4e, 0x54, 0x46, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4e, 0x54,
	0x46, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x4e, 0x54, 0x46,
	0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x72, 0x75, 0x6d, 0x70, 0x65, 0x74, 0x4e, 0x54,
	0x46, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x54, 0x72, 0x75, 0x6d, 0x70, 0x65, 0x74, 0x4e,
	0x54, 0x46, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x54, 0x72, 0x75, 0x6d, 0x70, 0x65, 0x74,
	0x4e, 0x54, 0x46, 0x10, 0x07, 0x2a, 0xa3, 0x03, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x6f, 0x6f, 0x6b, 0x4f, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x67, 0x72, 0x65, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x10, 0x04,
	0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0x05,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x69, 0x73,
	0x65, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x6f,
	0x6b, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x73, 0x65, 0x10, 0x0a, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x10, 0x0b,
	0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x10, 0x0c,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x69, 0x10, 0x0d, 0x12,
	0x0e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x6e, 0x67, 0x10, 0x0e, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6e,
	0x67, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x6e, 0x47,
	0x61, 0x6e, 0x67, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54,
	0x69, 0x6e, 0x67, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48,
	0x75, 0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5a, 0x69, 0x4d,
	0x6f, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x65, 0x10, 0x61, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x47, 0x69, 0x76, 0x65, 0x55, 0x70, 0x10, 0x62, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x10, 0x63, 0x2a, 0x57, 0x0a, 0x09, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x6e, 0x69, 0x74,
	0x54, 0x42, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x42, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x54, 0x42, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x42, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x74, 0x6f, 0x70, 0x54, 0x42, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x42, 0x10, 0x05, 0x2a, 0xd3, 0x01, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x72, 0x65, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x70,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x76, 0x65, 0x72, 0x10,
	0x06, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x69, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x08, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x44, 0x69, 0x63, 0x65, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x57,
	0x61, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x10, 0x0b, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x69, 0x6e, 0x67, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x48, 0x75, 0x61, 0x5a, 0x48, 0x75, 0x10, 0x0e, 0x2a, 0x7a, 0x0a, 0x06, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x45, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x6f,
	0x75, 0x74, 0x68, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x65, 0x73, 0x74, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x41,
	0x53, 0x54, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x65, 0x73,
	0x74, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x41, 0x53, 0x54,
	0x4e, 0x6f, 0x72, 0x74, 0x68, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x65, 0x73, 0x74, 0x4e,
	0x6f, 0x72, 0x74, 0x68, 0x10, 0x08, 0x2a, 0x7d, 0x0a, 0x09, 0x4d, 0x4a, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x50, 0x61, 0x73, 0x73, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x68, 0x69, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x61,
	0x6e, 0x67, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6e, 0x67,
	0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x6e, 0x47, 0x61, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x09,
	0x0a, 0x05, 0x42, 0x75, 0x48, 0x75, 0x61, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x69, 0x6e,
	0x67, 0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x75, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x5a,
	0x69, 0x4d, 0x6f, 0x10, 0x0a, 0x2a, 0x60, 0x0a, 0x0a, 0x50, 0x48, 0x5a, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x68, 0x7a, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x68, 0x7a, 0x54, 0x69, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x68, 0x7a, 0x57, 0x65, 0x69, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x68, 0x7a, 0x48, 0x65,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x68, 0x7a, 0x50, 0x61, 0x6f, 0x10, 0x04, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x68, 0x7a, 0x50, 0x6f, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x68, 0x7a, 0x43, 0x68, 0x69, 0x10, 0x06, 0x42, 0x05, 0x5a, 0x03, 0x2f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_baseinfo_proto_rawDescOnce sync.Once
	file_baseinfo_proto_rawDescData = file_baseinfo_proto_rawDesc
)

func file_baseinfo_proto_rawDescGZIP() []byte {
	file_baseinfo_proto_rawDescOnce.Do(func() {
		file_baseinfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_baseinfo_proto_rawDescData)
	})
	return file_baseinfo_proto_rawDescData
}

var file_baseinfo_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_baseinfo_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_baseinfo_proto_goTypes = []interface{}{
	(NodeState)(0),       // 0: pb.NodeState
	(NTFLevel)(0),        // 1: pb.NTFLevel
	(PlayerState)(0),     // 2: pb.PlayerState
	(GameState)(0),       // 3: pb.GameState
	(GameScene)(0),       // 4: pb.GameScene
	(Direct)(0),          // 5: pb.Direct
	(MJOperate)(0),       // 6: pb.MJOperate
	(PHZOperate)(0),      // 7: pb.PHZOperate
	(*UserInfo)(nil),     // 8: pb.UserInfo
	(*PlayerInfo)(nil),   // 9: pb.PlayerInfo
	(*HeroInfo)(nil),     // 10: pb.HeroInfo
	(*WeaponInfo)(nil),   // 11: pb.WeaponInfo
	(*GoodsInfo)(nil),    // 12: pb.GoodsInfo
	(*KnapsackInfo)(nil), // 13: pb.KnapsackInfo
	(*EmailInfo)(nil),    // 14: pb.EmailInfo
	(*RoomInfo)(nil),     // 15: pb.RoomInfo
	(*TableInfo)(nil),    // 16: pb.TableInfo
	(*TimeInfo)(nil),     // 17: pb.TimeInfo
	(*InningInfo)(nil),   // 18: pb.InningInfo
	(*CardInfo)(nil),     // 19: pb.CardInfo
	(*AreaInfo)(nil),     // 20: pb.AreaInfo
	(*GameInfo)(nil),     // 21: pb.GameInfo
	(*MasterInfo)(nil),   // 22: pb.MasterInfo
	(*TaskItem)(nil),     // 23: pb.TaskItem
	(*ClassItem)(nil),    // 24: pb.ClassItem
	(*TaskList)(nil),     // 25: pb.TaskList
	(*ClassList)(nil),    // 26: pb.ClassList
	(*PlayerList)(nil),   // 27: pb.PlayerList
	(*GoodsList)(nil),    // 28: pb.GoodsList
	(*RoomList)(nil),     // 29: pb.RoomList
	(*TableList)(nil),    // 30: pb.TableList
	(*GameList)(nil),     // 31: pb.GameList
	(*InningList)(nil),   // 32: pb.InningList
}
var file_baseinfo_proto_depIdxs = []int32{
	2,  // 0: pb.PlayerInfo.state:type_name -> pb.PlayerState
	11, // 1: pb.KnapsackInfo.weaponryList:type_name -> pb.WeaponInfo
	12, // 2: pb.KnapsackInfo.goodsList:type_name -> pb.GoodsInfo
	10, // 3: pb.KnapsackInfo.heroList:type_name -> pb.HeroInfo
	28, // 4: pb.EmailInfo.awardList:type_name -> pb.GoodsList
	4,  // 5: pb.GameInfo.scene:type_name -> pb.GameScene
	3,  // 6: pb.GameInfo.state:type_name -> pb.GameState
	8,  // 7: pb.MasterInfo.userInfo:type_name -> pb.UserInfo
	26, // 8: pb.MasterInfo.classes:type_name -> pb.ClassList
	25, // 9: pb.MasterInfo.tasks:type_name -> pb.TaskList
	23, // 10: pb.TaskList.task:type_name -> pb.TaskItem
	24, // 11: pb.ClassList.classify:type_name -> pb.ClassItem
	9,  // 12: pb.PlayerList.items:type_name -> pb.PlayerInfo
	12, // 13: pb.GoodsList.items:type_name -> pb.GoodsInfo
	15, // 14: pb.RoomList.items:type_name -> pb.RoomInfo
	16, // 15: pb.TableList.items:type_name -> pb.TableInfo
	21, // 16: pb.GameList.items:type_name -> pb.GameInfo
	18, // 17: pb.InningList.items:type_name -> pb.InningInfo
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_baseinfo_proto_init() }
func file_baseinfo_proto_init() {
	if File_baseinfo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_baseinfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeroInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaponInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnapsackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InningInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseinfo_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InningList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_baseinfo_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_baseinfo_proto_goTypes,
		DependencyIndexes: file_baseinfo_proto_depIdxs,
		EnumInfos:         file_baseinfo_proto_enumTypes,
		MessageInfos:      file_baseinfo_proto_msgTypes,
	}.Build()
	File_baseinfo_proto = out.File
	file_baseinfo_proto_rawDesc = nil
	file_baseinfo_proto_goTypes = nil
	file_baseinfo_proto_depIdxs = nil
}
