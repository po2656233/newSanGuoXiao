// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.0
// source: chinesechess.proto

package pb

import (
// 	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
// const _ = proto.ProtoPackageIsVersion4

//中国象棋
//游戏类型
type XQPiece int32

const (
	XQPiece_NoXQPiece  XQPiece = 0
	XQPiece_RedBing    XQPiece = 1 // 兵
	XQPiece_RedPao     XQPiece = 2 // 炮
	XQPiece_RedJu      XQPiece = 3 // 车
	XQPiece_RedMa      XQPiece = 4 // 马
	XQPiece_RedXiang   XQPiece = 5 // 象
	XQPiece_RedShi     XQPiece = 6 // 士
	XQPiece_RedShuai   XQPiece = 7 // 帅
	XQPiece_BlackZu    XQPiece = 8
	XQPiece_BlackPao   XQPiece = 9
	XQPiece_BlackJu    XQPiece = 10
	XQPiece_BlackMa    XQPiece = 11
	XQPiece_BlackXiang XQPiece = 12
	XQPiece_BlackShi   XQPiece = 13
	XQPiece_BlackJiang XQPiece = 14
)

// Enum value maps for XQPiece.
var (
	XQPiece_name = map[int32]string{
		0:  "NoXQPiece",
		1:  "RedBing",
		2:  "RedPao",
		3:  "RedJu",
		4:  "RedMa",
		5:  "RedXiang",
		6:  "RedShi",
		7:  "RedShuai",
		8:  "BlackZu",
		9:  "BlackPao",
		10: "BlackJu",
		11: "BlackMa",
		12: "BlackXiang",
		13: "BlackShi",
		14: "BlackJiang",
	}
	XQPiece_value = map[string]int32{
		"NoXQPiece":  0,
		"RedBing":    1,
		"RedPao":     2,
		"RedJu":      3,
		"RedMa":      4,
		"RedXiang":   5,
		"RedShi":     6,
		"RedShuai":   7,
		"BlackZu":    8,
		"BlackPao":   9,
		"BlackJu":    10,
		"BlackMa":    11,
		"BlackXiang": 12,
		"BlackShi":   13,
		"BlackJiang": 14,
	}
)

func (x XQPiece) Enum() *XQPiece {
	p := new(XQPiece)
	*p = x
	return p
}

func (x XQPiece) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XQPiece) Descriptor() protoreflect.EnumDescriptor {
	return file_chinesechess_proto_enumTypes[0].Descriptor()
}

func (XQPiece) Type() protoreflect.EnumType {
	return &file_chinesechess_proto_enumTypes[0]
}

func (x XQPiece) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XQPiece.Descriptor instead.
func (XQPiece) EnumDescriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{0}
}

// 格子
type XQGrid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row  int32   `protobuf:"varint,1,opt,name=row,proto3" json:"row,omitempty"`                   // 所在排
	Col  int32   `protobuf:"varint,2,opt,name=col,proto3" json:"col,omitempty"`                   // 所在列
	Core XQPiece `protobuf:"varint,3,opt,name=core,proto3,enum=pb.XQPiece" json:"core,omitempty"` // 实际子项
}

func (x *XQGrid) Reset() {
	*x = XQGrid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XQGrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XQGrid) ProtoMessage() {}

func (x *XQGrid) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XQGrid.ProtoReflect.Descriptor instead.
func (*XQGrid) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{0}
}

func (x *XQGrid) GetRow() int32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *XQGrid) GetCol() int32 {
	if x != nil {
		return x.Col
	}
	return 0
}

func (x *XQGrid) GetCore() XQPiece {
	if x != nil {
		return x.Core
	}
	return XQPiece_NoXQPiece
}

// 棋盘
type XQBoardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cells []*XQGrid `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"` // 所有格子
}

func (x *XQBoardInfo) Reset() {
	*x = XQBoardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XQBoardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XQBoardInfo) ProtoMessage() {}

func (x *XQBoardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XQBoardInfo.ProtoReflect.Descriptor instead.
func (*XQBoardInfo) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{1}
}

func (x *XQBoardInfo) GetCells() []*XQGrid {
	if x != nil {
		return x.Cells
	}
	return nil
}

// 游戏结果
type ChineseChessResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedCamp   *PlayerSimpleInfo `protobuf:"bytes,1,opt,name=redCamp,proto3" json:"redCamp,omitempty"`     // 红方
	BlackCamp *PlayerSimpleInfo `protobuf:"bytes,2,opt,name=blackCamp,proto3" json:"blackCamp,omitempty"` // 蓝方
}

func (x *ChineseChessResult) Reset() {
	*x = ChineseChessResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessResult) ProtoMessage() {}

func (x *ChineseChessResult) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessResult.ProtoReflect.Descriptor instead.
func (*ChineseChessResult) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{2}
}

func (x *ChineseChessResult) GetRedCamp() *PlayerSimpleInfo {
	if x != nil {
		return x.RedCamp
	}
	return nil
}

func (x *ChineseChessResult) GetBlackCamp() *PlayerSimpleInfo {
	if x != nil {
		return x.BlackCamp
	}
	return nil
}

/////////////////////////////////////////////////////
//场景
type ChineseChessSceneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp int64             `protobuf:"varint,1,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"` // 时间戳
	Inning    string            `protobuf:"bytes,2,opt,name=inning,proto3" json:"inning,omitempty"`        // 牌局号
	Board     *XQBoardInfo      `protobuf:"bytes,3,opt,name=board,proto3" json:"board,omitempty"`          // 方格盘信息
	RedCamp   *PlayerSimpleInfo `protobuf:"bytes,4,opt,name=redCamp,proto3" json:"redCamp,omitempty"`      // 红方
	BlackCamp *PlayerSimpleInfo `protobuf:"bytes,5,opt,name=blackCamp,proto3" json:"blackCamp,omitempty"`  // 蓝方
}

func (x *ChineseChessSceneResp) Reset() {
	*x = ChineseChessSceneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessSceneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessSceneResp) ProtoMessage() {}

func (x *ChineseChessSceneResp) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessSceneResp.ProtoReflect.Descriptor instead.
func (*ChineseChessSceneResp) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{3}
}

func (x *ChineseChessSceneResp) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *ChineseChessSceneResp) GetInning() string {
	if x != nil {
		return x.Inning
	}
	return ""
}

func (x *ChineseChessSceneResp) GetBoard() *XQBoardInfo {
	if x != nil {
		return x.Board
	}
	return nil
}

func (x *ChineseChessSceneResp) GetRedCamp() *PlayerSimpleInfo {
	if x != nil {
		return x.RedCamp
	}
	return nil
}

func (x *ChineseChessSceneResp) GetBlackCamp() *PlayerSimpleInfo {
	if x != nil {
		return x.BlackCamp
	}
	return nil
}

// 状态-玩家操作
// 等待玩家准备
type ChineseChessStateReadyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=times,proto3" json:"times,omitempty"`
}

func (x *ChineseChessStateReadyResp) Reset() {
	*x = ChineseChessStateReadyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessStateReadyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessStateReadyResp) ProtoMessage() {}

func (x *ChineseChessStateReadyResp) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessStateReadyResp.ProtoReflect.Descriptor instead.
func (*ChineseChessStateReadyResp) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{4}
}

func (x *ChineseChessStateReadyResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

// 设置时长
type ChineseChessStateSetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=times,proto3" json:"times,omitempty"`
	Uid   int64     `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"` // 当前操作方
}

func (x *ChineseChessStateSetResp) Reset() {
	*x = ChineseChessStateSetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessStateSetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessStateSetResp) ProtoMessage() {}

func (x *ChineseChessStateSetResp) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessStateSetResp.ProtoReflect.Descriptor instead.
func (*ChineseChessStateSetResp) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{5}
}

func (x *ChineseChessStateSetResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *ChineseChessStateSetResp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

// 等待确认
type ChineseChessStateConfirmResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=times,proto3" json:"times,omitempty"`
	Uid   int64     `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"` // 当前操作方
}

func (x *ChineseChessStateConfirmResp) Reset() {
	*x = ChineseChessStateConfirmResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessStateConfirmResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessStateConfirmResp) ProtoMessage() {}

func (x *ChineseChessStateConfirmResp) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessStateConfirmResp.ProtoReflect.Descriptor instead.
func (*ChineseChessStateConfirmResp) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{6}
}

func (x *ChineseChessStateConfirmResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *ChineseChessStateConfirmResp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

// 开始
type ChineseChessStateStartResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=times,proto3" json:"times,omitempty"`
	Uid   int64     `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"` // 当前操作方
}

func (x *ChineseChessStateStartResp) Reset() {
	*x = ChineseChessStateStartResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessStateStartResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessStateStartResp) ProtoMessage() {}

func (x *ChineseChessStateStartResp) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessStateStartResp.ProtoReflect.Descriptor instead.
func (*ChineseChessStateStartResp) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{7}
}

func (x *ChineseChessStateStartResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *ChineseChessStateStartResp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

// 下棋
type ChineseChessStatePlayingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times    *TimeInfo    `protobuf:"bytes,1,opt,name=times,proto3" json:"times,omitempty"`
	Uid      int64        `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`          // 当前操作方
	NowBoard *XQBoardInfo `protobuf:"bytes,3,opt,name=nowBoard,proto3" json:"nowBoard,omitempty"` // 当前盘子信息
}

func (x *ChineseChessStatePlayingResp) Reset() {
	*x = ChineseChessStatePlayingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessStatePlayingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessStatePlayingResp) ProtoMessage() {}

func (x *ChineseChessStatePlayingResp) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessStatePlayingResp.ProtoReflect.Descriptor instead.
func (*ChineseChessStatePlayingResp) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{8}
}

func (x *ChineseChessStatePlayingResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *ChineseChessStatePlayingResp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ChineseChessStatePlayingResp) GetNowBoard() *XQBoardInfo {
	if x != nil {
		return x.NowBoard
	}
	return nil
}

// 结束
type ChineseChessStateOpenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times    *TimeInfo    `protobuf:"bytes,1,opt,name=times,proto3" json:"times,omitempty"`
	WinUid   int64        `protobuf:"varint,2,opt,name=winUid,proto3" json:"winUid,omitempty"`    // 当前操作方
	NowBoard *XQBoardInfo `protobuf:"bytes,3,opt,name=nowBoard,proto3" json:"nowBoard,omitempty"` // 当前盘子信息
}

func (x *ChineseChessStateOpenResp) Reset() {
	*x = ChineseChessStateOpenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessStateOpenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessStateOpenResp) ProtoMessage() {}

func (x *ChineseChessStateOpenResp) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessStateOpenResp.ProtoReflect.Descriptor instead.
func (*ChineseChessStateOpenResp) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{9}
}

func (x *ChineseChessStateOpenResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *ChineseChessStateOpenResp) GetWinUid() int64 {
	if x != nil {
		return x.WinUid
	}
	return 0
}

func (x *ChineseChessStateOpenResp) GetNowBoard() *XQBoardInfo {
	if x != nil {
		return x.NowBoard
	}
	return nil
}

// 游戏结算
type ChineseChessStateOverResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times  *TimeInfo           `protobuf:"bytes,1,opt,name=times,proto3" json:"times,omitempty"`
	Result *ChineseChessResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ChineseChessStateOverResp) Reset() {
	*x = ChineseChessStateOverResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessStateOverResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessStateOverResp) ProtoMessage() {}

func (x *ChineseChessStateOverResp) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessStateOverResp.ProtoReflect.Descriptor instead.
func (*ChineseChessStateOverResp) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{10}
}

func (x *ChineseChessStateOverResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *ChineseChessStateOverResp) GetResult() *ChineseChessResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// 被将军
type ChineseChessJiangJuResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeJiangUid int64 `protobuf:"varint,1,opt,name=beJiangUid,proto3" json:"beJiangUid,omitempty"` //被将军的一方
}

func (x *ChineseChessJiangJuResp) Reset() {
	*x = ChineseChessJiangJuResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessJiangJuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessJiangJuResp) ProtoMessage() {}

func (x *ChineseChessJiangJuResp) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessJiangJuResp.ProtoReflect.Descriptor instead.
func (*ChineseChessJiangJuResp) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{11}
}

func (x *ChineseChessJiangJuResp) GetBeJiangUid() int64 {
	if x != nil {
		return x.BeJiangUid
	}
	return 0
}

// 绝杀或困毙
type ChineseChessJueShaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeJueShaUid int64 `protobuf:"varint,1,opt,name=beJueShaUid,proto3" json:"beJueShaUid,omitempty"` //被将军的一方
}

func (x *ChineseChessJueShaResp) Reset() {
	*x = ChineseChessJueShaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessJueShaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessJueShaResp) ProtoMessage() {}

func (x *ChineseChessJueShaResp) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessJueShaResp.ProtoReflect.Descriptor instead.
func (*ChineseChessJueShaResp) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{12}
}

func (x *ChineseChessJueShaResp) GetBeJueShaUid() int64 {
	if x != nil {
		return x.BeJueShaUid
	}
	return 0
}

//////////////////////////////////
//准备
type ChineseChessReadyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReady bool `protobuf:"varint,1,opt,name=isReady,proto3" json:"isReady,omitempty"`
}

func (x *ChineseChessReadyReq) Reset() {
	*x = ChineseChessReadyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessReadyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessReadyReq) ProtoMessage() {}

func (x *ChineseChessReadyReq) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessReadyReq.ProtoReflect.Descriptor instead.
func (*ChineseChessReadyReq) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{13}
}

func (x *ChineseChessReadyReq) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

type ChineseChessReadyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReady bool  `protobuf:"varint,1,opt,name=isReady,proto3" json:"isReady,omitempty"`
	Uid     int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *ChineseChessReadyResp) Reset() {
	*x = ChineseChessReadyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessReadyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessReadyResp) ProtoMessage() {}

func (x *ChineseChessReadyResp) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessReadyResp.ProtoReflect.Descriptor instead.
func (*ChineseChessReadyResp) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{14}
}

func (x *ChineseChessReadyResp) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

func (x *ChineseChessReadyResp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

//设置时长
type ChineseChessSetTimeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout   int32     `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`    //设置时长
	GiveCells []*XQGrid `protobuf:"bytes,2,rep,name=giveCells,proto3" json:"giveCells,omitempty"` // 设置方让棋子,最多三个
}

func (x *ChineseChessSetTimeReq) Reset() {
	*x = ChineseChessSetTimeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessSetTimeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessSetTimeReq) ProtoMessage() {}

func (x *ChineseChessSetTimeReq) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessSetTimeReq.ProtoReflect.Descriptor instead.
func (*ChineseChessSetTimeReq) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{15}
}

func (x *ChineseChessSetTimeReq) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ChineseChessSetTimeReq) GetGiveCells() []*XQGrid {
	if x != nil {
		return x.GiveCells
	}
	return nil
}

type ChineseChessSetTimeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       int64     `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Timeout   int32     `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	GiveCells []*XQGrid `protobuf:"bytes,3,rep,name=giveCells,proto3" json:"giveCells,omitempty"` // 设置方让棋子,最多三个
}

func (x *ChineseChessSetTimeResp) Reset() {
	*x = ChineseChessSetTimeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessSetTimeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessSetTimeResp) ProtoMessage() {}

func (x *ChineseChessSetTimeResp) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessSetTimeResp.ProtoReflect.Descriptor instead.
func (*ChineseChessSetTimeResp) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{16}
}

func (x *ChineseChessSetTimeResp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ChineseChessSetTimeResp) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ChineseChessSetTimeResp) GetGiveCells() []*XQGrid {
	if x != nil {
		return x.GiveCells
	}
	return nil
}

//是否同意对方设置的时长
type ChineseChessAgreeTimeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAgree bool `protobuf:"varint,1,opt,name=isAgree,proto3" json:"isAgree,omitempty"`
}

func (x *ChineseChessAgreeTimeReq) Reset() {
	*x = ChineseChessAgreeTimeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessAgreeTimeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessAgreeTimeReq) ProtoMessage() {}

func (x *ChineseChessAgreeTimeReq) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessAgreeTimeReq.ProtoReflect.Descriptor instead.
func (*ChineseChessAgreeTimeReq) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{17}
}

func (x *ChineseChessAgreeTimeReq) GetIsAgree() bool {
	if x != nil {
		return x.IsAgree
	}
	return false
}

type ChineseChessAgreeTimeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	IsAgree bool  `protobuf:"varint,2,opt,name=isAgree,proto3" json:"isAgree,omitempty"`
}

func (x *ChineseChessAgreeTimeResp) Reset() {
	*x = ChineseChessAgreeTimeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessAgreeTimeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessAgreeTimeResp) ProtoMessage() {}

func (x *ChineseChessAgreeTimeResp) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessAgreeTimeResp.ProtoReflect.Descriptor instead.
func (*ChineseChessAgreeTimeResp) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{18}
}

func (x *ChineseChessAgreeTimeResp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ChineseChessAgreeTimeResp) GetIsAgree() bool {
	if x != nil {
		return x.IsAgree
	}
	return false
}

// 移动棋子
type ChineseChessMoveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin *XQGrid `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"` //原先的格子
	Target *XQGrid `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"` //被吃掉的格子
}

func (x *ChineseChessMoveReq) Reset() {
	*x = ChineseChessMoveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessMoveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessMoveReq) ProtoMessage() {}

func (x *ChineseChessMoveReq) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessMoveReq.ProtoReflect.Descriptor instead.
func (*ChineseChessMoveReq) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{19}
}

func (x *ChineseChessMoveReq) GetOrigin() *XQGrid {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *ChineseChessMoveReq) GetTarget() *XQGrid {
	if x != nil {
		return x.Target
	}
	return nil
}

type ChineseChessMoveResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid    int64   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Origin *XQGrid `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"` //原先的格子
	Target *XQGrid `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"` //被吃掉的格子
}

func (x *ChineseChessMoveResp) Reset() {
	*x = ChineseChessMoveResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinesechess_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseChessMoveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseChessMoveResp) ProtoMessage() {}

func (x *ChineseChessMoveResp) ProtoReflect() protoreflect.Message {
	mi := &file_chinesechess_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseChessMoveResp.ProtoReflect.Descriptor instead.
func (*ChineseChessMoveResp) Descriptor() ([]byte, []int) {
	return file_chinesechess_proto_rawDescGZIP(), []int{20}
}

func (x *ChineseChessMoveResp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ChineseChessMoveResp) GetOrigin() *XQGrid {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *ChineseChessMoveResp) GetTarget() *XQGrid {
	if x != nil {
		return x.Target
	}
	return nil
}

var File_chinesechess_proto protoreflect.FileDescriptor

var file_chinesechess_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x06, 0x58, 0x51, 0x47, 0x72,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x58, 0x51, 0x50, 0x69, 0x65, 0x63,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x2f, 0x0a, 0x0b, 0x58, 0x51, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x58, 0x51, 0x47, 0x72, 0x69,
	0x64, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0x78, 0x0a, 0x12, 0x43, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e,
	0x0a, 0x07, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x32,
	0x0a, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x61,
	0x6d, 0x70, 0x22, 0xd8, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x25, 0x0a, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x58, 0x51, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x64,
	0x43, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x43, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x6d, 0x70, 0x22, 0x40, 0x0a,
	0x1a, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22,
	0x50, 0x0a, 0x18, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x22, 0x54, 0x0a, 0x1c, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x1a, 0x43, 0x68, 0x69, 0x6e, 0x65,
	0x73, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1c,
	0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x6e, 0x6f, 0x77, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x58, 0x51, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6e, 0x6f, 0x77, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x22,
	0x84, 0x01, 0x0a, 0x19, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a,
	0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x6e, 0x6f, 0x77,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x58, 0x51, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6e, 0x6f,
	0x77, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x6f, 0x0a, 0x19, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73,
	0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x39, 0x0a, 0x17, 0x43, 0x68, 0x69, 0x6e, 0x65,
	0x73, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x4a, 0x69, 0x61, 0x6e, 0x67, 0x4a, 0x75, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x4a, 0x69, 0x61, 0x6e, 0x67, 0x55, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x65, 0x4a, 0x69, 0x61, 0x6e, 0x67, 0x55,
	0x69, 0x64, 0x22, 0x3a, 0x0a, 0x16, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x4a, 0x75, 0x65, 0x53, 0x68, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x65, 0x4a, 0x75, 0x65, 0x53, 0x68, 0x61, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x62, 0x65, 0x4a, 0x75, 0x65, 0x53, 0x68, 0x61, 0x55, 0x69, 0x64, 0x22, 0x30,
	0x0a, 0x14, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x22, 0x43, 0x0a, 0x15, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x16, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x67, 0x69, 0x76,
	0x65, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x58, 0x51, 0x47, 0x72, 0x69, 0x64, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x22, 0x6f, 0x0a, 0x17, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x67, 0x69,
	0x76, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x58, 0x51, 0x47, 0x72, 0x69, 0x64, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x43,
	0x65, 0x6c, 0x6c, 0x73, 0x22, 0x34, 0x0a, 0x18, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x43,
	0x68, 0x65, 0x73, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65, 0x22, 0x47, 0x0a, 0x19, 0x43, 0x68,
	0x69, 0x6e, 0x65, 0x73, 0x65, 0x43, 0x68, 0x65, 0x73, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x22, 0x5d, 0x0a, 0x13, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x58, 0x51, 0x47, 0x72, 0x69, 0x64, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x22,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x58, 0x51, 0x47, 0x72, 0x69, 0x64, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0x70, 0x0a, 0x14, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x58, 0x51, 0x47, 0x72, 0x69, 0x64, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x22, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x58, 0x51, 0x47, 0x72, 0x69, 0x64, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x2a, 0xd2, 0x01, 0x0a, 0x07, 0x58, 0x51, 0x50, 0x69, 0x65, 0x63, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x58, 0x51, 0x50, 0x69, 0x65, 0x63, 0x65, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x65, 0x64, 0x50, 0x61, 0x6f, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x4a,
	0x75, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x4d, 0x61, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x65, 0x64, 0x58, 0x69, 0x61, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x65, 0x64, 0x53, 0x68, 0x69, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x64, 0x53,
	0x68, 0x75, 0x61, 0x69, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x5a,
	0x75, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x6f, 0x10,
	0x09, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x75, 0x10, 0x0a, 0x12, 0x0b,
	0x0a, 0x07, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x58, 0x69, 0x61, 0x6e, 0x67, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x53, 0x68, 0x69, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x4a, 0x69, 0x61, 0x6e, 0x67, 0x10, 0x0e, 0x42, 0x05, 0x5a, 0x03, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chinesechess_proto_rawDescOnce sync.Once
	file_chinesechess_proto_rawDescData = file_chinesechess_proto_rawDesc
)

func file_chinesechess_proto_rawDescGZIP() []byte {
	file_chinesechess_proto_rawDescOnce.Do(func() {
		file_chinesechess_proto_rawDescData = protoimpl.X.CompressGZIP(file_chinesechess_proto_rawDescData)
	})
	return file_chinesechess_proto_rawDescData
}

var file_chinesechess_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chinesechess_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_chinesechess_proto_goTypes = []interface{}{
	(XQPiece)(0),                         // 0: pb.XQPiece
	(*XQGrid)(nil),                       // 1: pb.XQGrid
	(*XQBoardInfo)(nil),                  // 2: pb.XQBoardInfo
	(*ChineseChessResult)(nil),           // 3: pb.ChineseChessResult
	(*ChineseChessSceneResp)(nil),        // 4: pb.ChineseChessSceneResp
	(*ChineseChessStateReadyResp)(nil),   // 5: pb.ChineseChessStateReadyResp
	(*ChineseChessStateSetResp)(nil),     // 6: pb.ChineseChessStateSetResp
	(*ChineseChessStateConfirmResp)(nil), // 7: pb.ChineseChessStateConfirmResp
	(*ChineseChessStateStartResp)(nil),   // 8: pb.ChineseChessStateStartResp
	(*ChineseChessStatePlayingResp)(nil), // 9: pb.ChineseChessStatePlayingResp
	(*ChineseChessStateOpenResp)(nil),    // 10: pb.ChineseChessStateOpenResp
	(*ChineseChessStateOverResp)(nil),    // 11: pb.ChineseChessStateOverResp
	(*ChineseChessJiangJuResp)(nil),      // 12: pb.ChineseChessJiangJuResp
	(*ChineseChessJueShaResp)(nil),       // 13: pb.ChineseChessJueShaResp
	(*ChineseChessReadyReq)(nil),         // 14: pb.ChineseChessReadyReq
	(*ChineseChessReadyResp)(nil),        // 15: pb.ChineseChessReadyResp
	(*ChineseChessSetTimeReq)(nil),       // 16: pb.ChineseChessSetTimeReq
	(*ChineseChessSetTimeResp)(nil),      // 17: pb.ChineseChessSetTimeResp
	(*ChineseChessAgreeTimeReq)(nil),     // 18: pb.ChineseChessAgreeTimeReq
	(*ChineseChessAgreeTimeResp)(nil),    // 19: pb.ChineseChessAgreeTimeResp
	(*ChineseChessMoveReq)(nil),          // 20: pb.ChineseChessMoveReq
	(*ChineseChessMoveResp)(nil),         // 21: pb.ChineseChessMoveResp
	(*PlayerSimpleInfo)(nil),             // 22: pb.PlayerSimpleInfo
	(*TimeInfo)(nil),                     // 23: pb.TimeInfo
}
var file_chinesechess_proto_depIdxs = []int32{
	0,  // 0: pb.XQGrid.core:type_name -> pb.XQPiece
	1,  // 1: pb.XQBoardInfo.cells:type_name -> pb.XQGrid
	22, // 2: pb.ChineseChessResult.redCamp:type_name -> pb.PlayerSimpleInfo
	22, // 3: pb.ChineseChessResult.blackCamp:type_name -> pb.PlayerSimpleInfo
	2,  // 4: pb.ChineseChessSceneResp.board:type_name -> pb.XQBoardInfo
	22, // 5: pb.ChineseChessSceneResp.redCamp:type_name -> pb.PlayerSimpleInfo
	22, // 6: pb.ChineseChessSceneResp.blackCamp:type_name -> pb.PlayerSimpleInfo
	23, // 7: pb.ChineseChessStateReadyResp.times:type_name -> pb.TimeInfo
	23, // 8: pb.ChineseChessStateSetResp.times:type_name -> pb.TimeInfo
	23, // 9: pb.ChineseChessStateConfirmResp.times:type_name -> pb.TimeInfo
	23, // 10: pb.ChineseChessStateStartResp.times:type_name -> pb.TimeInfo
	23, // 11: pb.ChineseChessStatePlayingResp.times:type_name -> pb.TimeInfo
	2,  // 12: pb.ChineseChessStatePlayingResp.nowBoard:type_name -> pb.XQBoardInfo
	23, // 13: pb.ChineseChessStateOpenResp.times:type_name -> pb.TimeInfo
	2,  // 14: pb.ChineseChessStateOpenResp.nowBoard:type_name -> pb.XQBoardInfo
	23, // 15: pb.ChineseChessStateOverResp.times:type_name -> pb.TimeInfo
	3,  // 16: pb.ChineseChessStateOverResp.result:type_name -> pb.ChineseChessResult
	1,  // 17: pb.ChineseChessSetTimeReq.giveCells:type_name -> pb.XQGrid
	1,  // 18: pb.ChineseChessSetTimeResp.giveCells:type_name -> pb.XQGrid
	1,  // 19: pb.ChineseChessMoveReq.origin:type_name -> pb.XQGrid
	1,  // 20: pb.ChineseChessMoveReq.target:type_name -> pb.XQGrid
	1,  // 21: pb.ChineseChessMoveResp.origin:type_name -> pb.XQGrid
	1,  // 22: pb.ChineseChessMoveResp.target:type_name -> pb.XQGrid
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_chinesechess_proto_init() }
func file_chinesechess_proto_init() {
	if File_chinesechess_proto != nil {
		return
	}
	file_baseinfo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chinesechess_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XQGrid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XQBoardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessSceneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessStateReadyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessStateSetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessStateConfirmResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessStateStartResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessStatePlayingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessStateOpenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessStateOverResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessJiangJuResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessJueShaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessReadyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessReadyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessSetTimeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessSetTimeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessAgreeTimeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessAgreeTimeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessMoveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinesechess_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseChessMoveResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chinesechess_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chinesechess_proto_goTypes,
		DependencyIndexes: file_chinesechess_proto_depIdxs,
		EnumInfos:         file_chinesechess_proto_enumTypes,
		MessageInfos:      file_chinesechess_proto_msgTypes,
	}.Build()
	File_chinesechess_proto = out.File
	file_chinesechess_proto_rawDesc = nil
	file_chinesechess_proto_goTypes = nil
	file_chinesechess_proto_depIdxs = nil
}
